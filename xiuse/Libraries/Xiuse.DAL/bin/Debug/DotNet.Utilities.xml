<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DotNet.Utilities</name>
    </assembly>
    <members>
        <member name="T:DotNet.Utilities.Mac">
            <summary>
            Mac 的摘要说明。
            </summary>
        </member>
        <member name="T:DotNet.Utilities.Win32">
            <summary>
            Ö´ÐÐÐèÒªµ÷ÓÃ <b>Win32</b> API µÄ²Ù×÷¸¨ÖúÀà¡£
            </summary>
            <summary>
            执行需要调用 <b>Win32</b> API 的操作辅助类。
            </summary>
        </member>
        <member name="M:DotNet.Utilities.Win32.GetCurrentPlatform">
            <summary>
            Ö´ÐÐ»ñÈ¡µ±Ç°ÔËÐÐµÄ²Ù×÷ÏµÍ³°æ±¾¡£
            </summary>
            <returns><see cref="T:DotNet.Utilities.Win32.Platform"/> µÄÖµÖ®Ò»£¬Ëû±íÊ¾µ±Ç°ÔËÐÐµÄ²Ù×÷ÏµÍ³°æ±¾¡£</returns>
        </member>
        <member name="T:DotNet.Utilities.Win32.Platform">
            <summary>
            ±íÊ¾²Ù×÷ÏµÍ³Æ½Ì¨¡£
            </summary>
        </member>
        <member name="F:DotNet.Utilities.Win32.Platform.Windows95">
            <summary>
            Windows 95 ²Ù×÷ÏµÍ³.
            </summary>
        </member>
        <member name="F:DotNet.Utilities.Win32.Platform.Windows98">
            <summary>
            Windows 98 ²Ù×÷ÏµÍ³.
            </summary>
        </member>
        <member name="F:DotNet.Utilities.Win32.Platform.Windows982ndEdition">
            <summary>
            Windows 98 µÚ¶þ°æ²Ù×÷ÏµÍ³.
            </summary>
        </member>
        <member name="F:DotNet.Utilities.Win32.Platform.WindowsME">
            <summary>
            Windows ME ²Ù×÷ÏµÍ³.
            </summary>
        </member>
        <member name="F:DotNet.Utilities.Win32.Platform.WindowsNT351">
            <summary>
            Windows NT 3.51 ²Ù×÷ÏµÍ³.
            </summary>
        </member>
        <member name="F:DotNet.Utilities.Win32.Platform.WindowsNT40">
            <summary>
            Windows NT 4.0 ²Ù×÷ÏµÍ³.
            </summary>
        </member>
        <member name="F:DotNet.Utilities.Win32.Platform.Windows2000">
            <summary>
            Windows 2000 ²Ù×÷ÏµÍ³.
            </summary>
        </member>
        <member name="F:DotNet.Utilities.Win32.Platform.WindowsXP">
            <summary>
            Windows XP ²Ù×÷ÏµÍ³.
            </summary>
        </member>
        <member name="F:DotNet.Utilities.Win32.Platform.Windows2003">
            <summary>
            Windows 2003 ²Ù×÷ÏµÍ³.
            </summary>
        </member>
        <member name="F:DotNet.Utilities.Win32.Platform.WindowsVista">
            <summary>
            Windows Vista ²Ù×÷ÏµÍ³.
            </summary>
        </member>
        <member name="F:DotNet.Utilities.Win32.Platform.WindowsCE">
            <summary>
            Windows CE ²Ù×÷ÏµÍ³.
            </summary>
        </member>
        <member name="F:DotNet.Utilities.Win32.Platform.UnKnown">
            <summary>
            ²Ù×÷ÏµÍ³°æ±¾Î´Öª¡£
            </summary>
        </member>
        <member name="T:DotNet.Utilities.Win32.DriverError">
            <summary>
            ±íÊ¾IDEÉè±¸´íÎó×´Ì¬´úÂëµÄ³£Á¿ÓëÊýÖµµÄ¶ÔÓ¦¡£
            </summary>
            <remarks>ÆäÊýÖµÓë³£Á¿¶¨ÒåÔÚ <b>WinIoCtl.h</b> ÎÄ¼þÖÐ¡£</remarks>
        </member>
        <member name="F:DotNet.Utilities.Win32.DriverError.SMART_NO_ERROR">
            <summary>
            Éè±¸ÎÞ´íÎó¡£
            </summary>
        </member>
        <member name="F:DotNet.Utilities.Win32.DriverError.SMART_IDE_ERROR">
            <summary>
            Éè±¸IDE¿ØÖÆÆ÷´íÎó¡£
            </summary>
        </member>
        <member name="F:DotNet.Utilities.Win32.DriverError.SMART_INVALID_FLAG">
            <summary>
            ÎÞÐ§µÄÃüÁî±ê¼Ç¡£
            </summary>
        </member>
        <member name="F:DotNet.Utilities.Win32.DriverError.SMART_INVALID_COMMAND">
            <summary>
            ÎÞÐ§µÄÃüÁîÊý¾Ý¡£
            </summary>
        </member>
        <member name="F:DotNet.Utilities.Win32.DriverError.SMART_INVALID_BUFFER">
            <summary>
            »º³åÇøÎÞÐ§£¨Èç»º³åÇøÎª¿Õ»òµØÖ·´íÎó£©¡£
            </summary>
        </member>
        <member name="F:DotNet.Utilities.Win32.DriverError.SMART_INVALID_DRIVE">
            <summary>
            Éè±¸±àºÅ´íÎó¡£
            </summary>
        </member>
        <member name="F:DotNet.Utilities.Win32.DriverError.SMART_INVALID_IOCTL">
            <summary>
            IOCTL´íÎó¡£
            </summary>
        </member>
        <member name="F:DotNet.Utilities.Win32.DriverError.SMART_ERROR_NO_MEM">
            <summary>
            ÎÞ·¨Ëø¶¨ÓÃ»§µÄ»º³åÇø¡£
            </summary>
        </member>
        <member name="F:DotNet.Utilities.Win32.DriverError.SMART_INVALID_REGISTER">
            <summary>
            ÎÞÐ§µÄIDE×¢²áÃüÁî¡£
            </summary>
        </member>
        <member name="F:DotNet.Utilities.Win32.DriverError.SMART_NOT_SUPPORTED">
            <summary>
            ÎÞÐ§µÄÃüÁîÉèÖÃ¡£
            </summary>
        </member>
        <member name="F:DotNet.Utilities.Win32.DriverError.SMART_NO_IDE_DEVICE">
            <summary>
            Ö¸¶¨Òª²éÕÒµÄÉè±ðË÷ÒýºÅÎÞÐ§¡£
            </summary>
        </member>
        <member name="M:DotNet.Utilities.Win32.GetHardDiskInfo(DotNet.Utilities.Win32.IdSector)">
            <summary>
            ¸ù¾ÝÖ¸¶¨µÄÉè±¸ÐÅÏ¢Éú³ÉÉè±¸µÄÏêÏ¸ÐÅÏ¢¡£
            </summary>
            <param name="phdinfo">Ò»¸ö <see cref="T:DotNet.Utilities.Win32.IdSector"/></param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.Win32.GetHddInfoNT(System.Byte)">
            <summary>
            »ñÈ¡ÔÚNTÆ½Ì¨ÏÂÖ¸¶¨ÐòÁÐºÅµÄÓ²ÅÌÐÅÏ¢¡£
            </summary>
            <param name="driveIndex">ÎïÀí´ÅÅÌµÄÊýÁ¿¡£</param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.Win32.GetHddInfo9X(System.Byte)">
            <summary>
            
            </summary>
            <param name="driveIndex"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.Win32.GetSystemMenu(System.IntPtr,System.Boolean)">
            <summary>
            È¡µÃÖ¸¶¨´°¿ÚµÄÏµÍ³²Ëµ¥µÄ¾ä±ú¡£
            </summary>
            <param name="hwnd">Ö¸ÏòÒª»ñÈ¡ÏµÍ³²Ëµ¥´°¿ÚµÄ <see cref="T:System.IntPtr"/> ¾ä±ú¡£</param>
            <param name="bRevert">»ñÈ¡ÏµÍ³²Ëµ¥µÄ·½Ê½¡£ÉèÖÃÎª <b>true</b>£¬±íÊ¾½ÓÊÕÔ­Ê¼µÄÏµÍ³²Ëµ¥£¬·ñÔòÉèÖÃÎª <b>false</b> ¡£</param>
            <returns>Ö¸ÏòÒª»ñÈ¡µÄÏµÍ³²Ëµ¥µÄ <see cref="T:System.IntPtr"/> ¾ä±ú¡£</returns>
        </member>
        <member name="M:DotNet.Utilities.Win32.GetMenuItemCount(System.IntPtr)">
            <summary>
            »ñÈ¡Ö¸¶¨µÄ²Ëµ¥ÖÐÌõÄ¿£¨²Ëµ¥Ïî£©µÄÊýÁ¿¡£
            </summary>
            <param name="hMenu">Ö¸ÏòÒª»ñÈ¡²Ëµ¥ÏîÊýÁ¿µÄÏµÍ³²Ëµ¥µÄ <see cref="T:System.IntPtr"/> ¾ä±ú¡£</param>
            <returns>²Ëµ¥ÖÐµÄÌõÄ¿ÊýÁ¿</returns>
        </member>
        <member name="M:DotNet.Utilities.Win32.RemoveMenu(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            É¾³ýÖ¸¶¨µÄ²Ëµ¥ÌõÄ¿¡£
            </summary>
            <param name="hMenu">Ö¸ÏòÒªÒÆ³ýµÄ²Ëµ¥µÄ <see cref="T:System.IntPtr"/> ¡£</param>
            <param name="uPosition">Óû¸Ä±äµÄ²Ëµ¥ÌõÄ¿µÄ±êÊ¶·û¡£</param>
            <param name="uFlags"></param>
            <returns>·ÇÁã±íÊ¾³É¹¦£¬Áã±íÊ¾Ê§°Ü¡£</returns>
            <remarks>
            Èç¹ûÔÚ <paramref name="uFlags"/> ÖÐÊ¹ÓÃÁË<see cref="F:DotNet.Utilities.Win32.MF_BYPOSITION"/> £¬ÔòÔÚ <paramref name="uPosition"/> ²ÎÊý±íÊ¾²Ëµ¥ÏîµÄË÷Òý£»
            Èç¹ûÔÚ <paramref name="uFlags"/> ÖÐÊ¹ÓÃÁË <b>MF_BYCOMMAND</b>£¬ÔòÔÚ <paramref name="uPosition"/> ÖÐÊ¹ÓÃ²Ëµ¥ÏîµÄID¡£
            </remarks>
        </member>
        <member name="M:DotNet.Utilities.Win32.CloseHandle(System.IntPtr)">
            <summary>
            ¹Ø±ÕÒ»¸öÖ¸¶¨µÄÖ¸Õë¶ÔÏóÖ¸ÏòµÄÉè±¸¡£¡£
            </summary>
            <param name="hObject">Òª¹Ø±ÕµÄ¾ä±ú <see cref="T:System.IntPtr"/> ¶ÔÏó¡£</param>
            <returns>³É¹¦·µ»Ø <b>0</b> £¬²»³É¹¦·µ»Ø·ÇÁãÖµ¡£</returns>
        </member>
        <member name="M:DotNet.Utilities.Win32.CreateFile(System.String,System.UInt32,System.UInt32,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
            <summary>
            Ö´ÐÐ´ò¿ª/½¨Á¢×ÊÔ´µÄ¹¦ÄÜ¡£
            </summary>
            <param name="lpFileName">Ö¸¶¨Òª´ò¿ªµÄÉè±¸»òÎÄ¼þµÄÃû³Æ¡£</param>
            <param name="dwDesiredAccess">
            <para>Win32 ³£Á¿£¬ÓÃÓÚ¿ØÖÆ¶ÔÉè±¸µÄ¶Á·ÃÎÊ¡¢Ð´·ÃÎÊ»ò¶Á/Ð´·ÃÎÊµÄ³£Êý¡£ÄÚÈÝÈçÏÂ±í£º
            <p><list type="table">
            <listheader>
            <term>Ãû³Æ</term>
            <description>ËµÃ÷</description>
            </listheader>
            <item>
            <term>GENERIC_READ</term><description>Ö¸¶¨¶ÔÉè±¸½øÐÐ¶ÁÈ¡·ÃÎÊ¡£</description>
            </item>
            <item>
            <term>GENERIC_WRITE</term><description>Ö¸¶¨¶ÔÉè±¸½øÐÐÐ´·ÃÎÊ¡£</description>
            </item>
            <item><term><b>0</b></term><description>Èç¹ûÖµÎªÁã£¬Ôò±íÊ¾Ö»ÔÊÐí»ñÈ¡ÓëÒ»¸öÉè±¸ÓÐ¹ØµÄÐÅÏ¢¡£</description></item>
            </list></p>
            </para>
            </param>
            <param name="dwShareMode">Ö¸¶¨´ò¿ªÉè±¸Ê±µÄÎÄ¼þ¹²ÏíÄ£Ê½</param>
            <param name="lpSecurityAttributes"></param>
            <param name="dwCreationDisposition">Win32 ³£Á¿£¬Ö¸¶¨²Ù×÷ÏµÍ³´ò¿ªÎÄ¼þµÄ·½Ê½¡£ÄÚÈÝÈçÏÂ±í£º
            <para><p>
            <list type="table">
            <listheader><term>Ãû³Æ</term><description>ËµÃ÷</description></listheader>
            <item>
            <term>CREATE_NEW</term>
            <description>Ö¸¶¨²Ù×÷ÏµÍ³Ó¦´´½¨ÐÂÎÄ¼þ¡£Èç¹ûÎÄ¼þ´æÔÚ£¬ÔòÅ×³ö <see cref="T:System.IO.IOException"/> Òì³£¡£</description>
            </item>
            <item><term>CREATE_ALWAYS</term><description>Ö¸¶¨²Ù×÷ÏµÍ³Ó¦´´½¨ÐÂÎÄ¼þ¡£Èç¹ûÎÄ¼þÒÑ´æÔÚ£¬Ëü½«±»¸ÄÐ´¡£</description></item>
            </list>
            </p></para>
            </param>
            <param name="dwFlagsAndAttributes"></param>
            <param name="hTemplateFile"></param>
            <returns>Ê¹ÓÃº¯Êý´ò¿ªµÄÉè±¸µÄ¾ä±ú¡£</returns>
            <remarks>
            ±¾º¯Êý¿ÉÒÔÖ´ÐÐ´ò¿ª»ò½¨Á¢ÎÄ¼þ¡¢ÎÄ¼þÁ÷¡¢Ä¿Â¼/ÎÄ¼þ¼Ð¡¢ÎïÀí´ÅÅÌ¡¢¾í¡¢ÏµÍ³¿ØÖÆµÄ»º³åÇø¡¢´Å´øÉè±¸¡¢
            Í¨ÐÅ×ÊÔ´¡¢ÓÊ¼þÏµÍ³ºÍÃüÃû¹ÜµÀ¡£
            </remarks>
        </member>
        <member name="M:DotNet.Utilities.Win32.DeviceIoControl(System.IntPtr,System.UInt32,System.IntPtr,System.UInt32,DotNet.Utilities.Win32.GetVersionOutParams@,System.UInt32,System.UInt32@,System.IntPtr)">
            <summary>
            ¶ÔÉè±¸Ö´ÐÐÖ¸¶¨µÄ²Ù×÷¡£
            </summary>
            <param name="hDevice">ÒªÖ´ÐÐ²Ù×÷µÄÉè±¸¾ä±ú¡£</param>
            <param name="dwIoControlCode">Win32 API ³£Êý£¬ÊäÈëµÄÊÇÒÔ <b>FSCTL_</b> ÎªÇ°×ºµÄ³£Êý£¬¶¨ÒåÔÚ 
            <b>WinIoCtl.h</b> ÎÄ¼þÄÚ£¬Ö´ÐÐ´ËÖØÔØ·½·¨±ØÐëÊäÈë <b>SMART_GET_VERSION</b> ¡£</param>
            <param name="lpInBuffer">µ±²ÎÊýÎªÖ¸ÕëÊ±£¬Ä¬ÈÏµÄÊäÈëÖµÊÇ <b>0</b> ¡£</param>
            <param name="nInBufferSize">ÊäÈë»º³åÇøµÄ×Ö½ÚÊýÁ¿¡£</param>
            <param name="lpOutBuffer">Ò»¸ö <b>GetVersionOutParams</b> £¬±íÊ¾Ö´ÐÐº¯ÊýºóÊä³öµÄÉè±¸¼ì²é¡£</param>
            <param name="nOutBufferSize">Êä³ö»º³åÇøµÄ×Ö½ÚÊýÁ¿¡£</param>
            <param name="lpBytesReturned">Êµ¼Ê×°ÔØµ½Êä³ö»º³åÇøµÄ×Ö½ÚÊýÁ¿¡£</param>
            <param name="lpOverlapped">Í¬²½²Ù×÷¿ØÖÆ£¬Ò»°ã²»Ê¹ÓÃ£¬Ä¬ÈÏÖµÎª <b>0</b> ¡£</param>
            <returns>·ÇÁã±íÊ¾³É¹¦£¬Áã±íÊ¾Ê§°Ü¡£</returns>
        </member>
        <member name="M:DotNet.Utilities.Win32.DeviceIoControl(System.IntPtr,System.UInt32,DotNet.Utilities.Win32.SendCmdInParams@,System.UInt32,DotNet.Utilities.Win32.SendCmdOutParams@,System.UInt32,System.UInt32@,System.IntPtr)">
            <summary>
            ¶ÔÉè±¸Ö´ÐÐÖ¸¶¨µÄ²Ù×÷¡£
            </summary>
            <param name="hDevice">ÒªÖ´ÐÐ²Ù×÷µÄÉè±¸¾ä±ú¡£</param>
            <param name="dwIoControlCode">Win32 API ³£Êý£¬ÊäÈëµÄÊÇÒÔ <b>FSCTL_</b> ÎªÇ°×ºµÄ³£Êý£¬¶¨ÒåÔÚ 
            <b>WinIoCtl.h</b> ÎÄ¼þÄÚ£¬Ö´ÐÐ´ËÖØÔØ·½·¨±ØÐëÊäÈë <b>SMART_SEND_DRIVE_COMMAND</b> »ò <b>SMART_RCV_DRIVE_DATA</b> ¡£</param>
            <param name="lpInBuffer">Ò»¸ö <b>SendCmdInParams</b> ½á¹¹£¬Ëü±£´æÏòÏµÍ³·¢ËÍµÄ²éÑ¯ÒªÇó¾ßÌåÃüÁîµÄÊý¾Ý½á¹¹¡£</param>
            <param name="nInBufferSize">ÊäÈë»º³åÇøµÄ×Ö½ÚÊýÁ¿¡£</param>
            <param name="lpOutBuffer">Ò»¸ö <b>SendCmdOutParams</b> ½á¹¹£¬Ëü±£´æÏµÍ³¸ù¾ÝÃüÁî·µ»ØµÄÉè±¸ÏàÐÅÐÅÏ¢¶þ½øÖÆÊý¾Ý¡£</param>
            <param name="nOutBufferSize">Êä³ö»º³åÇøµÄ×Ö½ÚÊýÁ¿¡£</param>
            <param name="lpBytesReturned">Êµ¼Ê×°ÔØµ½Êä³ö»º³åÇøµÄ×Ö½ÚÊýÁ¿¡£</param>
            <param name="lpOverlapped">Í¬²½²Ù×÷¿ØÖÆ£¬Ò»°ã²»Ê¹ÓÃ£¬Ä¬ÈÏÖµÎª <b>0</b> ¡£</param>
            <returns>·ÇÁã±íÊ¾³É¹¦£¬Áã±íÊ¾Ê§°Ü¡£</returns>
        </member>
        <member name="T:DotNet.Utilities.Win32.HDiskInfo">
            <summary>
            ±£´æµ±Ç°¼ÆËã»ú IDE Éè±¸£¨Ó²ÅÌ£©µÄÓ²¼þÐÅÏ¢µÄ½á¹¹¡£
            </summary>
        </member>
        <member name="F:DotNet.Utilities.Win32.HDiskInfo.ModuleNumber">
            <summary>
            Ó²ÅÌÐÍºÅ¡£
            </summary>
        </member>
        <member name="F:DotNet.Utilities.Win32.HDiskInfo.Firmware">
            <summary>
            Ó²ÅÌµÄ¹Ì¼þ°æ±¾¡£
            </summary>
        </member>
        <member name="F:DotNet.Utilities.Win32.HDiskInfo.SerialNumber">
            <summary>
            Ó²ÅÌÐòÁÐºÅ¡£
            </summary>
        </member>
        <member name="F:DotNet.Utilities.Win32.HDiskInfo.Capacity">
            <summary>
            Ó²ÅÌÈÝÁ¿£¬ÒÔMÎªµ¥Î»¡£
            </summary>
        </member>
        <member name="F:DotNet.Utilities.Win32.HDiskInfo.BufferSize">
            <summary>
            Éè±¸»º´æ´óÐ¡£¨ÒÔMÎªµ¥Î»£©¡£
            </summary>
        </member>
        <member name="T:DotNet.Utilities.Win32.GetVersionOutParams">
            <summary>
            ±íÊ¾Ê¹ÓÃ <b>DeviceIoControl</b> º¯ÊýÊ±±£´æ·µ»ØµÄÇý¶¯Æ÷Ó²¼þÐÅÏ¢µÄ½á¹¹
            </summary>
            <remarks>>´ËÊý¾Ý½á¹¹¶¨ÒåÔÚ <b>WinIoCtl.h</b> ÎÄ¼þÃûÎª <b>_GETVERSIONINPARAMS</b> ½á¹¹ÖÐ¡£</remarks>
        </member>
        <member name="F:DotNet.Utilities.Win32.GetVersionOutParams.bVersion">
            <summary>
            IDEÉè±¸µÄ¶þ½øÖÆÓ²¼þ°æ±¾¡£
            </summary>
        </member>
        <member name="F:DotNet.Utilities.Win32.GetVersionOutParams.bRevision">
            <summary>
            IDEÉè±¸µÄ¶þ½øÖÆÐÞ¶©°æ±¾¡£
            </summary>
        </member>
        <member name="F:DotNet.Utilities.Win32.GetVersionOutParams.bReserved">
            <summary>
            ´ËÖµ²Ù×÷ÏµÍ³Ã»ÓÐÊ¹ÓÃ£¬Ê¹ÓÃ´ËÊý¾Ý½á¹¹Ê±±»ÉèÖÃÎª <b>0</b> ¡£
            </summary>
        </member>
        <member name="F:DotNet.Utilities.Win32.GetVersionOutParams.bIDEDeviceMap">
            <summary>
            IDEÉè±¸µÄ¶þ½øÖÆÓ³Éä¡£
            </summary>
        </member>
        <member name="F:DotNet.Utilities.Win32.GetVersionOutParams.fCapabilities">
            <summary>
            IDEÉè±¸µÄ¶þ½øÖÆÈÝÁ¿Êý¾Ý¡£
            </summary>
        </member>
        <member name="F:DotNet.Utilities.Win32.GetVersionOutParams.dwReserved">
            <summary>
            ±£ÁôÄÚÈÝ£¬²»Ê¹ÓÃ¡£
            </summary>
        </member>
        <member name="T:DotNet.Utilities.Win32.IdeRegs">
            <summary>
            Ò»¸öÊý¾Ý½á¹¹£¬±íÊ¾Ê¹ÓÃ <b>DeviceIoControl</b> º¯ÊýÊ±·¢ËÍµ½²Ù×÷ÏµÍ³ÖÐµÄÃüÁîÊý¾Ý½á¹¹ <b>SendCmdInParams</b> µÄ³ÉÔ±½á¹¹¡£
            Ëü±íÊ¾Òª»ñÈ¡´ÅÅÌÉè±¸ÐÔÄÜ²ÎÊýµÄ¾ßÌå¶¨Òå¹æÔò¡£
            </summary>
            <seealso cref="T:DotNet.Utilities.Win32.SendCmdInParams"/>
            <remarks>´ËÊý¾Ý½á¹¹¶¨ÒåÔÚ <b>WinIoCtl.h</b> ÎÄ¼þÃûÎª <b>_IDEREGS</b> ÖÐ¡£</remarks>
        </member>
        <member name="F:DotNet.Utilities.Win32.IdeRegs.bFeaturesReg">
            <summary>
            ·¢ËÍµ½²Ù×÷ÏµÍ³µÄ×¢²áÃüÁî£¬´ËÎªÏµÍ³µÄ <b>SMART Command</b> ¡£
            </summary>
        </member>
        <member name="F:DotNet.Utilities.Win32.IdeRegs.bSectorCountReg">
            <summary>
            »ñÈ¡IDEÉè±¸ÉÈÇøÊý¡£
            </summary>
        </member>
        <member name="F:DotNet.Utilities.Win32.IdeRegs.bSectorNumberReg">
            <summary>
            »ñÈ¡IDEÉè±¸±àºÅ¡£
            </summary>
        </member>
        <member name="F:DotNet.Utilities.Win32.IdeRegs.bCylLowReg">
            <summary>
            »ñÈ¡IDEÉè±¸µÍ¶ËÖùÃæÖµ¡£
            </summary>
        </member>
        <member name="F:DotNet.Utilities.Win32.IdeRegs.bCylHighReg">
            <summary>
            »ñÈ¡IDEÉè±¸¸ß¶ËÖùÃæÖµ¡£
            </summary>
        </member>
        <member name="F:DotNet.Utilities.Win32.IdeRegs.bDriveHeadReg">
            <summary>
            »ñÈ¡IDEÉè±¸µÄÍ·ÐÅÏ¢¡£
            </summary>
        </member>
        <member name="F:DotNet.Utilities.Win32.IdeRegs.bCommandReg">
            <summary>
            »ñÈ¡IDEÉè±¸µÄÕæÕýÃüÁî¡£
            </summary>
        </member>
        <member name="F:DotNet.Utilities.Win32.IdeRegs.bReserved">
            <summary>
            ±£ÁôÄÚÈÝ£¬´ËÖµÓ¦ÉèÖÃÎª <b>0</b> ¡£
            </summary>
        </member>
        <member name="T:DotNet.Utilities.Win32.SendCmdInParams">
            <summary>
            ±£´æÖ´ÐÐ <b>DeviceIoControl</b> º¯ÊýÊ±ÏòÏµÍ³Ìá½»µÄÖ´ÐÐ²Ù×÷ÃüÁî¡£
            </summary>
            <seealso cref="T:DotNet.Utilities.Win32.SendCmdInParams"/>
            <remarks>´ËÊý¾Ý½á¹¹¶¨ÒåÔÚ <b>WinIoCtl.h</b> ÎÄ¼þÃûÎª <b>_SENDCMDINPARAMS</b> ÖÐ¡£</remarks>
        </member>
        <member name="F:DotNet.Utilities.Win32.SendCmdInParams.cBufferSize">
            <summary>
            Êä³öµÄÊý¾Ý»º³å´óÐ¡¡£
            </summary>
        </member>
        <member name="F:DotNet.Utilities.Win32.SendCmdInParams.irDriveRegs">
            <summary>
            ±£´æÏòÏµÍ³·¢ËÍµÄ´ÅÅÌÉè±¸ÃüÁîµÄÊý¾Ý½á¹¹¡£
            </summary>
        </member>
        <member name="F:DotNet.Utilities.Win32.SendCmdInParams.bDriveNumber">
            <summary>
            Ï£ÍûÏµÍ³¿ØÖÆµÄÎïÀí´ÅÅÌµÄ±àºÅ¡£
            </summary>
        </member>
        <member name="F:DotNet.Utilities.Win32.SendCmdInParams.bReserved">
            <summary>
            ±£ÁôµÄÊý¾Ý£¬²»Ê¹ÓÃ¡£
            </summary>
        </member>
        <member name="F:DotNet.Utilities.Win32.SendCmdInParams.dwReserved">
            <summary>
            ±£ÁôµÄÊý¾Ý£¬²»Ê¹ÓÃ¡£
            </summary>
        </member>
        <member name="F:DotNet.Utilities.Win32.SendCmdInParams.bBuffer">
            <summary>
            ±£´æµ±Ç° <b>SendCmdInParams</b> ½á¹¹Ìî³äÊý¾ÝºóµÄ´óÐ¡¡£
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:DotNet.Utilities.Win32.DriverStatus" -->
        <member name="F:DotNet.Utilities.Win32.DriverStatus.bDriverError">
            <summary>
            Èç¹û¼ì²éµÄIDEÉè±¸·¢Éú´íÎó£¬±£´æµÄ´íÎó´úÂë£¬<b>0</b> ±íÊ¾Ã»ÓÐ´íÎó¡£
            </summary>
        </member>
        <member name="F:DotNet.Utilities.Win32.DriverStatus.bIDEStatus">
            <summary>
            IDEÉè±¸±»×¢²áµÄ´íÎóÄÚÈÝ¡£
            </summary>
        </member>
        <member name="F:DotNet.Utilities.Win32.DriverStatus.bReserved">
            <summary>
            ±£ÁôµÄÊý¾Ý£¬²»Ê¹ÓÃ¡£
            </summary>
        </member>
        <member name="F:DotNet.Utilities.Win32.DriverStatus.dwReserved">
            <summary>
            ±£ÁôµÄÊý¾Ý£¬²»Ê¹ÓÃ¡£
            </summary>
        </member>
        <member name="T:DotNet.Utilities.Win32.SendCmdOutParams">
            <summary>
            ±íÊ¾µ±Ö´ÐÐ <b>DeviceIoControl</b> º¯Êýºó±£´æÏµÍ³¸ù¾Ý²éÑ¯ÃüÁî·µ»ØµÄ´ÅÅÌÉè±¸ÐÅÏ¢µÄÊý¾Ý½á¹¹¡£
            </summary>
        </member>
        <member name="F:DotNet.Utilities.Win32.SendCmdOutParams.cBufferSize">
            <summary>
            ±íÊ¾ËùÓÐ¶þ½øÖÆÐÅÏ¢µÄ»º´æ´óÐ¡¡£
            </summary>
        </member>
        <member name="F:DotNet.Utilities.Win32.SendCmdOutParams.DriverStatus">
            <summary>
            ±íÊ¾²éÑ¯µ½Éè±¸µÄ´íÎóÐÅÏ¢×´Ì¬¡£
            </summary>
        </member>
        <member name="F:DotNet.Utilities.Win32.SendCmdOutParams.bBuffer">
            <summary>
            ±íÊ¾ÏµÍ³·µ»ØµÄÉè±¸Ó²¼þÐÅÏ¢µÄ¶þ½øÖÆÊý¾Ý½á¹¹¡£
            </summary>
        </member>
        <member name="T:DotNet.Utilities.Win32.IdSector">
            <summary>
            µ±Ö´ÐÐ <b>DeviceIoControl</b> º¯ÊýºóÏµÍ³·µ»ØµÄ <b>SendCmdOutParams</b> ½á¹¹ÖÐ
            ±£´æ´ÅÅÌÉè±¸µÄÓ²¼þÐÅÏ¢µÄÊý¾Ý½á¹¹¡£
            </summary>
            <seealso cref="T:DotNet.Utilities.Win32.SendCmdInParams"/>
        </member>
        <member name="F:DotNet.Utilities.Win32.IdSector.wGenConfig">
            <summary>
            Éè±¸Í¨ÓÃÅäÖÃÐÅÏ¢¡£
            </summary>
        </member>
        <member name="F:DotNet.Utilities.Win32.IdSector.wNumCyls">
            <summary>
            Éè±¸µÄÖùÃæÊý¡£
            </summary>
        </member>
        <member name="F:DotNet.Utilities.Win32.IdSector.wReserved">
            <summary>
            ±£ÁôÄÚÈÝ£¬²»Ê¹ÓÃ¡£
            </summary>
        </member>
        <member name="F:DotNet.Utilities.Win32.IdSector.wNumHeads">
            <summary>
            Éè±¸µÄ´ÅÍ·ÊýÄ¿¡£
            </summary>
        </member>
        <member name="F:DotNet.Utilities.Win32.IdSector.wBytesPerTrack">
            <summary>
            Éè±¸µÄ´ÅµÀÊýÄ¿¡£
            </summary>
        </member>
        <member name="F:DotNet.Utilities.Win32.IdSector.wBytesPerSector">
            <summary>
            Éè±¸µÄÉÈÇøÊýÄ¿¡£
            </summary>
        </member>
        <member name="F:DotNet.Utilities.Win32.IdSector.wSectorsPerTrack">
            <summary>
            Éè±¸³§ÉÌÉè¶¨µÄÉÈÇø´ÅµÀÊýÄ¿¡£
            </summary>
        </member>
        <member name="F:DotNet.Utilities.Win32.IdSector.wVendorUnique">
            <summary>
            Éè±¸µÄ³öÆ·³§ÉÌÃû³Æ¡£
            </summary>
        </member>
        <member name="F:DotNet.Utilities.Win32.IdSector.sSerialNumber">
            <summary>
            Éè±¸³öÆ·³§ÉÌµÄÈ«ÇòÎ¨Ò»±àÂë¡£
            </summary>
        </member>
        <member name="F:DotNet.Utilities.Win32.IdSector.wBufferType">
            <summary>
            Éè±¸µÄ»º´æÀàÐÍ¡£
            </summary>
        </member>
        <member name="F:DotNet.Utilities.Win32.IdSector.wBufferSize">
            <summary>
            Éè±¸»º´æÈÝÁ¿£¨µ¥Î»ÊÇbyte£©¡£
            </summary>
        </member>
        <member name="F:DotNet.Utilities.Win32.IdSector.wECCSize">
            <summary>
            Éè±¸µÄ´íÎó¼ì²éºÍ¾ÀÕý£¨ECC£©Êý¾ÝµÄ´óÐ¡¡£
            </summary>
        </member>
        <member name="F:DotNet.Utilities.Win32.IdSector.sFirmwareRev">
            <summary>
            Éè±¸µÄ¹Ì¼þ°æ±¾¡£
            </summary>
        </member>
        <member name="F:DotNet.Utilities.Win32.IdSector.sModelNumber">
            <summary>
            Éè±¸µÄÐÍºÅ¡£
            </summary>
        </member>
        <member name="F:DotNet.Utilities.Win32.IdSector.wMoreVendorUnique">
            <summary>
            Éè±¸³§ÉÌÃû³ÆµÄÀ©Õ¹ÄÚÈÝ£¨Èç¹ûÓÐ£©¡£
            </summary>
        </member>
        <member name="F:DotNet.Utilities.Win32.IdSector.wDoubleWordIO">
            <summary>
            Éè±¸Ë«Ö¸ÁîÊäÈëÊä³öÄ£Ê½¡£
            </summary>
        </member>
        <member name="F:DotNet.Utilities.Win32.IdSector.wCapabilities">
            <summary>
            Éè±¸µÄÈÝÁ¿´óÐ¡£¨µ¥Î»Byte£©¡£
            </summary>
        </member>
        <member name="F:DotNet.Utilities.Win32.IdSector.wReserved1">
            <summary>
            µÚÒ»¸ö±£ÁôµÄÄÚÈÝ£¬²»Ê¹ÓÃ¡£
            </summary>
        </member>
        <member name="F:DotNet.Utilities.Win32.IdSector.wPIOTiming">
            <summary>
            Éè±¸µÄPIOÄ£Ê½Ñ²µÀÊ±¼ä¡£
            </summary>
        </member>
        <member name="F:DotNet.Utilities.Win32.IdSector.wDMATiming">
            <summary>
            Éè±¸DMA Ä£Ê½Ñ²µÀÊ±¼ä¡£
            </summary>
        </member>
        <member name="F:DotNet.Utilities.Win32.IdSector.wBS">
            <summary>
            Éè±¸µÄ×ÜÏßÀàÐÍ£¬ÈçSCSI,IDEµÈ¡£
            </summary>
        </member>
        <member name="F:DotNet.Utilities.Win32.IdSector.wNumCurrentCyls">
            <summary>
            Éè±¸µÄµ±Ç°ÖùÃæÊýÁ¿¡£
            </summary>
        </member>
        <member name="F:DotNet.Utilities.Win32.IdSector.wNumCurrentHeads">
            <summary>
            Éè±¸µ±Ç°´ÅÍ·ÊýÁ¿¡£
            </summary>
        </member>
        <member name="F:DotNet.Utilities.Win32.IdSector.wNumCurrentSectorsPerTrack">
            <summary>
            Éè±¸µÄµ±Ç°ÉÈÇøµÄ´ÅµÀÊýÁ¿¡£
            </summary>
        </member>
        <member name="F:DotNet.Utilities.Win32.IdSector.ulCurrentSectorCapacity">
            <summary>
            Éè±¸µÄµ±Ç°ÉÈÇøÈÝÁ¿£¨µ¥Î»byte£©¡£
            </summary>
        </member>
        <member name="F:DotNet.Utilities.Win32.IdSector.wMultSectorStuff">
            <summary>
            ¶àÉÈÇø¶ÁÐ´Ä£Ê½Ö§³Ö¡£
            </summary>
        </member>
        <member name="F:DotNet.Utilities.Win32.IdSector.ulTotalAddressableSectors">
            <summary>
            ÓÃ»§ÊÇ·ñ¿É×Ô¶¨ÒåÉÈÇøµØÖ·(LBAÄ£Ê½£©Ö§³Ö¡£
            </summary>
        </member>
        <member name="F:DotNet.Utilities.Win32.IdSector.wSingleWordDMA">
            <summary>
            µ¥Ö¸ÁîDMAÄ£Ê½¡£
            </summary>
        </member>
        <member name="F:DotNet.Utilities.Win32.IdSector.wMultiWordDMA">
            <summary>
            ¶àÖ¸ÁîDMAÄ£Ê½¡£
            </summary>
        </member>
        <member name="F:DotNet.Utilities.Win32.IdSector.bReserved">
            <summary>
            ±£ÁôÄÚÈÝ£¬²»Ê¹ÓÃ¡£
            </summary>
        </member>
        <member name="T:DotNet.Utilities.Win32.RECT">
            <summary>
            
            </summary>
        </member>
        <member name="M:DotNet.Utilities.Win32.RECT.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="left"></param>
            <param name="top"></param>
            <param name="right"></param>
            <param name="bottom"></param>
        </member>
        <member name="M:DotNet.Utilities.Win32.RECT.#ctor(System.Drawing.Rectangle)">
            <summary>
            
            </summary>
            <param name="r"></param>
        </member>
        <member name="F:DotNet.Utilities.Win32.RECT.left">
            <summary>
            
            </summary>
        </member>
        <member name="F:DotNet.Utilities.Win32.RECT.top">
            <summary>
            
            </summary>
        </member>
        <member name="F:DotNet.Utilities.Win32.RECT.right">
            <summary>
            
            </summary>
        </member>
        <member name="F:DotNet.Utilities.Win32.RECT.bottom">
            <summary>
            
            </summary>
        </member>
        <member name="M:DotNet.Utilities.Win32.RECT.FromXYWH(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="width"></param>
            <param name="height"></param>
            <returns></returns>
        </member>
        <member name="P:DotNet.Utilities.Win32.RECT.Size">
            <summary>
            
            </summary>
        </member>
        <member name="T:DotNet.Utilities.Win32.SCROLLINFO">
            <summary>
            
            </summary>
        </member>
        <member name="F:DotNet.Utilities.Win32.MF_BYPOSITION">
            <summary>
            Win32 API ³£Êý£¬Ö¸Ê¾ÔÚÊ¹ÓÃ <see cref="M:DotNet.Utilities.Win32.RemoveMenu(System.IntPtr,System.Int32,System.Int32)"/> º¯ÊýÊ±Ö¸¶¨Ê¹ÓÃË÷ÒýÊý¶ø²»ÊÇÊ¹ÓÃID¡£
            </summary>
        </member>
        <member name="M:DotNet.Utilities.Win32.#cctor">
            <summary>
            执行当前类在使用前的初始化操作。
            </summary>
        </member>
        <member name="M:DotNet.Utilities.Win32.GetHddInformation">
            <summary>
            获取当前用户物理磁盘的性能信息。
            </summary>
            <returns>一个 <see cref="T:DotNet.Utilities.Win32.HDiskInfo"/> 结构，它保存了物理硬盘的性能数据。</returns>
        </member>
        <member name="M:DotNet.Utilities.Win32.ScrollWindow(System.Runtime.InteropServices.HandleRef,System.Int32,System.Int32,DotNet.Utilities.Win32.RECT@,DotNet.Utilities.Win32.RECT@)">
            <summary>
            
            </summary>
            <param name="hWnd"></param>
            <param name="nXAmount"></param>
            <param name="nYAmount"></param>
            <param name="rectScrollRegion"></param>
            <param name="rectClip"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.Win32.SetScrollPos(System.Runtime.InteropServices.HandleRef,System.Int32,System.Int32,System.Boolean)">
            <summary>
            
            </summary>
            <param name="hWnd"></param>
            <param name="nBar"></param>
            <param name="nPos"></param>
            <param name="bRedraw"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.Win32.SetScrollInfo(System.Runtime.InteropServices.HandleRef,System.Int32,DotNet.Utilities.Win32.SCROLLINFO,System.Boolean)">
            <summary>
            
            </summary>
            <param name="hWnd"></param>
            <param name="fnBar"></param>
            <param name="si"></param>
            <param name="redraw"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.Win32.GetDeviceCaps(System.Runtime.InteropServices.HandleRef,System.Int32)">
            <summary>
            
            </summary>
            <param name="hDC"></param>
            <param name="nIndex"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.Win32.LOWORD(System.Int32)">
            <summary>
            
            </summary>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.Win32.LOWORD(System.IntPtr)">
            <summary>
            
            </summary>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="T:DotNet.Utilities.Assistant">
            <summary>
            Assistant 的摘要说明。
            </summary>
        </member>
        <member name="M:DotNet.Utilities.Assistant.CreateTag(System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            创建显示图像的标签(flash加点击)
            </summary>
        </member>
        <member name="M:DotNet.Utilities.Assistant.CreateTag2(System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            创建显示图像的标签(flash无点击)
            </summary>		
        </member>
        <member name="M:DotNet.Utilities.Assistant.CreateTag(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            创建显示图像的标签(重载)，无宽高限制，(flash加点击)
            </summary>
        </member>
        <member name="M:DotNet.Utilities.Assistant.CreateTag2(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            创建显示图像的标签(重载)，无宽高限制，(flash无点击)
            </summary>
        </member>
        <member name="M:DotNet.Utilities.Assistant.CreateTagOld(System.String,System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            创建显示图像的标签
            </summary>
            <param name="filename"></param>
            <param name="desc"></param>
            <param name="FileType"></param>
            <param name="LinkURL"></param>
            <param name="Width"></param>
            <param name="High"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.Assistant.GetRandomCode(System.String,System.Int32)">
            <summary>
            从字符串里随机得到，规定个数的字符串.
            </summary>
            <param name="allChar"></param>
            <param name="CodeCount"></param>
            <returns></returns>
        </member>
        <member name="T:DotNet.Utilities.BindDataControl">
            <summary>
            数据展示控件 绑定数据类
            </summary>
        </member>
        <member name="M:DotNet.Utilities.BindDataControl.BindDataList(System.Web.UI.Control,System.Data.DataView)">
            <summary>
            简单绑定DataList
            </summary>
            <param name="ctrl">控件ID</param>
            <param name="mydv">数据视图</param>
        </member>
        <member name="M:DotNet.Utilities.BindDataControl.BindDataReaderList(System.Web.UI.Control,System.Data.SqlClient.SqlDataReader)">
            <summary>
            SqlDataReader简单绑定DataList
            </summary>
            <param name="ctrl">控件ID</param>
            <param name="mydv">数据视图</param>
        </member>
        <member name="M:DotNet.Utilities.BindDataControl.BindGridView(System.Web.UI.Control,System.Data.DataView)">
            <summary>
            简单绑定GridView
            </summary>
            <param name="ctrl">控件ID</param>
            <param name="mydv">数据视图</param>
        </member>
        <member name="M:DotNet.Utilities.BindDataControl.BindRepeater(System.Web.UI.Control,System.Data.DataView)">
            <summary>
            绑定服务器控件 简单绑定Repeater
            </summary>
            <param name="ctrl">控件ID</param>
            <param name="mydv">数据视图</param>
        </member>
        <member name="T:DotNet.Utilities.ConvertHelper">
            <summary>
            处理数据类型转换，数制转换、编码转换相关的类
            </summary>    
        </member>
        <member name="M:DotNet.Utilities.ConvertHelper.RepairZero(System.String,System.Int32)">
            <summary>
            指定字符串的固定长度，如果字符串小于固定长度，
            则在字符串的前面补足零，可设置的固定长度最大为9位
            </summary>
            <param name="text">原始字符串</param>
            <param name="limitedLength">字符串的固定长度</param>
        </member>
        <member name="M:DotNet.Utilities.ConvertHelper.ConvertBase(System.String,System.Int32,System.Int32)">
            <summary>
            实现各进制数间的转换。ConvertBase("15",10,16)表示将十进制数15转换为16进制的数。
            </summary>
            <param name="value">要转换的值,即原值</param>
            <param name="from">原值的进制,只能是2,8,10,16四个值。</param>
            <param name="to">要转换到的目标进制，只能是2,8,10,16四个值。</param>
        </member>
        <member name="M:DotNet.Utilities.ConvertHelper.StringToBytes(System.String,System.Text.Encoding)">
            <summary>
            使用指定字符集将string转换成byte[]
            </summary>
            <param name="text">要转换的字符串</param>
            <param name="encoding">字符编码</param>
        </member>
        <member name="M:DotNet.Utilities.ConvertHelper.BytesToString(System.Byte[],System.Text.Encoding)">
            <summary>
            使用指定字符集将byte[]转换成string
            </summary>
            <param name="bytes">要转换的字节数组</param>
            <param name="encoding">字符编码</param>
        </member>
        <member name="M:DotNet.Utilities.ConvertHelper.BytesToInt32(System.Byte[])">
            <summary>
            将byte[]转换成int
            </summary>
            <param name="data">需要转换成整数的byte数组</param>
        </member>
        <member name="M:DotNet.Utilities.ConvertHelper.DataSetToEntity``1(System.Data.DataSet,System.Int32)">
            <summary>
            DataSet转换为实体类
            </summary>
            <typeparam name="T">实体类</typeparam>
            <param name="p_DataSet">DataSet</param>
            <param name="p_TableIndex">待转换数据表索引</param>
            <returns>实体类</returns>
        </member>
        <member name="M:DotNet.Utilities.ConvertHelper.DataSetToEntityList``1(System.Data.DataSet,System.Int32)">
            <summary>
            DataSet转换为实体列表
            </summary>
            <typeparam name="T">实体类</typeparam>
            <param name="p_DataSet">DataSet</param>
            <param name="p_TableIndex">待转换数据表索引</param>
            <returns>实体类列表</returns>
        </member>
        <member name="M:DotNet.Utilities.CacheHelper.GetCache(System.String)">
            <summary>
            获取数据缓存
            </summary>
            <param name="CacheKey">键</param>
        </member>
        <member name="M:DotNet.Utilities.CacheHelper.SetCache(System.String,System.Object)">
            <summary>
            设置数据缓存
            </summary>
        </member>
        <member name="M:DotNet.Utilities.CacheHelper.SetCache(System.String,System.Object,System.TimeSpan)">
            <summary>
            设置数据缓存
            </summary>
        </member>
        <member name="M:DotNet.Utilities.CacheHelper.SetCache(System.String,System.Object,System.DateTime,System.TimeSpan)">
            <summary>
            设置数据缓存
            </summary>
        </member>
        <member name="M:DotNet.Utilities.CacheHelper.RemoveAllCache(System.String)">
            <summary>
            移除指定数据缓存
            </summary>
        </member>
        <member name="M:DotNet.Utilities.CacheHelper.RemoveAllCache">
            <summary>
            移除全部缓存
            </summary>
        </member>
        <member name="M:DotNet.Utilities.CookieHelper.ClearCookie(System.String)">
            <summary>
            清除指定Cookie
            </summary>
            <param name="cookiename">cookiename</param>
        </member>
        <member name="M:DotNet.Utilities.CookieHelper.GetCookieValue(System.String)">
            <summary>
            获取指定Cookie值
            </summary>
            <param name="cookiename">cookiename</param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.CookieHelper.SetCookie(System.String,System.String)">
            <summary>
            添加一个Cookie（24小时过期）
            </summary>
            <param name="cookiename"></param>
            <param name="cookievalue"></param>
        </member>
        <member name="M:DotNet.Utilities.CookieHelper.SetCookie(System.String,System.String,System.DateTime)">
            <summary>
            添加一个Cookie
            </summary>
            <param name="cookiename">cookie名</param>
            <param name="cookievalue">cookie值</param>
            <param name="expires">过期时间 DateTime</param>
        </member>
        <member name="T:DotNet.Utilities.SessionHelper">
            <summary>
            Session 操作类
            1、GetSession(string name)根据session名获取session对象
            2、SetSession(string name, object val)设置session
            </summary>
        </member>
        <member name="M:DotNet.Utilities.SessionHelper.GetSession(System.String)">
            <summary>
            根据session名获取session对象
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.SessionHelper.SetSession(System.String,System.Object)">
            <summary>
            设置session
            </summary>
            <param name="name">session 名</param>
            <param name="val">session 值</param>
        </member>
        <member name="M:DotNet.Utilities.SessionHelper.ClearSession">
            <summary>
            清空所有的Session
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.SessionHelper.RemoveSession(System.String)">
            <summary>
            删除一个指定的ession
            </summary>
            <param name="name">Session名称</param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.SessionHelper.RemoveAllSession(System.String)">
            <summary>
            删除所有的ession
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.SessionHelper2.Add(System.String,System.String)">
            <summary>
            添加Session，调动有效期为20分钟
            </summary>
            <param name="strSessionName">Session对象名称</param>
            <param name="strValue">Session值</param>
        </member>
        <member name="M:DotNet.Utilities.SessionHelper2.Adds(System.String,System.String[])">
            <summary>
            添加Session，调动有效期为20分钟
            </summary>
            <param name="strSessionName">Session对象名称</param>
            <param name="strValues">Session值数组</param>
        </member>
        <member name="M:DotNet.Utilities.SessionHelper2.Add(System.String,System.String,System.Int32)">
            <summary>
            添加Session
            </summary>
            <param name="strSessionName">Session对象名称</param>
            <param name="strValue">Session值</param>
            <param name="iExpires">调动有效期（分钟）</param>
        </member>
        <member name="M:DotNet.Utilities.SessionHelper2.Adds(System.String,System.String[],System.Int32)">
            <summary>
            添加Session
            </summary>
            <param name="strSessionName">Session对象名称</param>
            <param name="strValues">Session值数组</param>
            <param name="iExpires">调动有效期（分钟）</param>
        </member>
        <member name="M:DotNet.Utilities.SessionHelper2.Get(System.String)">
            <summary>
            读取某个Session对象值
            </summary>
            <param name="strSessionName">Session对象名称</param>
            <returns>Session对象值</returns>
        </member>
        <member name="M:DotNet.Utilities.SessionHelper2.Gets(System.String)">
            <summary>
            读取某个Session对象值数组
            </summary>
            <param name="strSessionName">Session对象名称</param>
            <returns>Session对象值数组</returns>
        </member>
        <member name="M:DotNet.Utilities.SessionHelper2.Del(System.String)">
            <summary>
            删除某个Session对象
            </summary>
            <param name="strSessionName">Session对象名称</param>
        </member>
        <member name="T:DotNet.Utilities.CsvHelper">
            <summary>
            CSV文件转换类
            </summary>
        </member>
        <member name="M:DotNet.Utilities.CsvHelper.dt2csv(System.Data.DataTable,System.String,System.String,System.String)">
            <summary>
            导出报表为Csv
            </summary>
            <param name="dt">DataTable</param>
            <param name="strFilePath">物理路径</param>
            <param name="tableheader">表头</param>
            <param name="columname">字段标题,逗号分隔</param>
        </member>
        <member name="M:DotNet.Utilities.CsvHelper.csv2dt(System.String,System.Int32,System.Data.DataTable)">
            <summary>
            将Csv读入DataTable
            </summary>
            <param name="filePath">csv文件路径</param>
            <param name="n">表示第n行是字段title,第n+1行是记录开始</param>
        </member>
        <member name="T:DotNet.Utilities.MySecurity">
            <summary>
            MySecurity(安全类) 的摘要说明。
            </summary>
        </member>
        <member name="M:DotNet.Utilities.MySecurity.#ctor">
            <summary>
            初始化安全类
            </summary>
        </member>
        <member name="M:DotNet.Utilities.MySecurity.SEncryptString(System.String,System.String)">
            <summary>
            加密字符串
            </summary>
            <param name="inputStr">输入字符串</param>
            <param name="keyStr">密码，可以为“”</param>
            <returns>输出加密后字符串</returns>
        </member>
        <member name="M:DotNet.Utilities.MySecurity.EncryptString(System.String,System.String)">
            <summary>
            加密字符串
            </summary>
            <param name="inputStr">输入字符串</param>
            <param name="keyStr">密码，可以为“”</param>
            <returns>输出加密后字符串</returns>
        </member>
        <member name="M:DotNet.Utilities.MySecurity.SEncryptString(System.String)">
            <summary>
            加密字符串 密钥为系统默认
            </summary>
            <param name="inputStr">输入字符串</param>
            <returns>输出加密后字符串</returns>
        </member>
        <member name="M:DotNet.Utilities.MySecurity.EncryptFile(System.String,System.String,System.String)">
            <summary>
            加密文件
            </summary>
            <param name="filePath">输入文件路径</param>
            <param name="savePath">加密后输出文件路径</param>
            <param name="keyStr">密码，可以为“”</param>
            <returns></returns>  
        </member>
        <member name="M:DotNet.Utilities.MySecurity.SDecryptString(System.String,System.String)">
            <summary>
            解密字符串
            </summary>
            <param name="inputStr">要解密的字符串</param>
            <param name="keyStr">密钥</param>
            <returns>解密后的结果</returns>
        </member>
        <member name="M:DotNet.Utilities.MySecurity.SDecryptString(System.String)">
            <summary>
             解密字符串 密钥为系统默认
            </summary>
            <param name="inputStr">要解密的字符串</param>
            <returns>解密后的结果</returns>
        </member>
        <member name="M:DotNet.Utilities.MySecurity.DecryptString(System.String,System.String)">
            <summary>
            解密字符串
            </summary>
            <param name="inputStr">要解密的字符串</param>
            <param name="keyStr">密钥</param>
            <returns>解密后的结果</returns>
        </member>
        <member name="M:DotNet.Utilities.MySecurity.DecryptFile(System.String,System.String,System.String)">
            <summary>
            解密文件
            </summary>
            <param name="filePath">输入文件路径</param>
            <param name="savePath">解密后输出文件路径</param>
            <param name="keyStr">密码，可以为“”</param>
            <returns></returns>    
        </member>
        <member name="M:DotNet.Utilities.MySecurity.MD5(System.String)">
            <summary>
            128位MD5算法加密字符串
            </summary>
            <param name="text">要加密的字符串</param>    
        </member>
        <member name="M:DotNet.Utilities.MySecurity.MD5(System.Byte[])">
            <summary>
            128位MD5算法加密Byte数组
            </summary>
            <param name="data">要加密的Byte数组</param>    
        </member>
        <member name="M:DotNet.Utilities.MySecurity.EncodeBase64(System.String)">
            <summary>
            Base64加密
            </summary>
            <param name="text">要加密的字符串</param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.MySecurity.DecodeBase64(System.String)">
            <summary>
            Base64解密
            </summary>
            <param name="text">要解密的字符串</param>
        </member>
        <member name="M:DotNet.Utilities.Ras.#ctor(DotNet.Utilities.Ras.ConnectionNotify,System.Double)">
            <summary>
            
            </summary>
            <param name="ConnectionDelegate">连接通知委托</param>
            <param name="interval"></param>
        </member>
        <member name="M:DotNet.Utilities.Ras.CreateEntry(System.Int32,System.String@)">
            <summary>
            创建条目
            </summary>
            <param name="hWnd">柄</param>
            <param name="strError">错误</param>
            <returns>结果</returns>
        </member>
        <member name="M:DotNet.Utilities.Ras.DeleteEntry(System.String,System.String@)">
            <summary>
            删除条目
            </summary>
            <param name="strEntryName">条目名称</param>
            <param name="strError">错误</param>
            <returns>结果</returns>
        </member>
        <member name="M:DotNet.Utilities.Ras.DialUp(System.String,System.String@)">
            <summary>
            拨号
            </summary>
            <param name="strEntryName">条目名称</param>
            <param name="strError">错误</param>
            <returns>结果</returns>
        </member>
        <member name="M:DotNet.Utilities.Ras.EditEntry(System.Int32,System.String,System.String@)">
            <summary>
            编辑条目
            </summary>
            <param name="hWnd">柄</param>
            <param name="strEntryName">条目名称</param>
            <param name="strError">错误</param>
            <returns>结果</returns>
        </member>
        <member name="M:DotNet.Utilities.Ras.GetDefaultEntry(System.String@,System.String@)">
            <summary>
            获取默认条目
            </summary>
            <param name="strEntry">条目</param>
            <param name="strError">错误</param>
            <returns>结果</returns>
        </member>
        <member name="M:DotNet.Utilities.Ras.GetEntries(System.String[]@,System.String@)">
            <summary>
            得到条目
            </summary>
            <param name="strEntryName">条目名称</param>
            <param name="strError">错误</param>
            <returns>结果</returns>
        </member>
        <member name="M:DotNet.Utilities.Ras.GetEntryParams(System.String,System.String@,System.String@,System.String@,System.Boolean@,System.String@)">
            <summary>
            获得入口参数
            </summary>
            <param name="strEntryName">条目名称</param>
            <param name="strPhoneNumber">电话号码</param>
            <param name="strUserName">用户名</param>
            <param name="strPassword">密码</param>
            <param name="bRememberPassword">记住密码</param>
            <param name="strError">错误</param>
            <returns>结果</returns>
        </member>
        <member name="M:DotNet.Utilities.Ras.GetErrorString(System.Int32)">
            <summary>
            获得错误
            </summary>
            <param name="nErrorValue"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.Ras.HangUp(System.String@)">
            <summary>
            挂断
            </summary>
            <param name="strError">错误</param>
            <returns>结果</returns>
        </member>
        <member name="M:DotNet.Utilities.Ras.RasDialFunc(System.UInt32,DotNet.Utilities.Ras.RASCONNSTATE,System.Int32)">
            <summary>
            拨
            </summary>
            <param name="unMsg"></param>
            <param name="rasconnstate"></param>
            <param name="dwError"></param>
        </member>
        <member name="M:DotNet.Utilities.Ras.RenameEntry(System.String,System.String,System.String@)">
            <summary>
            重命名输入
            </summary>
            <param name="strOldEntry">旧的条目</param>
            <param name="strNewEntry">新的条目</param>
            <param name="strError">错误</param>
            <returns>结果</returns>
        </member>
        <member name="M:DotNet.Utilities.Ras.SetDefaultEntry(System.String)">
            <summary>
            设置默认条目
            </summary>
            <param name="strEntry"></param>
        </member>
        <member name="M:DotNet.Utilities.Ras.SetEntryParams(System.String,System.String,System.String,System.String,System.Boolean,System.String@)">
            <summary>
            设置输入参数个数
            </summary>
            <param name="strEntryName">条目名称</param>
            <param name="strPhoneNumber">电话号码</param>
            <param name="strUserName">用户名</param>
            <param name="strPassword">密码</param>
            <param name="bRememberPassword">记住密码</param>
            <param name="strError">错误</param>
            <returns>结果</returns>
        </member>
        <member name="M:DotNet.Utilities.Ras.TimerEvent(System.Object,System.Timers.ElapsedEventArgs)">
            <summary>
            计时器事件
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:DotNet.Utilities.Ras.ConnectionNotify">
            <summary>
            嵌套类型
            </summary>
            <param name="strNotify"></param>
            <param name="bConnect"></param>
        </member>
        <member name="T:DotNet.Utilities.Ras.RasDialEvent">
            <summary>
            拨事件
            </summary>
            <param name="unMsg">显示</param>
            <param name="rasconnstate"></param>
            <param name="dwError">错误</param>
        </member>
        <member name="T:DotNet.Utilities.EnumFormula">
            <summary>
            EnumFormula
            </summary>
        </member>
        <member name="T:DotNet.Utilities.FormulaDeal">
            <summary>
            FormulaDeal
            </summary>
        </member>
        <member name="T:DotNet.Utilities.FTPClient">
            <summary>
            FTP ²Ù×÷Àà¿Í»§¶Ë
            </summary>
        </member>
        <member name="M:DotNet.Utilities.FTPClient.#ctor">
            <summary>
            È±Ê¡¹¹Ôìº¯Êý
            </summary>
        </member>
        <member name="M:DotNet.Utilities.FTPClient.#ctor(System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            ¹¹Ôìº¯Êý
            </summary>
        </member>
        <member name="F:DotNet.Utilities.FTPClient.strMsg">
            <summary>
            ·þÎñÆ÷·µ»ØµÄÓ¦´ðÐÅÏ¢(°üº¬Ó¦´ðÂë)
            </summary>
        </member>
        <member name="F:DotNet.Utilities.FTPClient.strReply">
            <summary>
            ·þÎñÆ÷·µ»ØµÄÓ¦´ðÐÅÏ¢(°üº¬Ó¦´ðÂë)
            </summary>
        </member>
        <member name="F:DotNet.Utilities.FTPClient.iReplyCode">
            <summary>
            ·þÎñÆ÷·µ»ØµÄÓ¦´ðÂë
            </summary>
        </member>
        <member name="F:DotNet.Utilities.FTPClient.socketControl">
            <summary>
            ½øÐÐ¿ØÖÆÁ¬½ÓµÄsocket
            </summary>
        </member>
        <member name="F:DotNet.Utilities.FTPClient.trType">
            <summary>
            ´«ÊäÄ£Ê½
            </summary>
        </member>
        <member name="F:DotNet.Utilities.FTPClient.BLOCK_SIZE">
            <summary>
            ½ÓÊÕºÍ·¢ËÍÊý¾ÝµÄ»º³åÇø
            </summary>
        </member>
        <member name="F:DotNet.Utilities.FTPClient.ASCII">
            <summary>
            ±àÂë·½Ê½
            </summary>
        </member>
        <member name="F:DotNet.Utilities.FTPClient.buffer">
            <summary>
            ×Ö½ÚÊý×é
            </summary>
        </member>
        <member name="P:DotNet.Utilities.FTPClient.RemoteHost">
            <summary>
            FTP·þÎñÆ÷IPµØÖ·
            </summary>
        </member>
        <member name="P:DotNet.Utilities.FTPClient.RemotePort">
            <summary>
            FTP·þÎñÆ÷¶Ë¿Ú
            </summary>
        </member>
        <member name="P:DotNet.Utilities.FTPClient.RemotePath">
            <summary>
            µ±Ç°·þÎñÆ÷Ä¿Â¼
            </summary>
        </member>
        <member name="P:DotNet.Utilities.FTPClient.RemoteUser">
            <summary>
            µÇÂ¼ÓÃ»§ÕËºÅ
            </summary>
        </member>
        <member name="P:DotNet.Utilities.FTPClient.RemotePass">
            <summary>
            ÓÃ»§µÇÂ¼ÃÜÂë
            </summary>
        </member>
        <member name="P:DotNet.Utilities.FTPClient.Connected">
            <summary>
            ÊÇ·ñµÇÂ¼
            </summary>
        </member>
        <member name="M:DotNet.Utilities.FTPClient.Connect">
            <summary>
            ½¨Á¢Á¬½Ó 
            </summary>
        </member>
        <member name="M:DotNet.Utilities.FTPClient.DisConnect">
            <summary>
            ¹Ø±ÕÁ¬½Ó
            </summary>
        </member>
        <member name="T:DotNet.Utilities.FTPClient.TransferType">
            <summary>
            ´«ÊäÄ£Ê½:¶þ½øÖÆÀàÐÍ¡¢ASCIIÀàÐÍ
            </summary>
        </member>
        <member name="M:DotNet.Utilities.FTPClient.SetTransferType(DotNet.Utilities.FTPClient.TransferType)">
            <summary>
            ÉèÖÃ´«ÊäÄ£Ê½
            </summary>
            <param name="ttType">´«ÊäÄ£Ê½</param>
        </member>
        <member name="M:DotNet.Utilities.FTPClient.GetTransferType">
            <summary>
            »ñµÃ´«ÊäÄ£Ê½
            </summary>
            <returns>´«ÊäÄ£Ê½</returns>
        </member>
        <member name="M:DotNet.Utilities.FTPClient.Dir(System.String)">
            <summary>
            »ñµÃÎÄ¼þÁÐ±í
            </summary>
            <param name="strMask">ÎÄ¼þÃûµÄÆ¥Åä×Ö·û´®</param>
        </member>
        <member name="M:DotNet.Utilities.FTPClient.GetFileSize(System.String)">
            <summary>
            »ñÈ¡ÎÄ¼þ´óÐ¡
            </summary>
            <param name="strFileName">ÎÄ¼þÃû</param>
            <returns>ÎÄ¼þ´óÐ¡</returns>
        </member>
        <member name="M:DotNet.Utilities.FTPClient.GetFileInfo(System.String)">
            <summary>
            »ñÈ¡ÎÄ¼þÐÅÏ¢
            </summary>
            <param name="strFileName">ÎÄ¼þÃû</param>
            <returns>ÎÄ¼þ´óÐ¡</returns>
        </member>
        <member name="M:DotNet.Utilities.FTPClient.Delete(System.String)">
            <summary>
            É¾³ý
            </summary>
            <param name="strFileName">´ýÉ¾³ýÎÄ¼þÃû</param>
        </member>
        <member name="M:DotNet.Utilities.FTPClient.Rename(System.String,System.String)">
            <summary>
            ÖØÃüÃû(Èç¹ûÐÂÎÄ¼þÃûÓëÒÑÓÐÎÄ¼þÖØÃû,½«¸²¸ÇÒÑÓÐÎÄ¼þ)
            </summary>
            <param name="strOldFileName">¾ÉÎÄ¼þÃû</param>
            <param name="strNewFileName">ÐÂÎÄ¼þÃû</param>
        </member>
        <member name="M:DotNet.Utilities.FTPClient.Get(System.String,System.String)">
            <summary>
            ÏÂÔØÒ»ÅúÎÄ¼þ
            </summary>
            <param name="strFileNameMask">ÎÄ¼þÃûµÄÆ¥Åä×Ö·û´®</param>
            <param name="strFolder">±¾µØÄ¿Â¼(²»µÃÒÔ\½áÊø)</param>
        </member>
        <member name="M:DotNet.Utilities.FTPClient.Get(System.String,System.String,System.String)">
            <summary>
            ÏÂÔØÒ»¸öÎÄ¼þ
            </summary>
            <param name="strRemoteFileName">ÒªÏÂÔØµÄÎÄ¼þÃû</param>
            <param name="strFolder">±¾µØÄ¿Â¼(²»µÃÒÔ\½áÊø)</param>
            <param name="strLocalFileName">±£´æÔÚ±¾µØÊ±µÄÎÄ¼þÃû</param>
        </member>
        <member name="M:DotNet.Utilities.FTPClient.GetNoBinary(System.String,System.String,System.String)">
            <summary>
            ÏÂÔØÒ»¸öÎÄ¼þ
            </summary>
            <param name="strRemoteFileName">ÒªÏÂÔØµÄÎÄ¼þÃû</param>
            <param name="strFolder">±¾µØÄ¿Â¼(²»µÃÒÔ\½áÊø)</param>
            <param name="strLocalFileName">±£´æÔÚ±¾µØÊ±µÄÎÄ¼þÃû</param>
        </member>
        <member name="M:DotNet.Utilities.FTPClient.Put(System.String,System.String)">
            <summary>
            ÉÏ´«Ò»ÅúÎÄ¼þ
            </summary>
            <param name="strFolder">±¾µØÄ¿Â¼(²»µÃÒÔ\½áÊø)</param>
            <param name="strFileNameMask">ÎÄ¼þÃûÆ¥Åä×Ö·û(¿ÉÒÔ°üº¬*ºÍ?)</param>
        </member>
        <member name="M:DotNet.Utilities.FTPClient.Put(System.String)">
            <summary>
            ÉÏ´«Ò»¸öÎÄ¼þ
            </summary>
            <param name="strFileName">±¾µØÎÄ¼þÃû</param>
        </member>
        <member name="M:DotNet.Utilities.FTPClient.PutByGuid(System.String,System.String)">
            <summary>
            ÉÏ´«Ò»¸öÎÄ¼þ
            </summary>
            <param name="strFileName">±¾µØÎÄ¼þÃû</param>
        </member>
        <member name="M:DotNet.Utilities.FTPClient.MkDir(System.String)">
            <summary>
            ´´½¨Ä¿Â¼
            </summary>
            <param name="strDirName">Ä¿Â¼Ãû</param>
        </member>
        <member name="M:DotNet.Utilities.FTPClient.RmDir(System.String)">
            <summary>
            É¾³ýÄ¿Â¼
            </summary>
            <param name="strDirName">Ä¿Â¼Ãû</param>
        </member>
        <member name="M:DotNet.Utilities.FTPClient.ChDir(System.String)">
            <summary>
            ¸Ä±äÄ¿Â¼
            </summary>
            <param name="strDirName">ÐÂµÄ¹¤×÷Ä¿Â¼Ãû</param>
        </member>
        <member name="M:DotNet.Utilities.FTPClient.ReadReply">
            <summary>
            ½«Ò»ÐÐÓ¦´ð×Ö·û´®¼ÇÂ¼ÔÚstrReplyºÍstrMsg,Ó¦´ðÂë¼ÇÂ¼ÔÚiReplyCode
            </summary>
        </member>
        <member name="M:DotNet.Utilities.FTPClient.CreateDataSocket">
            <summary>
            ½¨Á¢½øÐÐÊý¾ÝÁ¬½ÓµÄsocket
            </summary>
            <returns>Êý¾ÝÁ¬½Ósocket</returns>
        </member>
        <member name="M:DotNet.Utilities.FTPClient.CloseSocketConnect">
            <summary>
            ¹Ø±ÕsocketÁ¬½Ó(ÓÃÓÚµÇÂ¼ÒÔÇ°)
            </summary>
        </member>
        <member name="M:DotNet.Utilities.FTPClient.ReadLine">
            <summary>
            ¶ÁÈ¡Socket·µ»ØµÄËùÓÐ×Ö·û´®
            </summary>
            <returns>°üº¬Ó¦´ðÂëµÄ×Ö·û´®ÐÐ</returns>
        </member>
        <member name="M:DotNet.Utilities.FTPClient.SendCommand(System.String)">
            <summary>
            ·¢ËÍÃüÁî²¢»ñÈ¡Ó¦´ðÂëºÍ×îºóÒ»ÐÐÓ¦´ð×Ö·û´®
            </summary>
            <param name="strCommand">ÃüÁî</param>
        </member>
        <member name="T:DotNet.Utilities.FTPHelper">
            <summary>
            FTP帮助类
            </summary>
        </member>
        <member name="M:DotNet.Utilities.FTPHelper.#ctor(System.String,System.String,System.String,System.String)">
            <summary>  
            连接FTP服务器
            </summary>  
            <param name="FtpServerIP">FTP连接地址</param>  
            <param name="FtpRemotePath">指定FTP连接成功后的当前目录, 如果不指定即默认为根目录</param>  
            <param name="FtpUserID">用户名</param>  
            <param name="FtpPassword">密码</param>  
        </member>
        <member name="M:DotNet.Utilities.FTPHelper.Upload(System.String)">
            <summary>  
            上传  
            </summary>   
        </member>
        <member name="M:DotNet.Utilities.FTPHelper.Download(System.String,System.String)">
            <summary>  
            下载  
            </summary>   
        </member>
        <member name="M:DotNet.Utilities.FTPHelper.Delete(System.String)">
            <summary>  
            删除文件  
            </summary>  
        </member>
        <member name="M:DotNet.Utilities.FTPHelper.GetFilesDetailList">
            <summary>  
            获取当前目录下明细(包含文件和文件夹)  
            </summary>  
        </member>
        <member name="M:DotNet.Utilities.FTPHelper.GetAllList(System.String)">
            <summary>  
            获取FTP文件列表(包括文件夹)
            </summary>   
        </member>
        <member name="M:DotNet.Utilities.FTPHelper.GetFileList(System.String)">
            <summary>  
            获取当前目录下文件列表(不包括文件夹)  
            </summary>  
        </member>
        <member name="M:DotNet.Utilities.FTPHelper.FileExist(System.String)">
            <summary>  
            判断当前目录下指定的文件是否存在  
            </summary>  
            <param name="RemoteFileName">远程文件名</param>  
        </member>
        <member name="M:DotNet.Utilities.FTPHelper.MakeDir(System.String)">
            <summary>  
            创建文件夹  
            </summary>   
        </member>
        <member name="M:DotNet.Utilities.FTPHelper.GetFileSize(System.String)">
            <summary>  
            获取指定文件大小  
            </summary>  
        </member>
        <member name="M:DotNet.Utilities.FTPHelper.ReName(System.String,System.String)">
            <summary>  
            更改文件名  
            </summary> 
        </member>
        <member name="M:DotNet.Utilities.FTPHelper.MovieFile(System.String,System.String)">
            <summary>  
            移动文件  
            </summary>  
        </member>
        <member name="M:DotNet.Utilities.FTPHelper.GotoDirectory(System.String,System.Boolean)">
            <summary>  
            切换当前目录  
            </summary>  
            <param name="IsRoot">true:绝对路径 false:相对路径</param>   
        </member>
        <member name="T:DotNet.Utilities.FTPOperater">
            <summary>
            FTP²Ù×÷Àà
            </summary>
        </member>
        <member name="P:DotNet.Utilities.FTPOperater.Ftp">
            <summary>
            È«¾ÖFTP·ÃÎÊ±äÁ¿
            </summary>
        </member>
        <member name="P:DotNet.Utilities.FTPOperater.Server">
            <summary>
            Ftp·þÎñÆ÷
            </summary>
        </member>
        <member name="P:DotNet.Utilities.FTPOperater.User">
            <summary>
            FtpÓÃ»§
            </summary>
        </member>
        <member name="P:DotNet.Utilities.FTPOperater.Pass">
            <summary>
            FtpÃÜÂë
            </summary>
        </member>
        <member name="P:DotNet.Utilities.FTPOperater.FolderZJ">
            <summary>
            FtpÃÜÂë
            </summary>
        </member>
        <member name="P:DotNet.Utilities.FTPOperater.FolderWX">
            <summary>
            FtpÃÜÂë
            </summary>
        </member>
        <member name="M:DotNet.Utilities.FTPOperater.GetList(System.String)">
            <summary>
            µÃµ½ÎÄ¼þÁÐ±í
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.FTPOperater.GetFile(System.String,System.String,System.String,System.String)">
            <summary>
            ÏÂÔØÎÄ¼þ
            </summary>
            <param name="ftpFolder">ftpÄ¿Â¼</param>
            <param name="ftpFileName">ftpÎÄ¼þÃû</param>
            <param name="localFolder">±¾µØÄ¿Â¼</param>
            <param name="localFileName">±¾µØÎÄ¼þÃû</param>
        </member>
        <member name="M:DotNet.Utilities.FTPOperater.AddMSCFile(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            ÐÞ¸ÄÎÄ¼þ
            </summary>
            <param name="ftpFolder">±¾µØÄ¿Â¼</param>
            <param name="ftpFileName">±¾µØÎÄ¼þÃûtemp</param>
            <param name="localFolder">±¾µØÄ¿Â¼</param>
            <param name="localFileName">±¾µØÎÄ¼þÃû</param>
        </member>
        <member name="M:DotNet.Utilities.FTPOperater.DelFile(System.String,System.String)">
            <summary>
            É¾³ýÎÄ¼þ
            </summary>
            <param name="ftpFolder">ftpÄ¿Â¼</param>
            <param name="ftpFileName">ftpÎÄ¼þÃû</param>
        </member>
        <member name="M:DotNet.Utilities.FTPOperater.PutFile(System.String,System.String)">
            <summary>
            ÉÏ´«ÎÄ¼þ
            </summary>
            <param name="ftpFolder">ftpÄ¿Â¼</param>
            <param name="ftpFileName">ftpÎÄ¼þÃû</param>
        </member>
        <member name="M:DotNet.Utilities.FTPOperater.GetFileNoBinary(System.String,System.String,System.String,System.String)">
            <summary>
            ÏÂÔØÎÄ¼þ
            </summary>
            <param name="ftpFolder">ftpÄ¿Â¼</param>
            <param name="ftpFileName">ftpÎÄ¼þÃû</param>
            <param name="localFolder">±¾µØÄ¿Â¼</param>
            <param name="localFileName">±¾µØÎÄ¼þÃû</param>
        </member>
        <member name="M:DotNet.Utilities.FTPOperater.GetFileInfo(System.String,System.String)">
            <summary>
            µÃµ½FTPÉÏÎÄ¼þÐÅÏ¢
            </summary>
            <param name="ftpFolder">FTPÄ¿Â¼</param>
            <param name="ftpFileName">ftpÎÄ¼þÃû</param>
        </member>
        <member name="M:DotNet.Utilities.FTPOperater.CanConnect">
            <summary>
            ²âÊÔFTP·þÎñÆ÷ÊÇ·ñ¿ÉµÇÂ½
            </summary>
        </member>
        <member name="M:DotNet.Utilities.FTPOperater.GetFileInfoConnected(System.String,System.String)">
            <summary>
            µÃµ½FTPÉÏÎÄ¼þÐÅÏ¢
            </summary>
            <param name="ftpFolder">FTPÄ¿Â¼</param>
            <param name="ftpFileName">ftpÎÄ¼þÃû</param>
        </member>
        <member name="M:DotNet.Utilities.FTPOperater.GetFileList(System.String,System.String)">
            <summary>
            µÃµ½ÎÄ¼þÁÐ±í
            </summary>
            <param name="ftpFolder">FTPÄ¿Â¼</param>
            <returns>FTPÍ¨Åä·ûºÅ</returns>
        </member>
        <member name="M:DotNet.Utilities.FTPOperater.getFtpClient">
             <summary>
            µÃµ½FTP´«Êä¶ÔÏó
             </summary>
        </member>
        <member name="M:DotNet.Utilities.GridViewHelper.GetStrPartly(System.String,System.Int32)">
            <summary>
            ½ØÈ¡ÄÚÈÝ³¤¶È
            </summary>
            <param name="o_Str">Ô­×Ö·û´®</param>
            <param name="len">½ØÈ¡³¤¶È</param>
            <returns>½ØÈ¡ºó×Ö·û´®</returns>
        </member>
        <member name="M:DotNet.Utilities.GridViewHelper.GetCellText(System.Web.UI.WebControls.TableCell)">
            <summary>
            »ñÈ¡µ¥Ôª¸ñÄÚÈÝ
            </summary>
            <param name="cell">TableCell</param>
            <returns>ÄÚÈÝ</returns>
        </member>
        <member name="M:DotNet.Utilities.GridViewHelper.SetCellText(System.Web.UI.WebControls.TableCell,System.Int32)">
            <summary>
            ÉèÖÃµ¥Ôª¸ñÄÚÈÝ
            </summary>
            <param name="cell">TableCell</param>
            <param name="maxLen">×î´ó³¤¶È</param>
        </member>
        <member name="M:DotNet.Utilities.GridViewHelper.GridView2DataTable(System.Web.UI.WebControls.GridView)">
            <summary>
            ´ÓGridViewµÄÊý¾ÝÉú³ÉDataTable
            </summary>
            <param name="gv">GridView¶ÔÏó</param>
        </member>
        <member name="M:DotNet.Utilities.GridViewHelper.ToDataTable(System.Collections.IList)">
            <summary>
            ½«¼¯ºÏÀà×ª»»³ÉDataTable
            </summary>
            <param name="list">¼¯ºÏ</param>
        </member>
        <member name="M:DotNet.Utilities.GridViewHelper.ToDataTable``1(System.Collections.Generic.IList{``0},System.String[])">
            <summary>
            ½«·ºÐÍ¼¯ºÏÀà×ª»»³ÉDataTable
            </summary>
            <typeparam name="T">¼¯ºÏÏîÀàÐÍ</typeparam>
            <param name="list">¼¯ºÏ</param>
            <param name="propertyName">ÐèÒª·µ»ØµÄÁÐµÄÁÐÃû</param>
            <returns>Êý¾Ý¼¯(±í)</returns>
        </member>
        <member name="T:DotNet.Utilities.HttpCookieHelper">
            <summary>  
            Cookie操作帮助类  
            </summary>  
        </member>
        <member name="M:DotNet.Utilities.HttpCookieHelper.GetCookieList(System.String)">
            <summary>  
            根据字符生成Cookie列表  
            </summary>  
            <param name="cookie">Cookie字符串</param>  
            <returns></returns>  
        </member>
        <member name="M:DotNet.Utilities.HttpCookieHelper.GetCookieValue(System.String,System.String)">
            <summary>  
            根据Key值得到Cookie值,Key不区分大小写  
            </summary>  
            <param name="Key">key</param>  
            <param name="cookie">字符串Cookie</param>  
            <returns></returns>  
        </member>
        <member name="M:DotNet.Utilities.HttpCookieHelper.CookieFormat(System.String,System.String)">
            <summary>  
            格式化Cookie为标准格式  
            </summary>  
            <param name="key">Key值</param>  
            <param name="value">Value值</param>  
            <returns></returns>  
        </member>
        <member name="T:DotNet.Utilities.CookieItem">
            <summary>  
            Cookie对象  
            </summary>  
        </member>
        <member name="P:DotNet.Utilities.CookieItem.Key">
            <summary>  
            键  
            </summary>  
        </member>
        <member name="P:DotNet.Utilities.CookieItem.Value">
            <summary>  
            值  
            </summary>  
        </member>
        <member name="T:DotNet.Utilities.HttpHelper">
            <summary>
            Http连接操作帮助类
            </summary>
        </member>
        <member name="M:DotNet.Utilities.HttpHelper.GetHtml(DotNet.Utilities.HttpItem)">
            <summary>
            根据相传入的数据，得到相应页面数据
            </summary>
            <param name="item">参数类对象</param>
            <returns>返回HttpResult类型</returns>
        </member>
        <member name="M:DotNet.Utilities.HttpHelper.GetMemoryStream(System.IO.Stream)">
            <summary>
            4.0以下.net版本取数据使用
            </summary>
            <param name="streamResponse">流</param>
        </member>
        <member name="M:DotNet.Utilities.HttpHelper.SetRequest(DotNet.Utilities.HttpItem)">
             <summary>
             为请求准备参数
             </summary>
            <param name="item">参数列表</param>
        </member>
        <member name="M:DotNet.Utilities.HttpHelper.SetCer(DotNet.Utilities.HttpItem)">
            <summary>
            设置证书
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:DotNet.Utilities.HttpHelper.SetCerList(DotNet.Utilities.HttpItem)">
            <summary>
            设置多个证书
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:DotNet.Utilities.HttpHelper.SetCookie(DotNet.Utilities.HttpItem)">
            <summary>
            设置Cookie
            </summary>
            <param name="item">Http参数</param>
        </member>
        <member name="M:DotNet.Utilities.HttpHelper.SetPostData(DotNet.Utilities.HttpItem)">
            <summary>
            设置Post数据
            </summary>
            <param name="item">Http参数</param>
        </member>
        <member name="M:DotNet.Utilities.HttpHelper.SetProxy(DotNet.Utilities.HttpItem)">
            <summary>
            设置代理
            </summary>
            <param name="item">参数对象</param>
        </member>
        <member name="M:DotNet.Utilities.HttpHelper.CheckValidationResult(System.Object,System.Security.Cryptography.X509Certificates.X509Certificate,System.Security.Cryptography.X509Certificates.X509Chain,System.Net.Security.SslPolicyErrors)">
            <summary>
            回调验证证书问题
            </summary>
            <param name="sender">流对象</param>
            <param name="certificate">证书</param>
            <param name="chain">X509Chain</param>
            <param name="errors">SslPolicyErrors</param>
            <returns>bool</returns>
        </member>
        <member name="T:DotNet.Utilities.HttpItem">
            <summary>
            Http请求参考类
            </summary>
        </member>
        <member name="P:DotNet.Utilities.HttpItem.URL">
            <summary>
            请求URL必须填写
            </summary>
        </member>
        <member name="P:DotNet.Utilities.HttpItem.Method">
            <summary>
            请求方式默认为GET方式,当为POST方式时必须设置Postdata的值
            </summary>
        </member>
        <member name="P:DotNet.Utilities.HttpItem.Timeout">
            <summary>
            默认请求超时时间
            </summary>
        </member>
        <member name="P:DotNet.Utilities.HttpItem.ReadWriteTimeout">
            <summary>
            默认写入Post数据超时间
            </summary>
        </member>
        <member name="P:DotNet.Utilities.HttpItem.KeepAlive">
            <summary>
             获取或设置一个值，该值指示是否与 Internet 资源建立持久性连接默认为true。
            </summary>
        </member>
        <member name="P:DotNet.Utilities.HttpItem.Accept">
            <summary>
            请求标头值 默认为text/html, application/xhtml+xml, */*
            </summary>
        </member>
        <member name="P:DotNet.Utilities.HttpItem.ContentType">
            <summary>
            请求返回类型默认 text/html
            </summary>
        </member>
        <member name="P:DotNet.Utilities.HttpItem.UserAgent">
            <summary>
            客户端访问信息默认Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0)
            </summary>
        </member>
        <member name="P:DotNet.Utilities.HttpItem.Encoding">
            <summary>
            返回数据编码默认为NUll,可以自动识别,一般为utf-8,gbk,gb2312
            </summary>
        </member>
        <member name="P:DotNet.Utilities.HttpItem.PostDataType">
            <summary>
            Post的数据类型
            </summary>
        </member>
        <member name="P:DotNet.Utilities.HttpItem.Postdata">
            <summary>
            Post请求时要发送的字符串Post数据
            </summary>
        </member>
        <member name="P:DotNet.Utilities.HttpItem.PostdataByte">
            <summary>
            Post请求时要发送的Byte类型的Post数据
            </summary>
        </member>
        <member name="P:DotNet.Utilities.HttpItem.CookieCollection">
            <summary>
            Cookie对象集合
            </summary>
        </member>
        <member name="P:DotNet.Utilities.HttpItem.Cookie">
            <summary>
            请求时的Cookie
            </summary>
        </member>
        <member name="P:DotNet.Utilities.HttpItem.Referer">
            <summary>
            来源地址，上次访问地址
            </summary>
        </member>
        <member name="P:DotNet.Utilities.HttpItem.CerPath">
            <summary>
            证书绝对路径
            </summary>
        </member>
        <member name="P:DotNet.Utilities.HttpItem.IsToLower">
            <summary>
            是否设置为全文小写，默认为不转化
            </summary>
        </member>
        <member name="P:DotNet.Utilities.HttpItem.Allowautoredirect">
            <summary>
            支持跳转页面，查询结果将是跳转后的页面，默认是不跳转
            </summary>
        </member>
        <member name="P:DotNet.Utilities.HttpItem.Connectionlimit">
            <summary>
            最大连接数
            </summary>
        </member>
        <member name="P:DotNet.Utilities.HttpItem.ProxyUserName">
            <summary>
            代理Proxy 服务器用户名
            </summary>
        </member>
        <member name="P:DotNet.Utilities.HttpItem.ProxyPwd">
            <summary>
            代理 服务器密码
            </summary>
        </member>
        <member name="P:DotNet.Utilities.HttpItem.ProxyIp">
            <summary>
            代理 服务IP
            </summary>
        </member>
        <member name="P:DotNet.Utilities.HttpItem.ResultType">
            <summary>
            设置返回类型String和Byte
            </summary>
        </member>
        <member name="P:DotNet.Utilities.HttpItem.Header">
            <summary>
            header对象
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:DotNet.Utilities.HttpItem.ProtocolVersion" -->
        <member name="P:DotNet.Utilities.HttpItem.Expect100Continue">
            <summary>
             获取或设置一个 System.Boolean 值，该值确定是否使用 100-Continue 行为。如果 POST 请求需要 100-Continue 响应，则为 true；否则为 false。默认值为 true。
            </summary>
        </member>
        <member name="P:DotNet.Utilities.HttpItem.ClentCertificates">
            <summary>
            设置509证书集合
            </summary>
        </member>
        <member name="P:DotNet.Utilities.HttpItem.PostEncoding">
            <summary>
            设置或获取Post参数编码,默认的为Default编码
            </summary>
        </member>
        <member name="T:DotNet.Utilities.HttpResult">
            <summary>
            Http返回参数类
            </summary>
        </member>
        <member name="P:DotNet.Utilities.HttpResult.Cookie">
            <summary>
            Http请求返回的Cookie
            </summary>
        </member>
        <member name="P:DotNet.Utilities.HttpResult.CookieCollection">
            <summary>
            Cookie对象集合
            </summary>
        </member>
        <member name="P:DotNet.Utilities.HttpResult.Html">
            <summary>
            返回的String类型数据 只有ResultType.String时才返回数据，其它情况为空
            </summary>
        </member>
        <member name="P:DotNet.Utilities.HttpResult.ResultByte">
            <summary>
            返回的Byte数组 只有ResultType.Byte时才返回数据，其它情况为空
            </summary>
        </member>
        <member name="P:DotNet.Utilities.HttpResult.Header">
            <summary>
            header对象
            </summary>
        </member>
        <member name="P:DotNet.Utilities.HttpResult.StatusDescription">
            <summary>
            返回状态说明
            </summary>
        </member>
        <member name="P:DotNet.Utilities.HttpResult.StatusCode">
            <summary>
            返回状态码,默认为OK
            </summary>
        </member>
        <member name="T:DotNet.Utilities.ResultType">
            <summary>
            返回类型
            </summary>
        </member>
        <member name="F:DotNet.Utilities.ResultType.String">
            <summary>
            表示只返回字符串 只有Html有数据
            </summary>
        </member>
        <member name="F:DotNet.Utilities.ResultType.Byte">
            <summary>
            表示返回字符串和字节流 ResultByte和Html都有数据返回
            </summary>
        </member>
        <member name="T:DotNet.Utilities.PostDataType">
            <summary>
            Post的数据格式默认为string
            </summary>
        </member>
        <member name="F:DotNet.Utilities.PostDataType.String">
            <summary>
            字符串类型，这时编码Encoding可不设置
            </summary>
        </member>
        <member name="F:DotNet.Utilities.PostDataType.Byte">
            <summary>
            Byte类型，需要设置PostdataByte参数的值编码Encoding可设置为空
            </summary>
        </member>
        <member name="F:DotNet.Utilities.PostDataType.FilePath">
            <summary>
            传文件，Postdata必须设置为文件的绝对路径，必须设置Encoding的值
            </summary>
        </member>
        <member name="T:DotNet.Utilities.IpHelper">
            <summary>
            共用工具类
            </summary>
        </member>
        <member name="M:DotNet.Utilities.IpHelper.GetUserIp">
            <summary>
            获得用户IP
            </summary>
        </member>
        <member name="M:DotNet.Utilities.ConvertJson.String2Json(System.String)">
            <summary>
            过滤特殊字符
            </summary>
        </member>
        <member name="M:DotNet.Utilities.ConvertJson.StringFormat(System.String,System.Type)">
            <summary>
            格式化字符型、日期型、布尔型
            </summary>
        </member>
        <member name="M:DotNet.Utilities.ConvertJson.ListToJson``1(System.Collections.Generic.IList{``0})">
            <summary>
            List转换成Json
            </summary>
        </member>
        <member name="M:DotNet.Utilities.ConvertJson.ListToJson``1(System.Collections.Generic.IList{``0},System.String)">
            <summary>
            List转换成Json 
            </summary>
        </member>
        <member name="M:DotNet.Utilities.ConvertJson.ToJson(System.Object)">
            <summary> 
            对象转换为Json 
            </summary> 
            <param name="jsonObject">对象</param> 
            <returns>Json字符串</returns> 
        </member>
        <member name="M:DotNet.Utilities.ConvertJson.ToJson(System.Collections.IEnumerable)">
            <summary> 
            对象集合转换Json 
            </summary> 
            <param name="array">集合对象</param> 
            <returns>Json字符串</returns> 
        </member>
        <member name="M:DotNet.Utilities.ConvertJson.ToArrayString(System.Collections.IEnumerable)">
            <summary> 
            普通集合转换Json 
            </summary> 
            <param name="array">集合对象</param> 
            <returns>Json字符串</returns> 
        </member>
        <member name="M:DotNet.Utilities.ConvertJson.ToJson(System.Data.DataSet)">
            <summary> 
            DataSet转换为Json 
            </summary> 
            <param name="dataSet">DataSet对象</param> 
            <returns>Json字符串</returns> 
        </member>
        <member name="M:DotNet.Utilities.ConvertJson.ToJson(System.Data.DataTable)">
            <summary> 
            Datatable转换为Json 
            </summary> 
            <param name="table">Datatable对象</param> 
            <returns>Json字符串</returns> 
        </member>
        <member name="M:DotNet.Utilities.ConvertJson.ToJson(System.Data.DataTable,System.String)">
            <summary>
            DataTable转换为Json 
            </summary>
        </member>
        <member name="M:DotNet.Utilities.ConvertJson.ToJson(System.Data.Common.DbDataReader)">
            <summary> 
            DataReader转换为Json 
            </summary> 
            <param name="dataReader">DataReader对象</param> 
            <returns>Json字符串</returns> 
        </member>
        <member name="T:DotNet.Utilities.JsHelper">
            <summary>
            客户端脚本输出
            </summary>
        </member>
        <member name="M:DotNet.Utilities.JsHelper.AlertAndRedirect(System.String,System.String)">
            <summary>
            弹出信息,并跳转指定页面。
            </summary>
        </member>
        <member name="M:DotNet.Utilities.JsHelper.AlertAndGoHistory(System.String,System.Int32)">
            <summary>
            弹出信息,并返回历史页面
            </summary>
        </member>
        <member name="M:DotNet.Utilities.JsHelper.Redirect(System.String)">
            <summary>
            直接跳转到指定的页面
            </summary>
        </member>
        <member name="M:DotNet.Utilities.JsHelper.AlertAndParentUrl(System.String,System.String)">
            <summary>
            弹出信息 并指定到父窗口
            </summary>
        </member>
        <member name="M:DotNet.Utilities.JsHelper.ParentRedirect(System.String)">
            <summary>
            返回到父窗口
            </summary>
        </member>
        <member name="M:DotNet.Utilities.JsHelper.BackHistory(System.Int32)">
            <summary>
            返回历史页面
            </summary>
        </member>
        <member name="M:DotNet.Utilities.JsHelper.Alert(System.String)">
            <summary>
            弹出信息
            </summary>
        </member>
        <member name="M:DotNet.Utilities.JsHelper.RegisterScriptBlock(System.Web.UI.Page,System.String)">
            <summary>
            注册脚本块
            </summary>
        </member>
        <member name="T:DotNet.Utilities.MediaHandler">
            <summary>
            处理多媒体的公共类
            </summary>
        </member>
        <member name="M:DotNet.Utilities.MediaHandler.SyncPlayWAV(System.Media.SoundPlayer,System.String)">
            <summary>
            以同步方式播放wav文件
            </summary>
            <param name="sp">SoundPlayer对象</param>
            <param name="wavFilePath">wav文件的路径</param>
        </member>
        <member name="M:DotNet.Utilities.MediaHandler.SyncPlayWAV(System.String)">
            <summary>
            以同步方式播放wav文件
            </summary>
            <param name="wavFilePath">wav文件的路径</param>
        </member>
        <member name="M:DotNet.Utilities.MediaHandler.ASyncPlayWAV(System.Media.SoundPlayer,System.String)">
            <summary>
            以异步方式播放wav文件
            </summary>
            <param name="sp">SoundPlayer对象</param>
            <param name="wavFilePath">wav文件的路径</param>
        </member>
        <member name="M:DotNet.Utilities.MediaHandler.ASyncPlayWAV(System.String)">
            <summary>
            以异步方式播放wav文件
            </summary>
            <param name="wavFilePath">wav文件的路径</param>
        </member>
        <member name="M:DotNet.Utilities.MediaHandler.StopWAV(System.Media.SoundPlayer)">
            <summary>
            
            </summary>
            <param name="sp">SoundPlayer对象</param>
        </member>
        <member name="T:DotNet.Utilities.MediaTypes">
            <summary>
            电子邮件类型类
            </summary>
        </member>
        <member name="T:DotNet.Utilities.MimeEntity">
            <summary>
            This class represents a Mime entity.
            这个类表示一个MIME实体
            </summary>
        </member>
        <member name="P:DotNet.Utilities.MimeEntity.EncodedMessage">
            <summary>
            Gets the encoded message.
            获取编码的消息。
            </summary>
            <value>
            编码的消息
            The encoded message.
            </value>
        </member>
        <member name="P:DotNet.Utilities.MimeEntity.Children">
            <summary>
            Gets the children.
            </summary>
            <value>The children.</value>
        </member>
        <member name="P:DotNet.Utilities.MimeEntity.ContentType">
            <summary>
            Gets the type of the content.
            </summary>
            <value>The type of the content.</value>
        </member>
        <member name="P:DotNet.Utilities.MimeEntity.MediaSubType">
            <summary>
            Gets the type of the media sub.
            </summary>
            <value>The type of the media sub.</value>
        </member>
        <member name="P:DotNet.Utilities.MimeEntity.MediaMainType">
            <summary>
            Gets the type of the media main.
            </summary>
            <value>The type of the media main.</value>
        </member>
        <member name="P:DotNet.Utilities.MimeEntity.Headers">
            <summary>
            Gets the headers.
            </summary>
            <value>The headers.</value>
        </member>
        <member name="P:DotNet.Utilities.MimeEntity.MimeVersion">
            <summary>
            Gets or sets the MIME version.
            </summary>
            <value>The MIME version.</value>
        </member>
        <member name="P:DotNet.Utilities.MimeEntity.ContentId">
            <summary>
            Gets or sets the content id.
            </summary>
            <value>The content id.</value>
        </member>
        <member name="P:DotNet.Utilities.MimeEntity.ContentDescription">
            <summary>
            Gets or sets the content description.
            </summary>
            <value>The content description.</value>
        </member>
        <member name="P:DotNet.Utilities.MimeEntity.ContentDisposition">
            <summary>
            Gets or sets the content disposition.
            </summary>
            <value>The content disposition.</value>
        </member>
        <member name="P:DotNet.Utilities.MimeEntity.TransferEncoding">
            <summary>
            Gets or sets the transfer encoding.
            </summary>
            <value>The transfer encoding.</value>
        </member>
        <member name="P:DotNet.Utilities.MimeEntity.ContentTransferEncoding">
            <summary>
            Gets or sets the content transfer encoding.
            </summary>
            <value>The content transfer encoding.</value>
        </member>
        <member name="P:DotNet.Utilities.MimeEntity.HasBoundary">
            <summary>
            Gets a value indicating whether this instance has boundary.
            </summary>
            <value>
            	<c>true</c> if this instance has boundary; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:DotNet.Utilities.MimeEntity.StartBoundary">
            <summary>
            Gets the start boundary.
            </summary>
            <value>The start boundary.</value>
        </member>
        <member name="P:DotNet.Utilities.MimeEntity.EndBoundary">
            <summary>
            Gets the end boundary.
            </summary>
            <value>The end boundary.</value>
        </member>
        <member name="P:DotNet.Utilities.MimeEntity.Parent">
            <summary>
            Gets or sets the parent.
            </summary>
            <value>The parent.</value>
        </member>
        <member name="P:DotNet.Utilities.MimeEntity.Content">
            <summary>
            Gets or sets the content.
            </summary>
            <value>The content.</value>
        </member>
        <member name="M:DotNet.Utilities.MimeEntity.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Utilities.MimeEntity"/> class.
            </summary>
        </member>
        <member name="M:DotNet.Utilities.MimeEntity.#ctor(DotNet.Utilities.MimeEntity)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Utilities.MimeEntity"/> class.
            </summary>
            <param name="parent">The parent.</param>
        </member>
        <member name="M:DotNet.Utilities.MimeEntity.SetContentType(System.Net.Mime.ContentType)">
            <summary>
            Sets the type of the content.
            </summary>
            <param name="contentType">Type of the content.</param>
        </member>
        <member name="M:DotNet.Utilities.MimeEntity.ToMailMessageEx">
            <summary>
            Toes the mail message ex.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.MimeEntity.ToMailMessageEx(DotNet.Utilities.MimeEntity)">
            <summary>
            Toes the mail message ex.
            </summary>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.MimeEntity.BuildSinglePartMessage(DotNet.Utilities.MimeEntity,DotNet.Utilities.MailMessageEx)">
            <summary>
            Builds the single part message.
            </summary>
            <param name="entity">The entity.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:DotNet.Utilities.MimeEntity.GetEncoding">
            <summary>
            Gets the body encoding.
            </summary>
            <param name="contentType">Type of the content.</param>
        </member>
        <member name="M:DotNet.Utilities.MimeEntity.BuildMultiPartMessage(DotNet.Utilities.MimeEntity,DotNet.Utilities.MailMessageEx)">
            <summary>
            Builds the multi part message.
            </summary>
            <param name="entity">The entity.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:DotNet.Utilities.MimeEntity.SetMessageBody(DotNet.Utilities.MailMessageEx,DotNet.Utilities.MimeEntity)">
            <summary>
            Sets the message body.
            </summary>
            <param name="message">The message.</param>
            <param name="child">The child.</param>
        </member>
        <member name="M:DotNet.Utilities.MimeEntity.DecodeBytes(System.Byte[],System.Text.Encoding)">
            <summary>
            Decodes the bytes.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="encoding">The encoding.</param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.MimeEntity.CreateAlternateView(DotNet.Utilities.MimeEntity)">
            <summary>
            Creates the alternate view.
            </summary>
            <param name="view">The view.</param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.MimeEntity.TrimBrackets(System.String)">
            <summary>
            Trims the brackets.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.MimeEntity.CreateAttachment(DotNet.Utilities.MimeEntity)">
            <summary>
            Creates the attachment.
            </summary>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="T:DotNet.Utilities.MimeReader">
            <summary>
            This class is responsible for parsing a string array of lines
            containing a MIME message.
            </summary>
        </member>
        <member name="P:DotNet.Utilities.MimeReader.Lines">
            <summary>
            Gets the lines.
            </summary>
            <value>The lines.</value>
        </member>
        <member name="M:DotNet.Utilities.MimeReader.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Utilities.MimeReader"/> class.
            </summary>
        </member>
        <member name="M:DotNet.Utilities.MimeReader.#ctor(DotNet.Utilities.MimeEntity,System.Collections.Generic.Queue{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Utilities.MimeReader"/> class.
            </summary>
            <param name="entity">The entity.</param>
            <param name="lines">The lines.</param>
        </member>
        <member name="M:DotNet.Utilities.MimeReader.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Utilities.MimeReader"/> class.
            </summary>
            <param name="lines">The lines.</param>
        </member>
        <member name="M:DotNet.Utilities.MimeReader.ParseHeaders">
            <summary>
            Parse headers into _entity.Headers NameValueCollection.
            </summary>
        </member>
        <member name="M:DotNet.Utilities.MimeReader.ProcessHeaders">
            <summary>
            Processes mime specific headers.
            </summary>
            <returns>A mime entity with mime specific headers parsed.</returns>
        </member>
        <member name="M:DotNet.Utilities.MimeReader.CreateMimeEntity">
            <summary>
            Creates the MIME entity.
            </summary>
            <returns>A mime entity containing 0 or more children representing the mime message.</returns>
        </member>
        <member name="M:DotNet.Utilities.MimeReader.SetDecodedContentStream">
            <summary>
            Sets the decoded content stream by decoding the EncodedMessage 
            and writing it to the entity content stream.
            </summary>
            <param name="entity">The entity containing the encoded message.</param>
        </member>
        <member name="M:DotNet.Utilities.MimeReader.GetBytes(System.String)">
            <summary>
            Gets a byte[] of content for the provided string.
            </summary>
            <param name="decodedContent">Content.</param>
            <returns>A byte[] containing content.</returns>
        </member>
        <member name="M:DotNet.Utilities.MimeReader.ParseBody">
            <summary>
            Parses the body.
            </summary>
        </member>
        <member name="M:DotNet.Utilities.MimeReader.AddChildEntity(DotNet.Utilities.MimeEntity,System.Collections.Generic.Queue{System.String})">
            <summary>
            Adds the child entity.
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:DotNet.Utilities.MimeReader.GetContentType(System.String)">
            <summary>
            Gets the type of the content.
            </summary>
            <param name="contentType">Type of the content.</param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.MimeReader.GetMediaType(System.String)">
            <summary>
            Gets the type of the media.
            </summary>
            <param name="mediaType">Type of the media.</param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.MimeReader.GetMediaMainType(System.String)">
            <summary>
            Gets the type of the media main.
            </summary>
            <param name="mediaType">Type of the media.</param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.MimeReader.GetMediaSubType(System.String)">
            <summary>
            Gets the type of the media sub.
            </summary>
            <param name="mediaType">Type of the media.</param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.MimeReader.GetTransferEncoding(System.String)">
            <summary>
            Gets the transfer encoding.
            </summary>
            <param name="transferEncoding">The transfer encoding.</param>
            <returns></returns>
            <remarks>
            The transfer encoding determination follows the same rules as 
            Peter Huber's article w/ the exception of not throwing exceptions 
            when binary is provided as a transferEncoding.  Instead it is left
            to the calling code to check for binary.
            </remarks>
        </member>
        <member name="T:DotNet.Utilities.QuotedPrintableEncoding">
            <summary>
            This class is based on the QuotedPrintable class written by Bill Gearhart
            </summary>
        </member>
        <member name="T:DotNet.Utilities.ThumbnailMod">
            <summary>
            枚举,生成缩略图模式
            </summary>
        </member>
        <member name="F:DotNet.Utilities.ThumbnailMod.HW">
            <summary>
            HW
            </summary>
        </member>
        <member name="F:DotNet.Utilities.ThumbnailMod.W">
            <summary>
            W
            </summary>
        </member>
        <member name="F:DotNet.Utilities.ThumbnailMod.H">
            <summary>
            H
            </summary>
        </member>
        <member name="F:DotNet.Utilities.ThumbnailMod.Cut">
            <summary>
            Cut
            </summary>
        </member>
        <member name="T:DotNet.Utilities.PicDeal">
            <summary>
            操作图片类, 生成缩略图,添加水印
            </summary>
        </member>
        <member name="M:DotNet.Utilities.PicDeal.MakeThumbnail(System.String,System.Int32,System.Int32,DotNet.Utilities.ThumbnailMod)">
            <summary>
            生成缩略图
            </summary>
            <param name="originalImagePath"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="mode"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.PicDeal.AddWaterPic(System.String,System.String)">
            <summary>
            在图片上生成图片水印
            </summary>
            <param name="Path">原服务器图片路径</param>
            <param name="Path_sypf">水印图片路径</param>
        </member>
        <member name="M:DotNet.Utilities.PicDeal.GetImgType">
            <summary>
            公共方法
            </summary>
        </member>
        <member name="M:DotNet.Utilities.PicDeal.ResizeImage(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            返回新图片尺寸
            </summary>
            <param name="width">原始宽</param>
            <param name="height">原始高</param>
            <param name="maxWidth">新图片最大宽</param>
            <param name="maxHeight">新图片最大高</param>
            <returns></returns>
        </member>
        <member name="T:DotNet.Utilities.QueryString">
            <summary>
            QueryString 地址栏参数
            </summary>
        </member>
        <member name="M:DotNet.Utilities.QueryString.Q(System.String)">
            <summary>
            等于Request.QueryString;如果为null 返回 空“” ，否则返回Request.QueryString[name]
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.QueryString.F(System.String)">
            <summary>
            等于  Request.Form  如果为null 返回 空“” ，否则返回 Request.Form[name]
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.QueryString.QId(System.String)">
            <summary>
            获取url中的id
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.QueryString.StrToId(System.String)">
            <summary>
            获取正确的Id，如果不是正整数，返回0
            </summary>
            <param name="_value"></param>
            <returns>返回正确的整数ID，失败返回0</returns>
        </member>
        <member name="M:DotNet.Utilities.QueryString.IsNumberId(System.String)">
            <summary>
            检查一个字符串是否是纯数字构成的，一般用于查询字符串参数的有效性验证。
            </summary>
            <param name="_value">需验证的字符串。。</param>
            <returns>是否合法的bool值。</returns>
        </member>
        <member name="M:DotNet.Utilities.QueryString.QuickValidate(System.String,System.String)">
            <summary>
            快速验证一个字符串是否符合指定的正则表达式。
            </summary>
            <param name="_express">正则表达式的内容。</param>
            <param name="_value">需验证的字符串。</param>
            <returns>是否合法的bool值。</returns>
        </member>
        <member name="P:DotNet.Utilities.QueryString.Current">
            <summary>
            HttpContext Current
            </summary>
        </member>
        <member name="P:DotNet.Utilities.QueryString.Request">
            <summary>
            HttpContext Current  HttpRequest Request   get { return Current.Request;
            </summary>
        </member>
        <member name="P:DotNet.Utilities.QueryString.Response">
            <summary>
             HttpContext Current  HttpRequest Request   get { return Current.Request; HttpResponse Response  return Current.Response;
            </summary>
        </member>
        <member name="T:DotNet.Utilities.SqlHelper">
            <summary>
            数据库的通用访问代码 苏飞修改
            此类为抽象类，
            不允许实例化，在应用时直接调用即可
            </summary>
        </member>
        <member name="F:DotNet.Utilities.SqlHelper.connectionString">
            <summary>
            数据库连接字符串
            </summary>
        </member>
        <member name="M:DotNet.Utilities.SqlHelper.ExecteNonQuery(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
             <summary>
            执行一个不需要返回值的SqlCommand命令，通过指定专用的连接字符串。
             使用参数数组形式提供参数列表 
             </summary>
             <param name="connectionString">一个有效的数据库连接字符串</param>
             <param name="cmdType">SqlCommand命令类型 (存储过程， T-SQL语句， 等等。)</param>
             <param name="cmdText">存储过程的名字或者 T-SQL 语句</param>
             <param name="commandParameters">以数组形式提供SqlCommand命令中用到的参数列表</param>
             <returns>返回一个数值表示此SqlCommand命令执行后影响的行数</returns>
        </member>
        <member name="M:DotNet.Utilities.SqlHelper.ExecteNonQuery(System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
             <summary>
            执行一个不需要返回值的SqlCommand命令，通过指定专用的连接字符串。
             使用参数数组形式提供参数列表 
             </summary>
             <param name="cmdType">SqlCommand命令类型 (存储过程， T-SQL语句， 等等。)</param>
             <param name="cmdText">存储过程的名字或者 T-SQL 语句</param>
             <param name="commandParameters">以数组形式提供SqlCommand命令中用到的参数列表</param>
             <returns>返回一个数值表示此SqlCommand命令执行后影响的行数</returns>
        </member>
        <member name="M:DotNet.Utilities.SqlHelper.ExecteNonQueryProducts(System.String,System.Data.SqlClient.SqlParameter[])">
             <summary>
            存储过程专用
             </summary>
             <param name="cmdText">存储过程的名字</param>
             <param name="commandParameters">以数组形式提供SqlCommand命令中用到的参数列表</param>
             <returns>返回一个数值表示此SqlCommand命令执行后影响的行数</returns>
        </member>
        <member name="M:DotNet.Utilities.SqlHelper.ExecteNonQueryText(System.String,System.Data.SqlClient.SqlParameter[])">
             <summary>
            Sql语句专用
             </summary>
             <param name="cmdText">T_Sql语句</param>
             <param name="commandParameters">以数组形式提供SqlCommand命令中用到的参数列表</param>
             <returns>返回一个数值表示此SqlCommand命令执行后影响的行数</returns>
        </member>
        <member name="M:DotNet.Utilities.SqlHelper.GetTable(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行一条返回结果集的SqlCommand，通过一个已经存在的数据库连接
            使用参数数组提供参数
            </summary>
            <param name="connecttionString">一个现有的数据库连接</param>
            <param name="cmdTye">SqlCommand命令类型</param>
            <param name="cmdText">存储过程的名字或者 T-SQL 语句</param>
            <param name="commandParameters">以数组形式提供SqlCommand命令中用到的参数列表</param>
            <returns>返回一个表集合(DataTableCollection)表示查询得到的数据集</returns>
        </member>
        <member name="M:DotNet.Utilities.SqlHelper.GetTable(System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行一条返回结果集的SqlCommand，通过一个已经存在的数据库连接
            使用参数数组提供参数
            </summary>
            <param name="cmdTye">SqlCommand命令类型</param>
            <param name="cmdText">存储过程的名字或者 T-SQL 语句</param>
            <param name="commandParameters">以数组形式提供SqlCommand命令中用到的参数列表</param>
            <returns>返回一个表集合(DataTableCollection)表示查询得到的数据集</returns>
        </member>
        <member name="M:DotNet.Utilities.SqlHelper.GetTableProducts(System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            存储过程专用
            </summary>
            <param name="cmdText">存储过程的名字或者 T-SQL 语句</param>
            <param name="commandParameters">以数组形式提供SqlCommand命令中用到的参数列表</param>
            <returns>返回一个表集合(DataTableCollection)表示查询得到的数据集</returns>
        </member>
        <member name="M:DotNet.Utilities.SqlHelper.GetTableText(System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Sql语句专用
            </summary>
            <param name="cmdText"> T-SQL 语句</param>
            <param name="commandParameters">以数组形式提供SqlCommand命令中用到的参数列表</param>
            <returns>返回一个表集合(DataTableCollection)表示查询得到的数据集</returns>
        </member>
        <member name="M:DotNet.Utilities.SqlHelper.PrepareCommand(System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            为执行命令准备参数
            </summary>
            <param name="cmd">SqlCommand 命令</param>
            <param name="conn">已经存在的数据库连接</param>
            <param name="trans">数据库事物处理</param>
            <param name="cmdType">SqlCommand命令类型 (存储过程， T-SQL语句， 等等。)</param>
            <param name="cmdText">Command text，T-SQL语句 例如 Select * from Products</param>
            <param name="cmdParms">返回带参数的命令</param>
        </member>
        <member name="M:DotNet.Utilities.SqlHelper.ExecuteReader(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand that returns a resultset against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <param name="connectionString">一个有效的数据库连接字符串</param>
            <param name="cmdType">SqlCommand命令类型 (存储过程， T-SQL语句， 等等。)</param>
            <param name="cmdText">存储过程的名字或者 T-SQL 语句</param>
            <param name="commandParameters">以数组形式提供SqlCommand命令中用到的参数列表</param>
            <returns>A SqlDataReader containing the results</returns>
        </member>
        <member name="M:DotNet.Utilities.SqlHelper.ExecuteDataSet(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            return a dataset
            </summary>
            <param name="connectionString">一个有效的数据库连接字符串</param>
            <param name="cmdType">SqlCommand命令类型 (存储过程， T-SQL语句， 等等。)</param>
            <param name="cmdText">存储过程的名字或者 T-SQL 语句</param>
            <param name="commandParameters">以数组形式提供SqlCommand命令中用到的参数列表</param>
            <returns>return a dataset</returns>
        </member>
        <member name="M:DotNet.Utilities.SqlHelper.ExecuteDataSet(System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            返回一个DataSet
            </summary>
            <param name="cmdType">SqlCommand命令类型 (存储过程， T-SQL语句， 等等。)</param>
            <param name="cmdText">存储过程的名字或者 T-SQL 语句</param>
            <param name="commandParameters">以数组形式提供SqlCommand命令中用到的参数列表</param>
            <returns>return a dataset</returns>
        </member>
        <member name="M:DotNet.Utilities.SqlHelper.ExecuteDataSetProducts(System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            返回一个DataSet
            </summary>
            <param name="cmdText">存储过程的名字</param>
            <param name="commandParameters">以数组形式提供SqlCommand命令中用到的参数列表</param>
            <returns>return a dataset</returns>
        </member>
        <member name="M:DotNet.Utilities.SqlHelper.ExecuteDataSetText(System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            返回一个DataSet
            </summary>
            <param name="cmdText">T-SQL 语句</param>
            <param name="commandParameters">以数组形式提供SqlCommand命令中用到的参数列表</param>
            <returns>return a dataset</returns>
        </member>
        <member name="M:DotNet.Utilities.SqlHelper.ExecuteScalar(System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            返回第一行的第一列
            </summary>
            <param name="cmdType">SqlCommand命令类型 (存储过程， T-SQL语句， 等等。)</param>
            <param name="cmdText">存储过程的名字或者 T-SQL 语句</param>
            <param name="commandParameters">以数组形式提供SqlCommand命令中用到的参数列表</param>
            <returns>返回一个对象</returns>
        </member>
        <member name="M:DotNet.Utilities.SqlHelper.ExecuteScalarProducts(System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            返回第一行的第一列存储过程专用
            </summary>
            <param name="cmdText">存储过程的名字</param>
            <param name="commandParameters">以数组形式提供SqlCommand命令中用到的参数列表</param>
            <returns>返回一个对象</returns>
        </member>
        <member name="M:DotNet.Utilities.SqlHelper.ExecuteScalarText(System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            返回第一行的第一列Sql语句专用
            </summary>
            <param name="cmdText">者 T-SQL 语句</param>
            <param name="commandParameters">以数组形式提供SqlCommand命令中用到的参数列表</param>
            <returns>返回一个对象</returns>
        </member>
        <member name="M:DotNet.Utilities.SqlHelper.ExecuteScalar(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand that returns the first column of the first record against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             Object obj = ExecuteScalar(connString, CommandType.StoredProcedure, "PublishOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">一个有效的数据库连接字符串</param>
            <param name="cmdType">SqlCommand命令类型 (存储过程， T-SQL语句， 等等。)</param>
            <param name="cmdText">存储过程的名字或者 T-SQL 语句</param>
            <param name="commandParameters">以数组形式提供SqlCommand命令中用到的参数列表</param>
            <returns>An object that should be converted to the expected type using Convert.To{Type}</returns>
        </member>
        <member name="M:DotNet.Utilities.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand that returns the first column of the first record against an existing database connection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             Object obj = ExecuteScalar(connString, CommandType.StoredProcedure, "PublishOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">一个有效的数据库连接字符串</param>
            <param name="cmdType">SqlCommand命令类型 (存储过程， T-SQL语句， 等等。)</param>
            <param name="cmdText">存储过程的名字或者 T-SQL 语句</param>
            <param name="commandParameters">以数组形式提供SqlCommand命令中用到的参数列表</param>
            <returns>An object that should be converted to the expected type using Convert.To{Type}</returns>
        </member>
        <member name="M:DotNet.Utilities.SqlHelper.CacheParameters(System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            add parameter array to the cache
            </summary>
            <param name="cacheKey">Key to the parameter cache</param>
            <param name="cmdParms">an array of SqlParamters to be cached</param>
        </member>
        <member name="M:DotNet.Utilities.SqlHelper.GetCachedParameters(System.String)">
            <summary>
            Retrieve cached parameters
            </summary>
            <param name="cacheKey">key used to lookup parameters</param>
            <returns>Cached SqlParamters array</returns>
        </member>
        <member name="M:DotNet.Utilities.SqlHelper.Exists(System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            检查是否存在
            </summary>
            <param name="strSql">Sql语句</param>
            <param name="cmdParms">参数</param>
            <returns>bool结果</returns>
        </member>
        <member name="T:DotNet.Utilities.SysHelper">
            <summary>
            系统操作相关的公共类
            </summary>    
        </member>
        <member name="M:DotNet.Utilities.SysHelper.GetPath(System.String)">
            <summary>
            获取文件相对路径映射的物理路径
            </summary>
            <param name="virtualPath">文件的相对路径</param>        
        </member>
        <member name="M:DotNet.Utilities.SysHelper.GetMethodName(System.Int32)">
            <summary>
            获取指定调用层级的方法名
            </summary>
            <param name="level">调用的层数</param>        
        </member>
        <member name="P:DotNet.Utilities.SysHelper.NewGUID">
            <summary>
            获取GUID值
            </summary>
        </member>
        <member name="P:DotNet.Utilities.SysHelper.NewLine">
            <summary>
            获取换行字符
            </summary>
        </member>
        <member name="P:DotNet.Utilities.SysHelper.CurrentAppDomain">
            <summary>
            获取当前应用程序域
            </summary>
        </member>
        <member name="T:DotNet.Utilities.Tools">
            <summary>
            共用工具类
            </summary>
        </member>
        <member name="M:DotNet.Utilities.Tools.GetUserIp">
            <summary>
            获得用户IP
            </summary>
        </member>
        <member name="M:DotNet.Utilities.Tools.GetMD5(System.String)">
            <summary>
            根据配置对指定字符串进行 MD5 加密
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.Tools.StrLength(System.String)">
            <summary>
            得到字符串长度，一个汉字长度为2
            </summary>
            <param name="inputString">参数字符串</param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.Tools.ClipString(System.String,System.Int32)">
            <summary>
            截取指定长度字符串
            </summary>
            <param name="inputString">要处理的字符串</param>
            <param name="len">指定长度</param>
            <returns>返回处理后的字符串</returns>
        </member>
        <member name="M:DotNet.Utilities.Tools.DateDiff(System.DateTime,System.DateTime)">
            <summary>
            获得两个日期的间隔
            </summary>
            <param name="DateTime1">日期一。</param>
            <param name="DateTime2">日期二。</param>
            <returns>日期间隔TimeSpan。</returns>
        </member>
        <member name="M:DotNet.Utilities.Tools.FormatDate(System.DateTime,System.String)">
            <summary>
            格式化日期时间
            </summary>
            <param name="dateTime1">日期时间</param>
            <param name="dateMode">显示模式</param>
            <returns>0-9种模式的日期</returns>
        </member>
        <member name="M:DotNet.Utilities.Tools.GetRandomTime(System.DateTime,System.DateTime)">
            <summary>
            得到随机日期
            </summary>
            <param name="time1">起始日期</param>
            <param name="time2">结束日期</param>
            <returns>间隔日期之间的 随机日期</returns>
        </member>
        <member name="M:DotNet.Utilities.Tools.HtmlToTxt(System.String)">
            <summary>
            HTML转行成TEXT
            </summary>
            <param name="strHtml"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.Tools.IsNullOrEmpty``1(``0)">
            <summary>
            判断对象是否为空，为空返回true
            </summary>
            <typeparam name="T">要验证的对象的类型</typeparam>
            <param name="data">要验证的对象</param>        
        </member>
        <member name="M:DotNet.Utilities.Tools.IsNullOrEmpty(System.Object)">
            <summary>
            判断对象是否为空，为空返回true
            </summary>
            <param name="data">要验证的对象</param>
        </member>
        <member name="M:DotNet.Utilities.Tools.IsIP(System.String)">
            <summary>
            验证IP地址是否合法
            </summary>
            <param name="ip">要验证的IP地址</param>        
        </member>
        <member name="M:DotNet.Utilities.Tools.IsEmail(System.String)">
            <summary>
            验证EMail是否合法
            </summary>
            <param name="email">要验证的Email</param>
        </member>
        <member name="M:DotNet.Utilities.Tools.IsInt(System.String)">
            <summary>
            验证是否为整数 如果为空，认为验证不合格 返回false
            </summary>
            <param name="number">要验证的整数</param>        
        </member>
        <member name="M:DotNet.Utilities.Tools.IsNumber(System.String)">
            <summary>
            验证是否为数字
            </summary>
            <param name="number">要验证的数字</param>        
        </member>
        <member name="M:DotNet.Utilities.Tools.IsDate(System.String@)">
            <summary>
            验证日期是否合法,对不规则的作了简单处理
            </summary>
            <param name="date">日期</param>
        </member>
        <member name="M:DotNet.Utilities.Tools.IsIdCard(System.String)">
            <summary>
            验证身份证是否合法
            </summary>
            <param name="idCard">要验证的身份证</param>        
        </member>
        <member name="M:DotNet.Utilities.Tools.IsValidInput(System.String@)">
            <summary>
            检测客户输入的字符串是否有效,并将原始字符串修改为有效字符串或空字符串。
            当检测到客户的输入中有攻击性危险字符串,则返回false,有效返回true。
            </summary>
            <param name="input">要检测的字符串</param>
        </member>
        <member name="T:DotNet.Utilities.ValidateImg">
            <summary>
            验证码 继承 System.Web.UI.Page ，Session["xk_validate_code"]
            </summary>
        </member>
        <member name="M:DotNet.Utilities.ValidateImg.CreateImage(System.String)">
            <summary>
            创建图片
            </summary>
            <param name="checkCode"></param>
        </member>
        <member name="T:DotNet.Utilities.WebSitePathHelper">
            <summary>
            网站路径操作类
            </summary>
        </member>
        <member name="T:DotNet.Utilities.WebSitePathHelper.SortType">
            <summary>
            
            </summary>
        </member>
        <member name="F:DotNet.Utilities.WebSitePathHelper.SortType.Photo">
            <summary>
            
            </summary>
        </member>
        <member name="F:DotNet.Utilities.WebSitePathHelper.SortType.Article">
            <summary>
            
            </summary>
        </member>
        <member name="F:DotNet.Utilities.WebSitePathHelper.SortType.Diary">
            <summary>
            
            </summary>
        </member>
        <member name="F:DotNet.Utilities.WebSitePathHelper.SortType.Pic">
            <summary>
            
            </summary>
        </member>
        <member name="F:DotNet.Utilities.WebSitePathHelper.SortType.Music">
            <summary>
            
            </summary>
        </member>
        <member name="F:DotNet.Utilities.WebSitePathHelper.SortType.AddressList">
            <summary>
            
            </summary>
        </member>
        <member name="F:DotNet.Utilities.WebSitePathHelper.SortType.Favorite">
            <summary>
            
            </summary>
        </member>
        <member name="M:DotNet.Utilities.WebSitePathHelper.GetWebPath(System.String)">
            <summary>
            根据给出的相对地址获取网站绝对地址
            </summary>
            <param name="localPath">相对地址</param>
            <returns>绝对地址</returns>
        </member>
        <member name="M:DotNet.Utilities.WebSitePathHelper.GetWebPath">
            <summary>
             获取网站绝对地址
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.WebSitePathHelper.GetFilePath(System.String)">
            <summary>
            根据相对路径或绝对路径获取绝对路径
            </summary>
            <param name="localPath">相对路径或绝对路径</param>
            <returns>绝对路径</returns>
        </member>
        <member name="T:DotNet.Utilities.XmlHelper">
            <summary>
            Xml的操作公共类
            </summary>    
        </member>
        <member name="F:DotNet.Utilities.XmlHelper._filePath">
            <summary>
            XML文件的物理路径
            </summary>
        </member>
        <member name="F:DotNet.Utilities.XmlHelper._xml">
            <summary>
            Xml文档
            </summary>
        </member>
        <member name="F:DotNet.Utilities.XmlHelper._element">
            <summary>
            XML的根节点
            </summary>
        </member>
        <member name="M:DotNet.Utilities.XmlHelper.#ctor(System.String)">
            <summary>
            实例化XmlHelper对象
            </summary>
            <param name="xmlFilePath">Xml文件的相对路径</param>
        </member>
        <member name="M:DotNet.Utilities.XmlHelper.CreateXMLElement">
            <summary>
            创建XML的根节点
            </summary>
        </member>
        <member name="M:DotNet.Utilities.XmlHelper.GetNode(System.String)">
            <summary>
            获取指定XPath表达式的节点对象
            </summary>        
            <param name="xPath">XPath表达式,
            范例1: @"Skill/First/SkillItem", 等效于 @"//Skill/First/SkillItem"
            范例2: @"Table[USERNAME='a']" , []表示筛选,USERNAME是Table下的一个子节点.
            范例3: @"ApplyPost/Item[@itemName='岗位编号']",@itemName是Item节点的属性.
            </param>
        </member>
        <member name="M:DotNet.Utilities.XmlHelper.GetValue(System.String)">
            <summary>
            获取指定XPath表达式节点的值
            </summary>
            <param name="xPath">XPath表达式,
            范例1: @"Skill/First/SkillItem", 等效于 @"//Skill/First/SkillItem"
            范例2: @"Table[USERNAME='a']" , []表示筛选,USERNAME是Table下的一个子节点.
            范例3: @"ApplyPost/Item[@itemName='岗位编号']",@itemName是Item节点的属性.
            </param>
        </member>
        <member name="M:DotNet.Utilities.XmlHelper.GetAttributeValue(System.String,System.String)">
            <summary>
            获取指定XPath表达式节点的属性值
            </summary>
            <param name="xPath">XPath表达式,
            范例1: @"Skill/First/SkillItem", 等效于 @"//Skill/First/SkillItem"
            范例2: @"Table[USERNAME='a']" , []表示筛选,USERNAME是Table下的一个子节点.
            范例3: @"ApplyPost/Item[@itemName='岗位编号']",@itemName是Item节点的属性.
            </param>
            <param name="attributeName">属性名</param>
        </member>
        <member name="M:DotNet.Utilities.XmlHelper.AppendNode(System.Xml.XmlNode)">
            <summary>
            1. 功能：新增节点。
            2. 使用条件：将任意节点插入到当前Xml文件中。
            </summary>        
            <param name="xmlNode">要插入的Xml节点</param>
        </member>
        <member name="M:DotNet.Utilities.XmlHelper.AppendNode(System.Data.DataSet)">
            <summary>
            1. 功能：新增节点。
            2. 使用条件：将DataSet中的第一条记录插入Xml文件中。
            </summary>        
            <param name="ds">DataSet的实例，该DataSet中应该只有一条记录</param>
        </member>
        <member name="M:DotNet.Utilities.XmlHelper.RemoveNode(System.String)">
            <summary>
            删除指定XPath表达式的节点
            </summary>        
            <param name="xPath">XPath表达式,
            范例1: @"Skill/First/SkillItem", 等效于 @"//Skill/First/SkillItem"
            范例2: @"Table[USERNAME='a']" , []表示筛选,USERNAME是Table下的一个子节点.
            范例3: @"ApplyPost/Item[@itemName='岗位编号']",@itemName是Item节点的属性.
            </param>
        </member>
        <member name="M:DotNet.Utilities.XmlHelper.Save">
            <summary>
            保存XML文件
            </summary>        
        </member>
        <member name="M:DotNet.Utilities.XmlHelper.CreateRootElement(System.String)">
            <summary>
            创建根节点对象
            </summary>
            <param name="xmlFilePath">Xml文件的相对路径</param>        
        </member>
        <member name="M:DotNet.Utilities.XmlHelper.GetValue(System.String,System.String)">
            <summary>
            获取指定XPath表达式节点的值
            </summary>
            <param name="xmlFilePath">Xml文件的相对路径</param>
            <param name="xPath">XPath表达式,
            范例1: @"Skill/First/SkillItem", 等效于 @"//Skill/First/SkillItem"
            范例2: @"Table[USERNAME='a']" , []表示筛选,USERNAME是Table下的一个子节点.
            范例3: @"ApplyPost/Item[@itemName='岗位编号']",@itemName是Item节点的属性.
            </param>
        </member>
        <member name="M:DotNet.Utilities.XmlHelper.GetAttributeValue(System.String,System.String,System.String)">
            <summary>
            获取指定XPath表达式节点的属性值
            </summary>
            <param name="xmlFilePath">Xml文件的相对路径</param>
            <param name="xPath">XPath表达式,
            范例1: @"Skill/First/SkillItem", 等效于 @"//Skill/First/SkillItem"
            范例2: @"Table[USERNAME='a']" , []表示筛选,USERNAME是Table下的一个子节点.
            范例3: @"ApplyPost/Item[@itemName='岗位编号']",@itemName是Item节点的属性.
            </param>
            <param name="attributeName">属性名</param>
        </member>
        <member name="M:DotNet.Utilities.XMLProcess.XMLLoad">
            <summary>
            导入XML文件
            </summary>
            <param name="XMLPath">XML文件路径</param>
        </member>
        <member name="M:DotNet.Utilities.XMLProcess.XMLLoad(System.String)">
            <summary>
            导入XML文件
            </summary>
            <param name="XMLPath">XML文件路径</param>
        </member>
        <member name="M:DotNet.Utilities.XMLProcess.GetXmlFullPath(System.String)">
            <summary>
            返回完整路径
            </summary>
            <param name="strPath">Xml的路径</param>
        </member>
        <member name="M:DotNet.Utilities.XMLProcess.Read(System.String)">
            <summary>
            读取指定节点的数据
            </summary>
            <param name="node">节点</param>
            使用示列:
            XMLProsess.Read("/Node", "")
            XMLProsess.Read("/Node/Element[@Attribute='Name']")
        </member>
        <member name="M:DotNet.Utilities.XMLProcess.Read(System.String,System.String)">
            <summary>
            读取指定路径和节点的串联值
            </summary>
            <param name="path">路径</param>
            <param name="node">节点</param>
            <param name="attribute">属性名，非空时返回该属性值，否则返回串联值</param>
            使用示列:
            XMLProsess.Read(path, "/Node", "")
            XMLProsess.Read(path, "/Node/Element[@Attribute='Name']")
        </member>
        <member name="M:DotNet.Utilities.XMLProcess.Read(System.String,System.String,System.String)">
            <summary>
            读取指定路径和节点的属性值
            </summary>
            <param name="path">路径</param>
            <param name="node">节点</param>
            <param name="attribute">属性名，非空时返回该属性值，否则返回串联值</param>
            使用示列:
            XMLProsess.Read(path, "/Node", "")
            XMLProsess.Read(path, "/Node/Element[@Attribute='Name']", "Attribute")
        </member>
        <member name="M:DotNet.Utilities.XMLProcess.ReadAllChildallValue(System.String)">
            <summary>
            获取某一节点的所有孩子节点的值
            </summary>
            <param name="node">要查询的节点</param>
        </member>
        <member name="M:DotNet.Utilities.XMLProcess.ReadAllChild(System.String)">
            <summary>
            获取某一节点的所有孩子节点的值
            </summary>
            <param name="node">要查询的节点</param>
        </member>
        <member name="M:DotNet.Utilities.XMLProcess.GetDataViewByXml(System.String,System.String)">
            <summary> 
            读取XML返回经排序或筛选后的DataView
            </summary>
            <param name="strWhere">筛选条件，如:"name='kgdiwss'"</param>
            <param name="strSort"> 排序条件，如:"Id desc"</param>
        </member>
        <member name="M:DotNet.Utilities.XMLProcess.GetDataSetByXml(System.String)">
            <summary>
            读取XML返回DataSet
            </summary>
            <param name="strXmlPath">XML文件相对路径</param>
        </member>
        <member name="M:DotNet.Utilities.XMLProcess.Insert(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            插入数据
            </summary>
            <param name="path">路径</param>
            <param name="node">节点</param>
            <param name="element">元素名，非空时插入新元素，否则在该元素中插入属性</param>
            <param name="attribute">属性名，非空时插入该元素属性值，否则插入元素值</param>
            <param name="value">值</param>
            使用示列:
            XMLProsess.Insert(path, "/Node", "Element", "", "Value")
            XMLProsess.Insert(path, "/Node", "Element", "Attribute", "Value")
            XMLProsess.Insert(path, "/Node", "", "Attribute", "Value")
        </member>
        <member name="M:DotNet.Utilities.XMLProcess.Insert(System.String,System.String,System.String,System.String[][])">
            <summary>
            插入数据
            </summary>
            <param name="path">路径</param>
            <param name="node">节点</param>
            <param name="element">元素名，非空时插入新元素，否则在该元素中插入属性</param>
            <param name="strList">由XML属性名和值组成的二维数组</param>
        </member>
        <member name="M:DotNet.Utilities.XMLProcess.WriteXmlByDataSet(System.String,System.String[],System.String[])">
            <summary>
            插入一行数据
            </summary>
            <param name="strXmlPath">XML文件相对路径</param>
            <param name="Columns">要插入行的列名数组，如：string[] Columns = {"name","IsMarried"};</param>
            <param name="ColumnValue">要插入行每列的值数组，如：string[] ColumnValue={"XML大全","false"};</param>
            <returns>成功返回true,否则返回false</returns>
        </member>
        <member name="M:DotNet.Utilities.XMLProcess.Update(System.String,System.String)">
            <summary>
            修改指定节点的数据
            </summary>
            <param name="node">节点</param>
            <param name="value">值</param>
        </member>
        <member name="M:DotNet.Utilities.XMLProcess.Update(System.String,System.String,System.String)">
            <summary>
            修改指定节点的数据
            </summary>
            <param name="path">路径</param>
            <param name="node">节点</param>
            <param name="value">值</param>
            使用示列:
            XMLProsess.Insert(path, "/Node","Value")
            XMLProsess.Insert(path, "/Node","Value")
        </member>
        <member name="M:DotNet.Utilities.XMLProcess.Update(System.String,System.String,System.String,System.String)">
            <summary>
            修改指定节点的属性值(静态)
            </summary>
            <param name="path">路径</param>
            <param name="node">节点</param>
            <param name="attribute">属性名，非空时修改该节点属性值，否则修改节点值</param>
            <param name="value">值</param>
            使用示列:
            XMLProsess.Insert(path, "/Node", "", "Value")
            XMLProsess.Insert(path, "/Node", "Attribute", "Value")
        </member>
        <member name="M:DotNet.Utilities.XMLProcess.UpdateXmlRow(System.String,System.String[],System.String[],System.String,System.String)">
            <summary>
            更改符合条件的一条记录
            </summary>
            <param name="strXmlPath">XML文件路径</param>
            <param name="Columns">列名数组</param>
            <param name="ColumnValue">列值数组</param>
            <param name="strWhereColumnName">条件列名</param>
            <param name="strWhereColumnValue">条件列值</param>
        </member>
        <member name="M:DotNet.Utilities.XMLProcess.Delete(System.String,System.String)">
            <summary>
            删除节点值
            </summary>
            <param name="path">路径</param>
            <param name="node">节点</param>
            <param name="attribute">属性名，非空时删除该节点属性值，否则删除节点值</param>
            <param name="value">值</param>
            使用示列:
            XMLProsess.Delete(path, "/Node", "")
            XMLProsess.Delete(path, "/Node", "Attribute")
        </member>
        <member name="M:DotNet.Utilities.XMLProcess.Delete(System.String,System.String,System.String)">
            <summary>
            删除数据
            </summary>
            <param name="path">路径</param>
            <param name="node">节点</param>
            <param name="attribute">属性名，非空时删除该节点属性值，否则删除节点值</param>
            <param name="value">值</param>
            使用示列:
            XMLProsess.Delete(path, "/Node", "")
            XMLProsess.Delete(path, "/Node", "Attribute")
        </member>
        <member name="M:DotNet.Utilities.XMLProcess.DeleteXmlAllRows(System.String)">
            <summary>
            删除所有行
            </summary>
            <param name="strXmlPath">XML路径</param>
        </member>
        <member name="M:DotNet.Utilities.XMLProcess.DeleteXmlRowByIndex(System.String,System.Int32)">
            <summary>
            通过删除DataSet中指定索引行，重写XML以实现删除指定行
            </summary>
            <param name="iDeleteRow">要删除的行在DataSet中的Index值</param>
        </member>
        <member name="M:DotNet.Utilities.XMLProcess.DeleteXmlRows(System.String,System.String,System.String[])">
            <summary>
            删除指定列中指定值的行
            </summary>
            <param name="strXmlPath">XML相对路径</param>
            <param name="strColumn">列名</param>
            <param name="ColumnValue">指定值</param>
        </member>
        <member name="T:DotNet.Utilities.FileDown">
            <summary>
            文件下载类
            </summary>
        </member>
        <member name="M:DotNet.Utilities.FileDown.FileNameExtension(System.String)">
            <summary>
            参数为虚拟路径
            </summary>
        </member>
        <member name="M:DotNet.Utilities.FileDown.MapPathFile(System.String)">
            <summary>
            获取物理地址
            </summary>
        </member>
        <member name="M:DotNet.Utilities.FileDown.DownLoadold(System.String)">
            <summary>
            普通下载
            </summary>
            <param name="FileName">文件虚拟路径</param>
        </member>
        <member name="M:DotNet.Utilities.FileDown.DownLoad(System.String)">
            <summary>
            分块下载
            </summary>
            <param name="FileName">文件虚拟路径</param>
        </member>
        <member name="M:DotNet.Utilities.FileDown.ResponseFile(System.Web.HttpRequest,System.Web.HttpResponse,System.String,System.String,System.Int64)">
            <summary>
             输出硬盘文件，提供下载 支持大文件、续传、速度限制、资源占用小
            </summary>
            <param name="_Request">Page.Request对象</param>
            <param name="_Response">Page.Response对象</param>
            <param name="_fileName">下载文件名</param>
            <param name="_fullPath">带文件名下载路径</param>
            <param name="_speed">每秒允许下载的字节数</param>
            <returns>返回是否成功</returns>
        </member>
        <member name="T:DotNet.Utilities.FileUp">
            <summary>
            文件上传类
            </summary>
        </member>
        <member name="M:DotNet.Utilities.FileUp.GetBinaryFile(System.String)">
            <summary>
            转换为字节数组
            </summary>
            <param name="filename">文件名</param>
            <returns>字节数组</returns>
        </member>
        <member name="M:DotNet.Utilities.FileUp.ConvertStreamToByteBuffer(System.IO.Stream)">
            <summary>
            流转化为字节数组
            </summary>
            <param name="theStream">流</param>
            <returns>字节数组</returns>
        </member>
        <member name="M:DotNet.Utilities.FileUp.FileSc(System.Web.UI.WebControls.FileUpload,System.String,System.String)">
            <summary>
            上传文件
            </summary>
            <param name="PosPhotoUpload">控件</param>
            <param name="saveFileName">保存的文件名</param>
            <param name="imagePath">保存的文件路径</param>
        </member>
        <member name="M:DotNet.Utilities.FileUp.SaveFile(System.Byte[],System.String,System.String)">
            <summary>
            上传文件
            </summary>
            <param name="binData">字节数组</param>
            <param name="fileName">文件名</param>
            <param name="fileType">文件类型</param>
        </member>
        <member name="T:DotNet.Utilities.SegList">
            <summary>
            ·Ö´Ê¸¨ÖúÀà
            </summary>
        </member>
        <member name="M:DotNet.Utilities.SegList.Sort">
            <summary>
            °´³¤¶ÈÅÅÐò
            </summary>
        </member>
        <member name="M:DotNet.Utilities.SegList.Sort(DotNet.Utilities.SegList)">
            <summary>
            °´³¤¶ÈÅÅÐò
            </summary>
        </member>
        <member name="T:DotNet.Utilities.Segment">
            <summary>
            ·Ö´ÊÀà
            </summary>
        </member>
        <member name="F:DotNet.Utilities.Segment.m_Separator">
            <summary>
            ·Ö¸ô·û
            </summary>
        </member>
        <member name="F:DotNet.Utilities.Segment.strChinese">
            <summary>
            ÓÃÓÚÑéÖ¤ºº×ÖµÄÕýÔò±í´ïÊ½
            </summary>
        </member>
        <member name="P:DotNet.Utilities.Segment.DicPath">
            <summary>
            »ù±¾´ÊµäÂ·¾¶
            </summary>
        </member>
        <member name="M:DotNet.Utilities.Segment.SetCache(System.String,System.Object)">
            <summary>
            Êý¾Ý»º´æº¯Êý
            </summary>
            <param name="key">Ë÷Òý¼ü</param>
            <param name="val">»º´æµÄÊý¾Ý</param>
        </member>
        <member name="M:DotNet.Utilities.Segment.GetCache(System.String)">
            <summary>
            ¶ÁÈ¡»º´æ
            </summary>
        </member>
        <member name="P:DotNet.Utilities.Segment.NoisePath">
            <summary>
            ÔÝÊ±ÎÞÓÃ
            </summary>
        </member>
        <member name="P:DotNet.Utilities.Segment.NumberPath">
            <summary>
            Êý×Ö´ÊµäÂ·¾¶
            </summary>
        </member>
        <member name="P:DotNet.Utilities.Segment.WordPath">
            <summary>
            ×ÖÄ¸´ÊµäÂ·¾¶
            </summary>
        </member>
        <member name="P:DotNet.Utilities.Segment.PrefixPath">
            <summary>
            ÐÕÃûÇ°×º×Öµä ÓÃÓÚ¾À´íÐÕÃû
            </summary>
        </member>
        <member name="P:DotNet.Utilities.Segment.EnablePrefix">
            <summary>
            ÊÇ·ñ¿ªÆôÐÕÃû¾À´í¹¦ÄÜ
            </summary>
        </member>
        <member name="P:DotNet.Utilities.Segment.EventTime">
            <summary>
            ÓÃÊ±Ã¿´Î½øÐÐ¼ÓÔØ»ò·Ö´Ê¶¯×÷ºó¸ÄÊôÐÔ±íÊ¾ÎªÉÏÒ»´Î¶¯×÷ËùÓÃÊ±¼ä
            ÒÑ¾«È·µ½ºÁÃëµ«·Ö´Ê²Ù×÷ÔÚ×Ö·û´®½Ï¶ÌÊ±¿ÉÄÜÎª0
            </summary>
        </member>
        <member name="P:DotNet.Utilities.Segment.Separator">
            <summary>
            ·Ö¸ô·û,Ä¬ÈÏÎª¿Õ¸ñ
            </summary>
        </member>
        <member name="M:DotNet.Utilities.Segment.#ctor">
            <summary>
            ¹¹Ôì·½·¨
            </summary>
        </member>
        <member name="M:DotNet.Utilities.Segment.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            ¹¹Ôì·½·¨
            </summary>
        </member>
        <member name="M:DotNet.Utilities.Segment.InitWordDics">
            <summary>
            ¼ÓÔØ´ÊÁÐ±í
            </summary>
        </member>
        <member name="M:DotNet.Utilities.Segment.LoadWords(System.String,System.Collections.ArrayList)">
            <summary>
            ¼ÓÔØÎÄ±¾´Ê×éµ½ArrayList
            </summary>
        </member>
        <member name="M:DotNet.Utilities.Segment.OutWords">
            <summary>
            Êä³ö´ÊÁÐ±í
            </summary>
        </member>
        <member name="M:DotNet.Utilities.Segment.OutArrayList(System.Collections.ArrayList)">
            <summary>
            Êä³öArrayList
            </summary>
        </member>
        <member name="M:DotNet.Utilities.Segment.SegmentText(System.String)">
            <summary>
            ·Ö´Ê¹ý³Ì,²»Ö§³Ö»Ø³µ 
            </summary>
            <param name="strText">Òª·Ö´ÊµÄÎÄ±¾</param>
            <returns>·Ö´ÊºóµÄÎÄ±¾</returns>
        </member>
        <member name="M:DotNet.Utilities.Segment.SegmentText(System.String,System.Boolean)">
            <summary>
            ÖØÔØ·Ö´Ê¹ý³Ì,Ö§³Ö»Ø³µ
            </summary>
        </member>
        <member name="M:DotNet.Utilities.Segment.GetCharType(System.String)">
            <summary>
            ÅÐ¶Ï×Ö·ûÀàÐÍ,0ÎªÎ´Öª,1ÎªÊý×Ö,2Îª×ÖÄ¸,3Îªºº×Ö,4Îªºº×ÖÊý×Ö
            </summary>
        </member>
        <member name="M:DotNet.Utilities.Segment.SortDic">
            <summary>
            ¶Ô¼ÓÔØµÄ´ÊµäÅÅÐò²¢ÖØÐÂÐ´Èë
            </summary>
        </member>
        <member name="M:DotNet.Utilities.Segment.SortDic(System.Boolean)">
            <summary>
            ¶Ô¼ÓÔØµÄ´ÊµäÅÅÐò²¢ÖØÐÂÐ´Èë
            </summary>
            <param name="Reload">ÊÇ·ñÖØÐÂ¼ÓÔØ</param>
        </member>
        <member name="M:DotNet.Utilities.Segment.Optimize">
            <summary>
            É¾³ýÁ½ÐÐÍêÈ«ÏàÍ¬µÄ´Ê,ÔÝÊ±ÎÞÓÃ!
            </summary>
            <returns>ÏàÍ¬´ÊÌõ¸öÊý</returns>
        </member>
        <member name="M:DotNet.Utilities.SharpZip.PackFiles(System.String,System.String)">
            <summary>
            压缩
            </summary> 
            <param name="filename"> 压缩后的文件名(包含物理路径)</param>
            <param name="directory">待压缩的文件夹(包含物理路径)</param>
        </member>
        <member name="M:DotNet.Utilities.SharpZip.UnpackFiles(System.String,System.String)">
            <summary>
            解压缩
            </summary>
            <param name="file">待解压文件名(包含物理路径)</param>
            <param name="dir"> 解压到哪个目录中(包含物理路径)</param>
        </member>
        <member name="M:DotNet.Utilities.ClassZip.ZipFileDictory(System.String,ICSharpCode.SharpZipLib.Zip.ZipOutputStream,System.String)">
            <summary>
            递归压缩文件夹方法
            </summary>
        </member>
        <member name="M:DotNet.Utilities.ClassZip.ZipFileDictory(System.String,System.String,System.Int32)">
            <summary>
            压缩目录
            </summary>
            <param name="FolderToZip">待压缩的文件夹，全路径格式</param>
            <param name="ZipedFile">压缩后的文件名，全路径格式</param>
        </member>
        <member name="M:DotNet.Utilities.ClassZip.ZipFile(System.String,System.String,System.Int32)">
            <summary>
            压缩文件
            </summary>
            <param name="FileToZip">要进行压缩的文件名</param>
            <param name="ZipedFile">压缩后生成的压缩文件名</param>
        </member>
        <member name="M:DotNet.Utilities.ClassZip.Zip(System.String,System.String,System.Int32)">
            <summary>
            压缩
            </summary>
            <param name="FileToZip">待压缩的文件目录</param>
            <param name="ZipedFile">生成的目标文件</param>
            <param name="level">6</param>
        </member>
        <member name="M:DotNet.Utilities.ClassZip.UnZip(System.String,System.String)">
            <summary>
            解压
            </summary>
            <param name="FileToUpZip">待解压的文件</param>
            <param name="ZipedFolder">解压目标存放目录</param>
        </member>
        <member name="M:DotNet.Utilities.ZipHelper.EnZip(System.String,System.String,System.String)">
            <summary>
            压缩
            </summary>
            <param name="zipname">要解压的文件名</param>
            <param name="zippath">要压缩的文件目录</param>
            <param name="dirpath">初始目录</param>
        </member>
        <member name="M:DotNet.Utilities.ZipHelper.DeZip(System.String,System.String)">
            <summary>
            解压缩
            </summary>
            <param name="zipname">要解压的文件名</param>
            <param name="zippath">要解压的文件路径</param>
        </member>
        <member name="M:DotNet.Utilities.ImageClass.MakeThumbnail(System.String,System.String,System.Int32,System.Int32,System.String)">
            <summary>
            生成缩略图
            </summary>
            <param name="originalImagePath">源图路径（物理路径）</param>
            <param name="thumbnailPath">缩略图路径（物理路径）</param>
            <param name="width">缩略图宽度</param>
            <param name="height">缩略图高度</param>
            <param name="mode">生成缩略图的方式</param>    
        </member>
        <member name="M:DotNet.Utilities.ImageClass.ImageWatermark(System.String,System.String,System.String)">
            <summary>
            图片水印处理方法
            </summary>
            <param name="path">需要加载水印的图片路径（绝对路径）</param>
            <param name="waterpath">水印图片（绝对路径）</param>
            <param name="location">水印位置（传送正确的代码）</param>
        </member>
        <member name="M:DotNet.Utilities.ImageClass.GetLocation(System.String,System.Drawing.Image,System.Drawing.Image)">
            <summary>
            图片水印位置处理方法
            </summary>
            <param name="location">水印位置</param>
            <param name="img">需要添加水印的图片</param>
            <param name="waterimg">水印图片</param>
        </member>
        <member name="M:DotNet.Utilities.ImageClass.LetterWatermark(System.String,System.Int32,System.String,System.Drawing.Color,System.String)">
            <summary>
            文字水印处理方法
            </summary>
            <param name="path">图片路径（绝对路径）</param>
            <param name="size">字体大小</param>
            <param name="letter">水印文字</param>
            <param name="color">颜色</param>
            <param name="location">水印位置</param>
        </member>
        <member name="M:DotNet.Utilities.ImageClass.GetLocation(System.String,System.Drawing.Image,System.Int32,System.Int32)">
            <summary>
            文字水印位置的方法
            </summary>
            <param name="location">位置代码</param>
            <param name="img">图片对象</param>
            <param name="width">宽(当水印类型为文字时,传过来的就是字体的大小)</param>
            <param name="height">高(当水印类型为文字时,传过来的就是字符的长度)</param>
        </member>
        <member name="M:DotNet.Utilities.ImageClass.LDPic(System.Drawing.Bitmap,System.Int32,System.Int32,System.Int32)">
            <summary>
            调整光暗
            </summary>
            <param name="mybm">原始图片</param>
            <param name="width">原始图片的长度</param>
            <param name="height">原始图片的高度</param>
            <param name="val">增加或减少的光暗值</param>
        </member>
        <member name="M:DotNet.Utilities.ImageClass.RePic(System.Drawing.Bitmap,System.Int32,System.Int32)">
            <summary>
            反色处理
            </summary>
            <param name="mybm">原始图片</param>
            <param name="width">原始图片的长度</param>
            <param name="height">原始图片的高度</param>
        </member>
        <member name="M:DotNet.Utilities.ImageClass.FD(System.Drawing.Bitmap,System.Int32,System.Int32)">
            <summary>
            浮雕处理
            </summary>
            <param name="oldBitmap">原始图片</param>
            <param name="Width">原始图片的长度</param>
            <param name="Height">原始图片的高度</param>
        </member>
        <member name="M:DotNet.Utilities.ImageClass.ResizeImage(System.Drawing.Bitmap,System.Int32,System.Int32)">
            <summary>
            拉伸图片
            </summary>
            <param name="bmp">原始图片</param>
            <param name="newW">新的宽度</param>
            <param name="newH">新的高度</param>
        </member>
        <member name="M:DotNet.Utilities.ImageClass.FilPic(System.Drawing.Bitmap,System.Int32,System.Int32)">
            <summary>
            滤色处理
            </summary>
            <param name="mybm">原始图片</param>
            <param name="width">原始图片的长度</param>
            <param name="height">原始图片的高度</param>
        </member>
        <member name="M:DotNet.Utilities.ImageClass.RevPicLR(System.Drawing.Bitmap,System.Int32,System.Int32)">
            <summary>
            左右翻转
            </summary>
            <param name="mybm">原始图片</param>
            <param name="width">原始图片的长度</param>
            <param name="height">原始图片的高度</param>
        </member>
        <member name="M:DotNet.Utilities.ImageClass.RevPicUD(System.Drawing.Bitmap,System.Int32,System.Int32)">
            <summary>
            上下翻转
            </summary>
            <param name="mybm">原始图片</param>
            <param name="width">原始图片的长度</param>
            <param name="height">原始图片的高度</param>
        </member>
        <member name="M:DotNet.Utilities.ImageClass.Compress(System.String,System.String)">
            <summary>
            压缩到指定尺寸
            </summary>
            <param name="oldfile">原文件</param>
            <param name="newfile">新文件</param>
        </member>
        <member name="M:DotNet.Utilities.ImageClass.Compress(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            压缩指定尺寸，如果写的和图片大家一样表示大小不变，只是把图片压缩下一些
            </summary>
            <param name="oldfile">原文件</param>
            <param name="newfile">新文件</param>
            <param name="width">长</param>
            <param name="height">高</param>
        </member>
        <member name="M:DotNet.Utilities.ImageClass.BWPic(System.Drawing.Bitmap,System.Int32,System.Int32)">
            <summary>
            转换为黑白图片
            </summary>
            <param name="mybt">要进行处理的图片</param>
            <param name="width">图片的长度</param>
            <param name="height">图片的高度</param>
        </member>
        <member name="M:DotNet.Utilities.ImageClass.GetFrames(System.String,System.String)">
            <summary>
            获取图片中的各帧
            </summary>
            <param name="pPath">图片路径</param>
            <param name="pSavePath">保存路径</param>
        </member>
        <member name="T:DotNet.Utilities.ImageDown">
            <summary>
            图片下载
            </summary>
        </member>
        <member name="M:DotNet.Utilities.ImageDown.GetImgTag(System.String)">
            <summary>
            获取图片标志
            </summary>
        </member>
        <member name="M:DotNet.Utilities.ImageDown.GetImgUrl(System.String)">
            <summary>
            获取图片URL地址
            </summary>
        </member>
        <member name="M:DotNet.Utilities.ImageDown.SaveUrlPics(System.String,System.String)">
            <summary>
            下载图片到本地
            </summary>
            <param name="strHTML">HTML</param>
            <param name="path">路径</param>
            <param name="nowyymm">年月</param>
            <param name="nowdd">日</param>
        </member>
        <member name="T:DotNet.Utilities.FileExtension">
            <summary>
            文件类型
            </summary>
        </member>
        <member name="T:DotNet.Utilities.FileValidation">
            <summary>
            图片检测类
            </summary>
        </member>
        <member name="M:DotNet.Utilities.FileValidation.IsAllowedExtension(System.Web.HttpPostedFile,DotNet.Utilities.FileExtension[])">
            <summary>
            是否允许
            </summary>
        </member>
        <member name="M:DotNet.Utilities.FileValidation.IsSecureUploadPhoto(System.Web.HttpPostedFile)">
            <summary>
            上传前的图片是否可靠
            </summary>
        </member>
        <member name="M:DotNet.Utilities.FileValidation.IsSecureUpfilePhoto(System.String)">
            <summary>
            上传后的图片是否安全
            </summary>
            <param name="photoFile">物理地址</param>
        </member>
        <member name="T:DotNet.Utilities.ImageUpload">
            <summary>
            图片上传类
            </summary>
        </member>
        <member name="P:DotNet.Utilities.ImageUpload.Error">
            <summary>
            Error返回值
            1、没有上传的文件
            2、类型不允许
            3、大小超限
            4、未知错误
            0、上传成功。 
            </summary>
        </member>
        <member name="P:DotNet.Utilities.ImageUpload.MaxSize">
            <summary>
            最大单个上传文件
            </summary>
        </member>
        <member name="P:DotNet.Utilities.ImageUpload.FileType">
            <summary>
            所支持的上传类型用";"隔开 
            </summary>
        </member>
        <member name="P:DotNet.Utilities.ImageUpload.SavePath">
            <summary>
            保存文件的实际路径 
            </summary>
        </member>
        <member name="P:DotNet.Utilities.ImageUpload.SaveType">
            <summary>
            上传文件的类型，0代表自动生成文件名
            </summary>
        </member>
        <member name="P:DotNet.Utilities.ImageUpload.FormFile">
            <summary>
            上传控件
            </summary>
        </member>
        <member name="P:DotNet.Utilities.ImageUpload.InFileName">
            <summary>
            非自动生成文件名设置。
            </summary>
        </member>
        <member name="P:DotNet.Utilities.ImageUpload.OutFileName">
            <summary>
            输出文件名
            </summary>
        </member>
        <member name="P:DotNet.Utilities.ImageUpload.OutThumbFileName">
            <summary>
            输出的缩略图文件名
            </summary>
        </member>
        <member name="P:DotNet.Utilities.ImageUpload.Iss">
            <summary>
            是否有缩略图生成.
            </summary>
        </member>
        <member name="P:DotNet.Utilities.ImageUpload.Width">
            <summary>
            获取上传图片的宽度
            </summary>
        </member>
        <member name="P:DotNet.Utilities.ImageUpload.Height">
            <summary>
            获取上传图片的高度
            </summary>
        </member>
        <member name="P:DotNet.Utilities.ImageUpload.sWidth">
            <summary>
            设置缩略图的宽度
            </summary>
        </member>
        <member name="P:DotNet.Utilities.ImageUpload.sHeight">
            <summary>
            设置缩略图的高度
            </summary>
        </member>
        <member name="P:DotNet.Utilities.ImageUpload.IsCreateImg">
            <summary>
            是否生成缩略图
            </summary>
        </member>
        <member name="P:DotNet.Utilities.ImageUpload.IsDraw">
            <summary>
            是否加水印
            </summary>
        </member>
        <member name="P:DotNet.Utilities.ImageUpload.DrawStyle">
            <summary>
            设置加水印的方式
            0:文字水印模式
            1:图片水印模式
            2:不加
            </summary>
        </member>
        <member name="P:DotNet.Utilities.ImageUpload.DrawString_x">
            <summary>
            绘制文本的Ｘ坐标（左上角）
            </summary>
        </member>
        <member name="P:DotNet.Utilities.ImageUpload.DrawString_y">
            <summary>
            绘制文本的Ｙ坐标（左上角）
            </summary>
        </member>
        <member name="P:DotNet.Utilities.ImageUpload.AddText">
            <summary>
            设置文字水印内容
            </summary>
        </member>
        <member name="P:DotNet.Utilities.ImageUpload.Font">
            <summary>
            设置文字水印字体
            </summary>
        </member>
        <member name="P:DotNet.Utilities.ImageUpload.FontSize">
            <summary>
            设置文字水印字的大小
            </summary>
        </member>
        <member name="P:DotNet.Utilities.ImageUpload.FileSize">
            <summary>
            文件大小
            </summary>
        </member>
        <member name="P:DotNet.Utilities.ImageUpload.CopyIamgePath">
            <summary>
            图片水印模式下的覆盖图片的实际地址
            </summary>
        </member>
        <member name="M:DotNet.Utilities.ImageUpload.GetExt(System.String)">
            <summary>
            获取文件的后缀名 
            </summary>
        </member>
        <member name="M:DotNet.Utilities.ImageUpload.FileName(System.String)">
            <summary>
            获取输出文件的文件名
            </summary>
        </member>
        <member name="M:DotNet.Utilities.ImageUpload.IsUpload(System.String)">
            <summary>
            检查上传的文件的类型，是否允许上传。
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:DotNet.Utilities.StringHelper" -->
        <member name="M:DotNet.Utilities.StringHelper.GetStrArray(System.String,System.Char,System.Boolean)">
            <summary>
            把字符串按照分隔符转换成 List
            </summary>
            <param name="str">源字符串</param>
            <param name="speater">分隔符</param>
            <param name="toLower">是否转换为小写</param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.StringHelper.GetStrArray(System.String)">
            <summary>
            把字符串转 按照, 分割 换为数据
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:DotNet.Utilities.StringHelper.GetArrayStr(System.Collections.Generic.List{System.String},System.String)" -->
        <member name="M:DotNet.Utilities.StringHelper.GetArrayStr(System.Collections.Generic.List{System.Int32})">
            <summary>
            得到数组列表以逗号分隔的字符串
            </summary>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.StringHelper.GetArrayValueStr(System.Collections.Generic.Dictionary{System.Int32,System.Int32})">
            <summary>
            得到数组列表以逗号分隔的字符串
            </summary>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.StringHelper.DelLastComma(System.String)">
            <summary>
            删除最后结尾的一个逗号
            </summary>
        </member>
        <member name="M:DotNet.Utilities.StringHelper.DelLastChar(System.String,System.String)">
            <summary>
            删除最后结尾的指定字符后的字符
            </summary>
        </member>
        <member name="M:DotNet.Utilities.StringHelper.ToSBC(System.String)">
            <summary>
            转全角的函数(SBC case)
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.StringHelper.ToDBC(System.String)">
            <summary>
             转半角的函数(SBC case)
            </summary>
            <param name="input">输入</param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.StringHelper.GetSubStringList(System.String,System.Char)">
            <summary>
            把字符串按照指定分隔符装成 List 去除重复
            </summary>
            <param name="o_str"></param>
            <param name="sepeater"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.StringHelper.GetCleanStyle(System.String,System.String)">
            <summary>
             将字符串样式转换为纯字符串
            </summary>
            <param name="StrList"></param>
            <param name="SplitString"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.StringHelper.GetNewStyle(System.String,System.String,System.String,System.String@)">
            <summary>
            将字符串转换为新样式
            </summary>
            <param name="StrList"></param>
            <param name="NewStyle"></param>
            <param name="SplitString"></param>
            <param name="Error"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.StringHelper.SplitMulti(System.String,System.String)">
            <summary>
            分割字符串
            </summary>
            <param name="str"></param>
            <param name="splitstr"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.StringHelper.StrToId(System.String)">
            <summary>
            获取正确的Id，如果不是正整数，返回0
            </summary>
            <param name="_value"></param>
            <returns>返回正确的整数ID，失败返回0</returns>
        </member>
        <member name="M:DotNet.Utilities.StringHelper.IsNumberId(System.String)">
            <summary>
            检查一个字符串是否是纯数字构成的，一般用于查询字符串参数的有效性验证。(0除外)
            </summary>
            <param name="_value">需验证的字符串。。</param>
            <returns>是否合法的bool值。</returns>
        </member>
        <member name="M:DotNet.Utilities.StringHelper.QuickValidate(System.String,System.String)">
            <summary>
            快速验证一个字符串是否符合指定的正则表达式。
            </summary>
            <param name="_express">正则表达式的内容。</param>
            <param name="_value">需验证的字符串。</param>
            <returns>是否合法的bool值。</returns>
        </member>
        <member name="M:DotNet.Utilities.StringHelper.GetMD5(System.String)">
            <summary>
            根据配置对指定字符串进行 MD5 加密
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.StringHelper.StrLength(System.String)">
            <summary>
            得到字符串长度，一个汉字长度为2
            </summary>
            <param name="inputString">参数字符串</param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.StringHelper.ClipString(System.String,System.Int32)">
            <summary>
            截取指定长度字符串
            </summary>
            <param name="inputString">要处理的字符串</param>
            <param name="len">指定长度</param>
            <returns>返回处理后的字符串</returns>
        </member>
        <member name="M:DotNet.Utilities.StringHelper.HtmlToTxt(System.String)">
            <summary>
            HTML转行成TEXT
            </summary>
            <param name="strHtml"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.StringHelper.IsNullOrEmpty``1(``0)">
            <summary>
            判断对象是否为空，为空返回true
            </summary>
            <typeparam name="T">要验证的对象的类型</typeparam>
            <param name="data">要验证的对象</param>        
        </member>
        <member name="M:DotNet.Utilities.StringHelper.IsNullOrEmpty(System.Object)">
            <summary>
            判断对象是否为空，为空返回true
            </summary>
            <param name="data">要验证的对象</param>
        </member>
        <member name="T:DotNet.Utilities.ExcelHelper">
            <summary>
            Excel操作类
            </summary>
            Microsoft Excel 11.0 Object Library
        </member>
        <!-- Badly formed XML comment ignored for member "M:DotNet.Utilities.ExcelHelper.DataTable1Excel(System.Data.DataTable)" -->
        <member name="M:DotNet.Utilities.ExcelHelper.DataTable2Excel(System.Data.DataTable)">
            <summary>
            导出Excel文件，转换为可读模式
            </summary>
        </member>
        <member name="M:DotNet.Utilities.ExcelHelper.DataTable3Excel(System.Data.DataTable,System.String)">
            <summary>
            导出Excel文件，并自定义文件名
            </summary>
        </member>
        <member name="M:DotNet.Utilities.ExcelHelper.OutputToExcel(System.Data.DataTable,System.String)">
            <summary>
            将数据导出至Excel文件
            </summary>
            <param name="Table">DataTable对象</param>
            <param name="ExcelFilePath">Excel文件路径</param>
        </member>
        <member name="M:DotNet.Utilities.ExcelHelper.OutputToExcel(System.Data.DataTable,System.Collections.ArrayList,System.String)">
            <summary>
            将数据导出至Excel文件
            </summary>
            <param name="Table">DataTable对象</param>
            <param name="Columns">要导出的数据列集合</param>
            <param name="ExcelFilePath">Excel文件路径</param>
        </member>
        <member name="M:DotNet.Utilities.ExcelHelper.GetExcelTables(System.String)">
            <summary>
            获取Excel文件数据表列表
            </summary>
        </member>
        <member name="M:DotNet.Utilities.ExcelHelper.InputFromExcel(System.String,System.String)">
            <summary>
            将Excel文件导出至DataTable(第一行作为表头)
            </summary>
            <param name="ExcelFilePath">Excel文件路径</param>
            <param name="TableName">数据表名，如果数据表名错误，默认为第一个数据表名</param>
        </member>
        <member name="M:DotNet.Utilities.ExcelHelper.GetExcelTableColumns(System.String,System.String)">
            <summary>
            获取Excel文件指定数据表的数据列表
            </summary>
            <param name="ExcelFileName">Excel文件名</param>
            <param name="TableName">数据表名</param>
        </member>
        <member name="M:DotNet.Utilities.SerializeHelper.Save(System.Object,System.String)">
            <summary>
            文件化XML序列化
            </summary>
            <param name="obj">对象</param>
            <param name="filename">文件路径</param>
        </member>
        <member name="M:DotNet.Utilities.SerializeHelper.Load(System.Type,System.String)">
            <summary>
            文件化XML反序列化
            </summary>
            <param name="type">对象类型</param>
            <param name="filename">文件路径</param>
        </member>
        <member name="M:DotNet.Utilities.SerializeHelper.ToXml``1(``0)">
            <summary>
            文本化XML序列化
            </summary>
            <param name="item">对象</param>
        </member>
        <member name="M:DotNet.Utilities.SerializeHelper.FromXml``1(System.String)">
            <summary>
            文本化XML反序列化
            </summary>
            <param name="str">字符串序列</param>
        </member>
        <member name="M:DotNet.Utilities.SerializeHelper.ToSoap``1(``0)">
            <summary>
            SoapFormatter序列化
            </summary>
            <param name="item">对象</param>
        </member>
        <member name="M:DotNet.Utilities.SerializeHelper.FromSoap``1(System.String)">
            <summary>
            SoapFormatter反序列化
            </summary>
            <param name="str">字符串序列</param>
        </member>
        <member name="M:DotNet.Utilities.SerializeHelper.ToBinary``1(``0)">
            <summary>
            BinaryFormatter序列化
            </summary>
            <param name="item">对象</param>
        </member>
        <member name="M:DotNet.Utilities.SerializeHelper.FromBinary``1(System.String)">
            <summary>
            BinaryFormatter反序列化
            </summary>
            <param name="str">字符串序列</param>
        </member>
        <member name="T:DotNet.Utilities.CNDate">
            <summary>
            Å©ÀúÊôÐÔ
            </summary>
        </member>
        <member name="F:DotNet.Utilities.CNDate.cnIntYear">
            <summary>
            Å©ÀúÄê(ÕûÐÍ)
            </summary>
        </member>
        <member name="F:DotNet.Utilities.CNDate.cnIntMonth">
            <summary>
            Å©ÀúÔÂ·Ý(ÕûÐÍ)
            </summary>
        </member>
        <member name="F:DotNet.Utilities.CNDate.cnIntDay">
            <summary>
            Å©ÀúÌì(ÕûÐÍ)
            </summary>
        </member>
        <member name="F:DotNet.Utilities.CNDate.cnStrYear">
            <summary>
            Å©ÀúÄê(Ö§¸É)
            </summary>
        </member>
        <member name="F:DotNet.Utilities.CNDate.cnStrMonth">
            <summary>
            Å©ÀúÔÂ·Ý(×Ö·û)
            </summary>
        </member>
        <member name="F:DotNet.Utilities.CNDate.cnStrDay">
            <summary>
            Å©ÀúÌì(×Ö·û)
            </summary>
        </member>
        <member name="F:DotNet.Utilities.CNDate.cnAnm">
            <summary>
            Å©ÀúÊôÏó
            </summary>
        </member>
        <member name="F:DotNet.Utilities.CNDate.cnSolarTerm">
            <summary>
            ¶þÊ®ËÄ½ÚÆø
            </summary>
        </member>
        <member name="F:DotNet.Utilities.CNDate.cnFtvl">
            <summary>
            ÒõÀú½ÚÈÕ
            </summary>
        </member>
        <member name="F:DotNet.Utilities.CNDate.cnFtvs">
            <summary>
            ÑôÀú½ÚÈÕ
            </summary>
        </member>
        <member name="T:DotNet.Utilities.ChinaDate">
            <summary>
            ¹«Àú×ªÅ©Àú
            </summary>
        </member>
        <member name="M:DotNet.Utilities.ChinaDate.lYearDays(System.Int32)">
            <summary>
            ´«»ØÅ©ÀúyÄêµÄ×ÜÌìÊý
            </summary>
        </member>
        <member name="M:DotNet.Utilities.ChinaDate.leapDays(System.Int32)">
            <summary>
            ´«»ØÅ©ÀúyÄêÈòÔÂµÄÌìÊý
            </summary>
        </member>
        <member name="M:DotNet.Utilities.ChinaDate.leapMonth(System.Int32)">
            <summary>
            ´«»ØÅ©ÀúyÄêÈòÄÄ¸öÔÂ 1-12 , Ã»Èò´«»Ø 0
            </summary>
        </member>
        <member name="M:DotNet.Utilities.ChinaDate.monthDays(System.Int32,System.Int32)">
            <summary>
            ´«»ØÅ©ÀúyÄêmÔÂµÄ×ÜÌìÊý
            </summary>
        </member>
        <member name="M:DotNet.Utilities.ChinaDate.AnimalsYear(System.Int32)">
            <summary>
            ´«»ØÅ©ÀúyÄêµÄÉúÐ¤
            </summary>
        </member>
        <member name="M:DotNet.Utilities.ChinaDate.cyclicalm(System.Int32)">
            <summary>
            ´«ÈëÔÂÈÕµÄoffset ´«»Ø¸ÉÖ§,0=¼××Ó
            </summary>
        </member>
        <member name="M:DotNet.Utilities.ChinaDate.cyclical(System.Int32)">
            <summary>
            ´«Èëoffset ´«»Ø¸ÉÖ§, 0=¼××Ó
            </summary>
        </member>
        <member name="M:DotNet.Utilities.ChinaDate.Lunar(System.Int32,System.Int32)">
            <summary>
            ´«³öÅ©Àú.year0 .month1 .day2 .yearCyl3 .monCyl4 .dayCyl5 .isLeap6
            </summary>
        </member>
        <member name="M:DotNet.Utilities.ChinaDate.calElement(System.Int32,System.Int32,System.Int32)">
            <summary>
            ´«³öyÄêmÔÂdÈÕ¶ÔÓ¦µÄÅ©Àú.year0 .month1 .day2 .yearCyl3 .monCyl4 .dayCyl5 .isLeap6
            </summary>
        </member>
        <member name="M:DotNet.Utilities.ChinaDate.GetDaysByMonth(System.Int32,System.Int32)">
            <summary>
            ´«»Ø¹«ÀúyÄêmÔÂµÄ×ÜÌìÊý
            </summary>
        </member>
        <member name="M:DotNet.Utilities.ChinaDate.GetMondayDateByDate(System.DateTime)">
            <summary>
            ¸ù¾ÝÈÕÆÚÖµ»ñµÃÖÜÒ»µÄÈÕÆÚ
            </summary>
            <param name="dt">ÊäÈëÈÕÆÚ</param>
            <returns>ÖÜÒ»µÄÈÕÆÚ</returns>
        </member>
        <member name="M:DotNet.Utilities.ChinaDate.getChinaDate(System.DateTime)">
            <summary>
            »ñÈ¡Å©Àú
            </summary>
        </member>
        <member name="T:DotNet.Utilities.ChineseCalendar">
            <summary>
            ÖÐ¹úÈÕÀú
            </summary>
        </member>
        <member name="T:DotNet.Utilities.ChineseCalendar.SolarHolidayStruct">
            <summary>
            ÑôÀú
            </summary>
        </member>
        <member name="T:DotNet.Utilities.ChineseCalendar.LunarHolidayStruct">
            <summary>
            Å©Àú
            </summary>
        </member>
        <member name="F:DotNet.Utilities.ChineseCalendar.LunarDateArray">
             <summary>
             À´Ô´ÓÚÍøÉÏµÄÅ©ÀúÊý¾Ý
             </summary>
             <remarks>
             Êý¾Ý½á¹¹ÈçÏÂ£¬¹²Ê¹ÓÃ17Î»Êý¾Ý
             µÚ17Î»£º±íÊ¾ÈòÔÂÌìÊý£¬0±íÊ¾29Ìì   1±íÊ¾30Ìì
             µÚ16Î»-µÚ5Î»£¨¹²12Î»£©±íÊ¾12¸öÔÂ£¬ÆäÖÐµÚ16Î»±íÊ¾µÚÒ»ÔÂ£¬Èç¹û¸ÃÔÂÎª30ÌìÔòÎª1£¬29ÌìÎª0
             µÚ4Î»-µÚ1Î»£¨¹²4Î»£©±íÊ¾ÈòÔÂÊÇÄÄ¸öÔÂ£¬Èç¹ûµ±ÄêÃ»ÓÐÈòÔÂ£¬ÔòÖÃ0
            </remarks>
        </member>
        <member name="M:DotNet.Utilities.ChineseCalendar.#ctor(System.DateTime)">
            <summary>
            ÓÃÒ»¸ö±ê×¼µÄ¹«ÀúÈÕÆÚÀ´³õÊ¹»¯
            </summary>
        </member>
        <member name="M:DotNet.Utilities.ChineseCalendar.#ctor(System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            ÓÃÅ©ÀúµÄÈÕÆÚÀ´³õÊ¹»¯
            </summary>
            <param name="cy">Å©ÀúÄê</param>
            <param name="cm">Å©ÀúÔÂ</param>
            <param name="cd">Å©ÀúÈÕ</param>
            <param name="LeapFlag">ÈòÔÂ±êÖ¾</param>
        </member>
        <member name="M:DotNet.Utilities.ChineseCalendar.GetChineseMonthDays(System.Int32,System.Int32)">
            <summary>
            //´«»ØÅ©ÀúyÄêmÔÂµÄ×ÜÌìÊý
            </summary>
        </member>
        <member name="M:DotNet.Utilities.ChineseCalendar.GetChineseLeapMonth(System.Int32)">
            <summary>
            ´«»ØÅ©Àú yÄêÈòÄÄ¸öÔÂ 1-12 , Ã»Èò´«»Ø 0
            </summary>
        </member>
        <member name="M:DotNet.Utilities.ChineseCalendar.GetChineseLeapMonthDays(System.Int32)">
            <summary>
            ´«»ØÅ©ÀúyÄêÈòÔÂµÄÌìÊý
            </summary>
        </member>
        <member name="M:DotNet.Utilities.ChineseCalendar.GetChineseYearDays(System.Int32)">
            <summary>
            È¡Å©ÀúÄêÒ»ÄêµÄÌìÊý
            </summary>
        </member>
        <member name="M:DotNet.Utilities.ChineseCalendar.GetChineseHour(System.DateTime)">
            <summary>
            »ñµÃµ±Ç°Ê±¼äµÄÊ±³½
            </summary> 
        </member>
        <member name="M:DotNet.Utilities.ChineseCalendar.CheckDateLimit(System.DateTime)">
            <summary>
            ¼ì²é¹«ÀúÈÕÆÚÊÇ·ñ·ûºÏÒªÇó
            </summary>
        </member>
        <member name="M:DotNet.Utilities.ChineseCalendar.CheckChineseDateLimit(System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            ¼ì²éÅ©ÀúÈÕÆÚÊÇ·ñºÏÀí
            </summary>
        </member>
        <member name="M:DotNet.Utilities.ChineseCalendar.ConvertNumToChineseNum(System.Char)">
            <summary>
            ½«0-9×ª³Éºº×ÖÐÎÊ½
            </summary>
        </member>
        <member name="M:DotNet.Utilities.ChineseCalendar.BitTest32(System.Int32,System.Int32)">
            <summary>
            ²âÊÔÄ³Î»ÊÇ·ñÎªÕæ
            </summary>
        </member>
        <member name="M:DotNet.Utilities.ChineseCalendar.ConvertDayOfWeek(System.DayOfWeek)">
            <summary>
            ½«ÐÇÆÚ¼¸×ª³ÉÊý×Ö±íÊ¾
            </summary>
        </member>
        <member name="M:DotNet.Utilities.ChineseCalendar.CompareWeekDayHoliday(System.DateTime,System.Int32,System.Int32,System.Int32)">
            <summary>
            ±È½Ïµ±ÌìÊÇ²»ÊÇÖ¸¶¨µÄµÚÖÜ¼¸
            </summary>
        </member>
        <member name="P:DotNet.Utilities.ChineseCalendar.newCalendarHoliday">
            <summary>
            ¼ÆËãÖÐ¹úÅ©Àú½ÚÈÕ
            </summary>
        </member>
        <member name="P:DotNet.Utilities.ChineseCalendar.WeekDayHoliday">
            <summary>
            °´Ä³ÔÂµÚ¼¸ÖÜµÚ¼¸ÈÕ¼ÆËãµÄ½ÚÈÕ
            </summary>
        </member>
        <member name="P:DotNet.Utilities.ChineseCalendar.DateHoliday">
            <summary>
            °´¹«ÀúÈÕ¼ÆËãµÄ½ÚÈÕ
            </summary>
        </member>
        <member name="P:DotNet.Utilities.ChineseCalendar.Date">
            <summary>
            È¡¶ÔÓ¦µÄ¹«ÀúÈÕÆÚ
            </summary>
        </member>
        <member name="P:DotNet.Utilities.ChineseCalendar.WeekDay">
            <summary>
            È¡ÐÇÆÚ¼¸
            </summary>
        </member>
        <member name="P:DotNet.Utilities.ChineseCalendar.WeekDayStr">
            <summary>
            ÖÜ¼¸µÄ×Ö·û
            </summary>
        </member>
        <member name="P:DotNet.Utilities.ChineseCalendar.DateString">
            <summary>
            ¹«ÀúÈÕÆÚÖÐÎÄ±íÊ¾·¨ ÈçÒ»¾Å¾ÅÆßÄêÆßÔÂÒ»ÈÕ
            </summary>
        </member>
        <member name="P:DotNet.Utilities.ChineseCalendar.IsLeapYear">
            <summary>
            µ±Ç°ÊÇ·ñ¹«ÀúÈòÄê
            </summary>
        </member>
        <member name="P:DotNet.Utilities.ChineseCalendar.ChineseConstellation">
            <summary>
            28ÐÇËÞ¼ÆËã
            </summary>
        </member>
        <member name="P:DotNet.Utilities.ChineseCalendar.ChineseHour">
            <summary>
            Ê±³½
            </summary>
        </member>
        <member name="P:DotNet.Utilities.ChineseCalendar.IsChineseLeapMonth">
            <summary>
            ÊÇ·ñÈòÔÂ
            </summary>
        </member>
        <member name="P:DotNet.Utilities.ChineseCalendar.IsChineseLeapYear">
            <summary>
            µ±ÄêÊÇ·ñÓÐÈòÔÂ
            </summary>
        </member>
        <member name="P:DotNet.Utilities.ChineseCalendar.ChineseDay">
            <summary>
            Å©ÀúÈÕ
            </summary>
        </member>
        <member name="P:DotNet.Utilities.ChineseCalendar.ChineseDayString">
            <summary>
            Å©ÀúÈÕÖÐÎÄ±íÊ¾
            </summary>
        </member>
        <member name="P:DotNet.Utilities.ChineseCalendar.ChineseMonth">
            <summary>
            Å©ÀúµÄÔÂ·Ý
            </summary>
        </member>
        <member name="P:DotNet.Utilities.ChineseCalendar.ChineseMonthString">
            <summary>
            Å©ÀúÔÂ·Ý×Ö·û´®
            </summary>
        </member>
        <member name="P:DotNet.Utilities.ChineseCalendar.ChineseYear">
            <summary>
            È¡Å©ÀúÄê·Ý
            </summary>
        </member>
        <member name="P:DotNet.Utilities.ChineseCalendar.ChineseYearString">
            <summary>
            È¡Å©ÀúÄê×Ö·û´®Èç£¬Ò»¾Å¾ÅÆßÄê
            </summary>
        </member>
        <member name="P:DotNet.Utilities.ChineseCalendar.ChineseDateString">
            <summary>
            È¡Å©ÀúÈÕÆÚ±íÊ¾·¨£ºÅ©ÀúÒ»¾Å¾ÅÆßÄêÕýÔÂ³õÎå
            </summary>
        </member>
        <member name="P:DotNet.Utilities.ChineseCalendar.ChineseTwentyFourDay">
            <summary>
            ¶¨Æø·¨¼ÆËã¶þÊ®ËÄ½ÚÆø,¶þÊ®ËÄ½ÚÆøÊÇ°´µØÇò¹«×ªÀ´¼ÆËãµÄ£¬²¢·ÇÊÇÒõÀú¼ÆËãµÄ
            </summary>
            <remarks>
            ½ÚÆøµÄ¶¨·¨ÓÐÁ½ÖÖ¡£¹Å´úÀú·¨²ÉÓÃµÄ³ÆÎª"ºãÆø"£¬¼´°´Ê±¼ä°ÑÒ»ÄêµÈ·ÖÎª24·Ý£¬
            Ã¿Ò»½ÚÆøÆ½¾ùµÃ15ÌìÓÐÓà£¬ËùÒÔÓÖ³Æ"Æ½Æø"¡£ÏÖ´úÅ©Àú²ÉÓÃµÄ³ÆÎª"¶¨Æø"£¬¼´
            °´µØÇòÔÚ¹ìµÀÉÏµÄÎ»ÖÃÎª±ê×¼£¬Ò»ÖÜ360¡ã£¬Á½½ÚÆøÖ®¼äÏà¸ô15¡ã¡£ÓÉÓÚ¶¬ÖÁÊ±µØ
            ÇòÎ»ÓÚ½üÈÕµã¸½½ü£¬ÔË¶¯ËÙ¶È½Ï¿ì£¬Òò¶øÌ«ÑôÔÚ»ÆµÀÉÏÒÆ¶¯15¡ãµÄÊ±¼ä²»µ½15Ìì¡£
            ÏÄÖÁÇ°ºóµÄÇé¿öÕýºÃÏà·´£¬Ì«ÑôÔÚ»ÆµÀÉÏÒÆ¶¯½ÏÂý£¬Ò»¸ö½ÚÆø´ï16ÌìÖ®¶à¡£²ÉÓÃ
            ¶¨ÆøÊ±¿ÉÒÔ±£Ö¤´º¡¢ÇïÁ½·Ö±ØÈ»ÔÚÖçÒ¹Æ½·ÖµÄÄÇÁ½Ìì¡£
            </remarks>
        </member>
        <member name="P:DotNet.Utilities.ChineseCalendar.Constellation">
            <summary>
            ¼ÆËãÖ¸¶¨ÈÕÆÚµÄÐÇ×ùÐòºÅ 
            </summary>
        </member>
        <member name="P:DotNet.Utilities.ChineseCalendar.Animal">
            <summary>
            ¼ÆËãÊôÏàµÄË÷Òý£¬×¢ÒâËäÈ»ÊôÏàÊÇÒÔÅ©ÀúÄêÀ´Çø±ðµÄ£¬µ«ÊÇÄ¿Ç°ÔÚÊµ¼ÊÊ¹ÓÃÖÐÊÇ°´¹«ÀúÀ´¼ÆËãµÄ
            ÊóÄêÎª1,ÆäËüÀàÍÆ
            </summary>
        </member>
        <member name="P:DotNet.Utilities.ChineseCalendar.AnimalString">
            <summary>
            È¡ÊôÏà×Ö·û´®
            </summary>
        </member>
        <member name="P:DotNet.Utilities.ChineseCalendar.GanZhiYearString">
            <summary>
            È¡Å©ÀúÄêµÄ¸ÉÖ§±íÊ¾·¨Èç ÒÒ³óÄê
            </summary>
        </member>
        <member name="P:DotNet.Utilities.ChineseCalendar.GanZhiMonthString">
            <summary>
            È¡¸ÉÖ§µÄÔÂ±íÊ¾×Ö·û´®£¬×¢ÒâÅ©ÀúµÄÈòÔÂ²»¼Ç¸ÉÖ§
            </summary>
        </member>
        <member name="P:DotNet.Utilities.ChineseCalendar.GanZhiDayString">
            <summary>
            È¡¸ÉÖ§ÈÕ±íÊ¾·¨
            </summary>
        </member>
        <member name="P:DotNet.Utilities.ChineseCalendar.GanZhiDateString">
            <summary>
            È¡µ±Ç°ÈÕÆÚµÄ¸ÉÖ§±íÊ¾·¨Èç ¼××ÓÄêÒÒ³óÔÂ±û¸ýÈÕ
            </summary>
        </member>
        <member name="T:DotNet.Utilities.TimeHelper">
            <summary>
            时间类
            1、SecondToMinute(int Second) 把秒转换成分钟
            </summary>
        </member>
        <member name="M:DotNet.Utilities.TimeHelper.GetFormatDate(System.DateTime,System.Char)">
            <summary>
            将时间格式化成 年月日 的形式,如果时间为null，返回当前系统时间
            </summary>
            <param name="dt">年月日分隔符</param>
            <param name="Separator"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.TimeHelper.GetFormatTime(System.DateTime,System.Char)">
            <summary>
            将时间格式化成 时分秒 的形式,如果时间为null，返回当前系统时间
            </summary>
            <param name="dt"></param>
            <param name="Separator"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.TimeHelper.SecondToMinute(System.Int32)">
            <summary>
            把秒转换成分钟
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.TimeHelper.GetMonthLastDate(System.Int32,System.Int32)">
            <summary>
            返回某年某月最后一天
            </summary>
            <param name="year">年份</param>
            <param name="month">月份</param>
            <returns>日</returns>
        </member>
        <member name="M:DotNet.Utilities.TimeHelper.DateDiff2(System.DateTime,System.DateTime)">
            <summary>
            获得两个日期的间隔
            </summary>
            <param name="DateTime1">日期一。</param>
            <param name="DateTime2">日期二。</param>
            <returns>日期间隔TimeSpan。</returns>
        </member>
        <member name="M:DotNet.Utilities.TimeHelper.FormatDate(System.DateTime,System.String)">
            <summary>
            格式化日期时间
            </summary>
            <param name="dateTime1">日期时间</param>
            <param name="dateMode">显示模式</param>
            <returns>0-9种模式的日期</returns>
        </member>
        <member name="M:DotNet.Utilities.TimeHelper.GetRandomTime(System.DateTime,System.DateTime)">
            <summary>
            得到随机日期
            </summary>
            <param name="time1">起始日期</param>
            <param name="time2">结束日期</param>
            <returns>间隔日期之间的 随机日期</returns>
        </member>
        <member name="T:DotNet.Utilities.RegexHelper">
            <summary>
            操作正则表达式的公共类
            </summary>    
        </member>
        <member name="M:DotNet.Utilities.RegexHelper.IsMatch(System.String,System.String)">
            <summary>
            验证输入字符串是否与模式字符串匹配，匹配返回true
            </summary>
            <param name="input">输入字符串</param>
            <param name="pattern">模式字符串</param>        
        </member>
        <member name="M:DotNet.Utilities.RegexHelper.IsMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            验证输入字符串是否与模式字符串匹配，匹配返回true
            </summary>
            <param name="input">输入的字符串</param>
            <param name="pattern">模式字符串</param>
            <param name="options">筛选条件</param>
        </member>
        <member name="T:DotNet.Utilities.EcanConvertToCh">
            <summary>
            汉字转拼音类
            </summary>
        </member>
        <member name="M:DotNet.Utilities.EcanConvertToCh.convertCh(System.String)">
            <summary>
            汉字转换成全拼的拼音
            </summary>
            <param name="Chstr">汉字字符串</param>
            <returns>转换后的拼音字符串</returns>
        </member>
        <member name="M:DotNet.Utilities.PinYin.GetCodstring(System.String)">
            <summary>
            È¡ºº×ÖÆ´ÒôµÄÊ××ÖÄ¸
            </summary>
            <param name="UnName">ºº×Ö</param>
            <returns>Ê××ÖÄ¸</returns>
        </member>
        <member name="T:DotNet.Utilities.NetHelper">
            <summary>
            网络操作相关的类
            </summary>    
        </member>
        <member name="M:DotNet.Utilities.NetHelper.GetValidPort(System.String)">
            <summary>
            检查设置的端口号是否正确，并返回正确的端口号,无效端口号返回-1。
            </summary>
            <param name="port">设置的端口号</param>        
        </member>
        <member name="M:DotNet.Utilities.NetHelper.StringToIPAddress(System.String)">
            <summary>
            将字符串形式的IP地址转换成IPAddress对象
            </summary>
            <param name="ip">字符串形式的IP地址</param>        
        </member>
        <member name="P:DotNet.Utilities.NetHelper.LocalHostName">
            <summary>
            获取本机的计算机名
            </summary>
        </member>
        <member name="P:DotNet.Utilities.NetHelper.LANIP">
            <summary>
            获取本机的局域网IP
            </summary>        
        </member>
        <member name="P:DotNet.Utilities.NetHelper.WANIP">
            <summary>
            获取本机在Internet网络的广域网IP
            </summary>        
        </member>
        <member name="M:DotNet.Utilities.NetHelper.GetClientIP(System.Net.Sockets.Socket)">
            <summary>
            获取远程客户机的IP地址
            </summary>
            <param name="clientSocket">客户端的socket对象</param>        
        </member>
        <member name="M:DotNet.Utilities.NetHelper.CreateIPEndPoint(System.String,System.Int32)">
            <summary>
            创建一个IPEndPoint对象
            </summary>
            <param name="ip">IP地址</param>
            <param name="port">端口号</param>        
        </member>
        <member name="M:DotNet.Utilities.NetHelper.CreateTcpListener">
            <summary>
            创建一个自动分配IP和端口的TcpListener对象
            </summary>        
        </member>
        <member name="M:DotNet.Utilities.NetHelper.CreateTcpListener(System.String,System.Int32)">
            <summary>
            创建一个TcpListener对象
            </summary>
            <param name="ip">IP地址</param>
            <param name="port">端口</param>        
        </member>
        <member name="M:DotNet.Utilities.NetHelper.CreateTcpSocket">
            <summary>
            创建一个基于TCP协议的Socket对象
            </summary>        
        </member>
        <member name="M:DotNet.Utilities.NetHelper.CreateUdpSocket">
            <summary>
            创建一个基于UDP协议的Socket对象
            </summary>        
        </member>
        <member name="M:DotNet.Utilities.NetHelper.GetLocalPoint(System.Net.Sockets.TcpListener)">
            <summary>
            获取TcpListener对象的本地终结点
            </summary>
            <param name="tcpListener">TcpListener对象</param>        
        </member>
        <member name="M:DotNet.Utilities.NetHelper.GetLocalPoint_IP(System.Net.Sockets.TcpListener)">
            <summary>
            获取TcpListener对象的本地终结点的IP地址
            </summary>
            <param name="tcpListener">TcpListener对象</param>        
        </member>
        <member name="M:DotNet.Utilities.NetHelper.GetLocalPoint_Port(System.Net.Sockets.TcpListener)">
            <summary>
            获取TcpListener对象的本地终结点的端口号
            </summary>
            <param name="tcpListener">TcpListener对象</param>        
        </member>
        <member name="M:DotNet.Utilities.NetHelper.GetLocalPoint(System.Net.Sockets.Socket)">
            <summary>
            获取Socket对象的本地终结点
            </summary>
            <param name="socket">Socket对象</param>        
        </member>
        <member name="M:DotNet.Utilities.NetHelper.GetLocalPoint_IP(System.Net.Sockets.Socket)">
            <summary>
            获取Socket对象的本地终结点的IP地址
            </summary>
            <param name="socket">Socket对象</param>        
        </member>
        <member name="M:DotNet.Utilities.NetHelper.GetLocalPoint_Port(System.Net.Sockets.Socket)">
            <summary>
            获取Socket对象的本地终结点的端口号
            </summary>
            <param name="socket">Socket对象</param>        
        </member>
        <member name="M:DotNet.Utilities.NetHelper.BindEndPoint(System.Net.Sockets.Socket,System.Net.IPEndPoint)">
            <summary>
            绑定终结点
            </summary>
            <param name="socket">Socket对象</param>
            <param name="endPoint">要绑定的终结点</param>
        </member>
        <member name="M:DotNet.Utilities.NetHelper.BindEndPoint(System.Net.Sockets.Socket,System.String,System.Int32)">
            <summary>
            绑定终结点
            </summary>
            <param name="socket">Socket对象</param>        
            <param name="ip">服务器IP地址</param>
            <param name="port">服务器端口</param>
        </member>
        <member name="M:DotNet.Utilities.NetHelper.StartListen(System.Net.Sockets.Socket,System.Int32)">
            <summary>
            指定Socket对象执行监听，默认允许的最大挂起连接数为100
            </summary>
            <param name="socket">执行监听的Socket对象</param>
            <param name="port">监听的端口号</param>
        </member>
        <member name="M:DotNet.Utilities.NetHelper.StartListen(System.Net.Sockets.Socket,System.Int32,System.Int32)">
            <summary>
            指定Socket对象执行监听
            </summary>
            <param name="socket">执行监听的Socket对象</param>
            <param name="port">监听的端口号</param>
            <param name="maxConnection">允许的最大挂起连接数</param>
        </member>
        <member name="M:DotNet.Utilities.NetHelper.StartListen(System.Net.Sockets.Socket,System.String,System.Int32,System.Int32)">
            <summary>
            指定Socket对象执行监听
            </summary>
            <param name="socket">执行监听的Socket对象</param>
            <param name="ip">监听的IP地址</param>
            <param name="port">监听的端口号</param>
            <param name="maxConnection">允许的最大挂起连接数</param>
        </member>
        <member name="M:DotNet.Utilities.NetHelper.Connect(System.Net.Sockets.Socket,System.String,System.Int32)">
            <summary>
            连接到基于TCP协议的服务器,连接成功返回true，否则返回false
            </summary>
            <param name="socket">Socket对象</param>
            <param name="ip">服务器IP地址</param>
            <param name="port">服务器端口号</param>     
        </member>
        <member name="M:DotNet.Utilities.NetHelper.SendMsg(System.Net.Sockets.Socket,System.Byte[])">
            <summary>
            以同步方式向指定的Socket对象发送消息
            </summary>
            <param name="socket">socket对象</param>
            <param name="msg">发送的消息</param>
        </member>
        <member name="M:DotNet.Utilities.NetHelper.SendMsg(System.Net.Sockets.Socket,System.String)">
            <summary>
            使用UTF8编码格式以同步方式向指定的Socket对象发送消息
            </summary>
            <param name="socket">socket对象</param>
            <param name="msg">发送的消息</param>
        </member>
        <member name="M:DotNet.Utilities.NetHelper.ReceiveMsg(System.Net.Sockets.Socket,System.Byte[])">
            <summary>
            以同步方式接收消息
            </summary>
            <param name="socket">socket对象</param>
            <param name="buffer">接收消息的缓冲区</param>
        </member>
        <member name="M:DotNet.Utilities.NetHelper.ReceiveMsg(System.Net.Sockets.Socket)">
            <summary>
            以同步方式接收消息，并转换为UTF8编码格式的字符串,使用5000字节的默认缓冲区接收。
            </summary>
            <param name="socket">socket对象</param>        
        </member>
        <member name="M:DotNet.Utilities.NetHelper.Close(System.Net.Sockets.Socket)">
            <summary>
            关闭基于Tcp协议的Socket对象
            </summary>
            <param name="socket">要关闭的Socket对象</param>
        </member>
        <member name="M:DotNet.Utilities.NetHelper.SendEmail(System.String,System.String,System.String,System.Boolean)">
            <summary>
            发送电子邮件,所有SMTP配置信息均在config配置文件中system.net节设置.
            </summary>
            <param name="receiveEmail">接收电子邮件的地址</param>
            <param name="msgSubject">电子邮件的标题</param>
            <param name="msgBody">电子邮件的正文</param>
            <param name="IsEnableSSL">是否开启SSL</param>
        </member>
        <member name="M:DotNet.Utilities.VideoConvert.GetFileName(System.String)">
            <summary>
            »ñÈ¡ÎÄ¼þµÄÃû×Ö
            </summary>
        </member>
        <member name="M:DotNet.Utilities.VideoConvert.GetExtension(System.String)">
            <summary>
            »ñÈ¡ÎÄ¼þÀ©Õ¹Ãû
            </summary>
        </member>
        <member name="M:DotNet.Utilities.VideoConvert.CheckExtension(System.String)">
            <summary>
            »ñÈ¡ÎÄ¼þÀàÐÍ
            </summary>
        </member>
        <member name="M:DotNet.Utilities.VideoConvert.ConvertFlv(System.String,System.String)">
            <summary>
            ÊÓÆµ¸ñÊ½×ªÎªFlv
            </summary>
            <param name="vFileName">Ô­ÊÓÆµÎÄ¼þµØÖ·</param>
            <param name="ExportName">Éú³ÉºóµÄFlvÎÄ¼þµØÖ·</param>
        </member>
        <member name="M:DotNet.Utilities.VideoConvert.CatchImg(System.String)">
            <summary>
            Éú³ÉFlvÊÓÆµµÄËõÂÔÍ¼
            </summary>
            <param name="vFileName">ÊÓÆµÎÄ¼þµØÖ·</param>
        </member>
        <member name="M:DotNet.Utilities.VideoConvert.ChangeFilePhy(System.String,System.String,System.String)">
            <summary>
            ×ª»»ÎÄ¼þ²¢±£´æÔÚÖ¸¶¨ÎÄ¼þ¼ÐÏÂ
            </summary>
            <param name="fileName">ÉÏ´«ÊÓÆµÎÄ¼þµÄÂ·¾¶£¨Ô­ÎÄ¼þ£©</param>
            <param name="playFile">×ª»»ºóµÄÎÄ¼þµÄÂ·¾¶£¨ÍøÂç²¥·ÅÎÄ¼þ£©</param>
            <param name="imgFile">´ÓÊÓÆµÎÄ¼þÖÐ×¥È¡µÄÍ¼Æ¬Â·¾¶</param>
            <returns>³É¹¦:·µ»ØÍ¼Æ¬ÐéÄâµØÖ·;Ê§°Ü:·µ»Ø¿Õ×Ö·û´®</returns>
        </member>
        <member name="M:DotNet.Utilities.VideoConvert.ChangeFileVir(System.String,System.String,System.String)">
            <summary>
            ×ª»»ÎÄ¼þ²¢±£´æÔÚÖ¸¶¨ÎÄ¼þ¼ÐÏÂ
            </summary>
            <param name="fileName">ÉÏ´«ÊÓÆµÎÄ¼þµÄÂ·¾¶£¨Ô­ÎÄ¼þ£©</param>
            <param name="playFile">×ª»»ºóµÄÎÄ¼þµÄÂ·¾¶£¨ÍøÂç²¥·ÅÎÄ¼þ£©</param>
            <param name="imgFile">´ÓÊÓÆµÎÄ¼þÖÐ×¥È¡µÄÍ¼Æ¬Â·¾¶</param>
            <returns>³É¹¦:·µ»ØÍ¼Æ¬ÐéÄâµØÖ·;Ê§°Ü:·µ»Ø¿Õ×Ö·û´®</returns>
        </member>
        <member name="M:DotNet.Utilities.VideoConvert.MChangeFilePhy(System.String,System.String,System.String)">
            <summary>
            ÔËÐÐmencoderµÄÊÓÆµ½âÂëÆ÷×ª»»
            </summary>
        </member>
        <member name="T:DotNet.Utilities.ConnectCommand">
            <summary>
            Performs the connect to a Pop3 server and returns a Pop3 
            response indicating the attempt to connect results and the
            network stream to use for all subsequent Pop3 Commands.
            </summary>
        </member>
        <member name="M:DotNet.Utilities.ConnectCommand.#ctor(System.Net.Sockets.TcpClient,System.String,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Utilities.ConnectCommand"/> class.
            </summary>
            <remarks>
            Even though a network stream is provided to the base constructor the stream
            does not already exist so we have to send in a dummy stream until the actual
            connect has taken place.  Then we'll reset network stream to the 
            stream made available by the TcpClient.GetStream() to read the data returned
            after a connect.
            </remarks>
            <param name="client">The client.</param>
            <param name="hostname">The hostname.</param>
            <param name="port">The port.</param>
            <param name="useSsl">if set to <c>true</c> [use SSL].</param>
        </member>
        <member name="M:DotNet.Utilities.ConnectCommand.CreateRequestMessage">
            <summary>
            Creates the connect request message.
            </summary>
            <returns>A byte[] containing connect request message.</returns>
        </member>
        <member name="M:DotNet.Utilities.ConnectCommand.Execute(DotNet.Utilities.Pop3State)">
            <summary>
            Executes this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.ConnectCommand.SetClientStream">
            <summary>
            Sets the client stream.
            </summary>
        </member>
        <member name="M:DotNet.Utilities.ConnectCommand.CreateResponse(System.Byte[])">
            <summary>
            Creates the response.
            </summary>
            <param name="buffer">The buffer.</param>
            <returns>
            The <c>Pop3Response</c> containing the results of the
            Pop3 command execution.
            </returns>
        </member>
        <member name="T:DotNet.Utilities.DeleCommand">
            <summary>
            This class represents the Pop3 DELE command.
            </summary>
        </member>
        <member name="M:DotNet.Utilities.DeleCommand.#ctor(System.IO.Stream,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Utilities.DeleCommand"/> class.
            </summary>
            <param name="stream">The stream.</param>
            <param name="messageId">The message id.</param>
        </member>
        <member name="M:DotNet.Utilities.DeleCommand.CreateRequestMessage">
            <summary>
            Creates the DELE request message.
            </summary>
            <returns>
            The byte[] containing the DELE request message.
            </returns>
        </member>
        <member name="T:DotNet.Utilities.ListCommand">
            <summary>
            This class represents both the multiline and single line Pop3 LIST command.
            </summary>
        </member>
        <member name="M:DotNet.Utilities.ListCommand.#ctor(System.IO.Stream,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Utilities.ListCommand"/> class.
            </summary>
            <param name="stream">The stream.</param>
            <param name="messageId">The message id.</param>
        </member>
        <member name="M:DotNet.Utilities.ListCommand.CreateRequestMessage">
            <summary>
            Creates the LIST request message.
            </summary>
            <returns>The byte[] containing the LIST request message.</returns>
        </member>
        <member name="M:DotNet.Utilities.ListCommand.CreateResponse(System.Byte[])">
            <summary>
            Creates the response.
            </summary>
            <param name="buffer">The buffer.</param>
            <returns>A <c>ListResponse</c> containing the results of the Pop3 LIST command.</returns>
        </member>
        <member name="T:DotNet.Utilities.ListResponse">
            <summary>
            This class represents the response message 
            returned from both a single line and multi line 
            Pop3 LIST Command.
            </summary>
        </member>
        <member name="P:DotNet.Utilities.ListResponse.Items">
            <summary>
            Gets or sets the items.
            </summary>
            <value>The items.</value>
        </member>
        <member name="P:DotNet.Utilities.ListResponse.MessageNumber">
            <summary>
            Gets the message number.
            </summary>
            <value>The message number.</value>
        </member>
        <member name="P:DotNet.Utilities.ListResponse.Octets">
            <summary>
            Gets number of octets.
            </summary>
            <value>The number of octets.</value>
        </member>
        <member name="M:DotNet.Utilities.ListResponse.#ctor(DotNet.Utilities.Pop3Response,System.Collections.Generic.List{DotNet.Utilities.Pop3ListItem})">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Utilities.ListResponse"/> class.
            </summary>
            <param name="response">The response.</param>
            <param name="items">The items.</param>
        </member>
        <member name="T:DotNet.Utilities.MailMessageEx">
            <summary>
            This class adds a few internet mail headers not already exposed by the 
            System.Net.MailMessage.  It also provides support to encapsulate the
            nested mail attachments in the Children collection.
            </summary>
        </member>
        <member name="P:DotNet.Utilities.MailMessageEx.MessageNumber">
            <summary>
            Gets or sets the message number of the MailMessage on the POP3 server.
            </summary>
            <value>The message number.</value>
        </member>
        <member name="P:DotNet.Utilities.MailMessageEx.Children">
            <summary>
            Gets the children MailMessage attachments.
            </summary>
            <value>The children MailMessage attachments.</value>
        </member>
        <member name="P:DotNet.Utilities.MailMessageEx.DeliveryDate">
            <summary>
            Gets the delivery date.
            </summary>
            <value>The delivery date.</value>
        </member>
        <member name="P:DotNet.Utilities.MailMessageEx.ReturnAddress">
            <summary>
            Gets the return address.
            </summary>
            <value>The return address.</value>
        </member>
        <member name="P:DotNet.Utilities.MailMessageEx.Routing">
            <summary>
            Gets the routing.
            </summary>
            <value>The routing.</value>
        </member>
        <member name="P:DotNet.Utilities.MailMessageEx.MessageId">
            <summary>
            Gets the message id.
            </summary>
            <value>The message id.</value>
        </member>
        <member name="P:DotNet.Utilities.MailMessageEx.MimeVersion">
            <summary>
            Gets the MIME version.
            </summary>
            <value>The MIME version.</value>
        </member>
        <member name="P:DotNet.Utilities.MailMessageEx.ContentId">
            <summary>
            Gets the content id.
            </summary>
            <value>The content id.</value>
        </member>
        <member name="P:DotNet.Utilities.MailMessageEx.ContentDescription">
            <summary>
            Gets the content description.
            </summary>
            <value>The content description.</value>
        </member>
        <member name="P:DotNet.Utilities.MailMessageEx.ContentDisposition">
            <summary>
            Gets the content disposition.
            </summary>
            <value>The content disposition.</value>
        </member>
        <member name="P:DotNet.Utilities.MailMessageEx.ContentType">
            <summary>
            Gets the type of the content.
            </summary>
            <value>The type of the content.</value>
        </member>
        <member name="M:DotNet.Utilities.MailMessageEx.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Utilities.MailMessageEx"/> class.
            </summary>
        </member>
        <member name="M:DotNet.Utilities.MailMessageEx.GetHeader(System.String)">
            <summary>
            Gets the header.
            </summary>
            <param name="header">The header.</param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.MailMessageEx.CreateMailMessageFromEntity(DotNet.Utilities.MimeEntity)">
            <summary>
            Creates the mail message from entity.
            </summary>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.MailMessageEx.CreateMailAddress(System.String)">
            <summary>
            Creates the mail address.
            </summary>
            <param name="address">The address.</param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.MailMessageEx.PopulateAddressList(System.String,System.Net.Mail.MailAddressCollection)">
            <summary>
            Populates the address list.
            </summary>
            <param name="addressList">The address list.</param>
            <param name="recipients">The recipients.</param>
        </member>
        <member name="M:DotNet.Utilities.MailMessageEx.GetMailAddresses(System.String)">
            <summary>
            Gets the mail addresses.
            </summary>
            <param name="addressList">The address list.</param>
            <returns></returns>
        </member>
        <member name="T:DotNet.Utilities.NoopCommand">
            <summary>
            This class represents the Pop3 NOOP command.
            </summary>
        </member>
        <member name="M:DotNet.Utilities.NoopCommand.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Utilities.NoopCommand"/> class.
            </summary>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:DotNet.Utilities.NoopCommand.CreateRequestMessage">
            <summary>
            Creates the NOOP request message.
            </summary>
            <returns>
            The byte[] containing the NOOP request message.
            </returns>
        </member>
        <member name="T:DotNet.Utilities.PassCommand">
            <summary>
            This class represents the Pop3 PASS command.
            </summary>
        </member>
        <member name="M:DotNet.Utilities.PassCommand.#ctor(System.IO.Stream,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Utilities.PassCommand"/> class.
            </summary>
            <param name="stream">The stream.</param>
            <param name="password">The password.</param>
        </member>
        <member name="M:DotNet.Utilities.PassCommand.CreateRequestMessage">
            <summary>
            Creates the PASS request message.
            </summary>
            <returns>
            The byte[] containing the PASS request message.
            </returns>
        </member>
        <member name="T:DotNet.Utilities.Pop3Client">
            <summary>
            The Pop3Client class provides a wrapper for the Pop3 commands
            that can be executed against a Pop3Server.  This class will 
            execute and return results for the various commands that are 
            executed.
            </summary>
        </member>
        <member name="E:DotNet.Utilities.Pop3Client.Trace">
            <summary>
            Traces the various command objects that executed during this objects
            lifetime.
            </summary>
        </member>
        <member name="P:DotNet.Utilities.Pop3Client.Hostname">
            <summary>
            Gets the hostname.
            </summary>
            <value>The hostname.</value>
        </member>
        <member name="P:DotNet.Utilities.Pop3Client.Port">
            <summary>
            Gets the port.
            </summary>
            <value>The port.</value>
        </member>
        <member name="P:DotNet.Utilities.Pop3Client.UseSsl">
            <summary>
            Gets a value indicating whether [use SSL].
            </summary>
            <value><c>true</c> if [use SSL]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:DotNet.Utilities.Pop3Client.Username">
            <summary>
            Gets or sets the username.
            </summary>
            <value>The username.</value>
        </member>
        <member name="P:DotNet.Utilities.Pop3Client.Password">
            <summary>
            Gets or sets the password.
            </summary>
            <value>The password.</value>
        </member>
        <member name="P:DotNet.Utilities.Pop3Client.CurrentState">
            <summary>
            Gets the state of the current.
            </summary>
            <value>The state of the current.</value>
        </member>
        <member name="M:DotNet.Utilities.Pop3Client.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Utilities.Pop3Client"/> class using the default POP3 port 110
            without using SSL.
            </summary>
            <param name="hostname">The hostname.</param>
            <param name="username">The username.</param>
            <param name="password">The password.</param>
        </member>
        <member name="M:DotNet.Utilities.Pop3Client.#ctor(System.String,System.Boolean,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Utilities.Pop3Client"/> class using the default POP3 port 110.
            </summary>
            <param name="hostname">The hostname.</param>
            <param name="useSsl">if set to <c>true</c> [use SSL].</param>
            <param name="username">The username.</param>
            <param name="password">The password.</param>
        </member>
        <member name="M:DotNet.Utilities.Pop3Client.#ctor(System.String,System.Int32,System.Boolean,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Utilities.Pop3Client"/> class.
            </summary>
            <param name="hostname">The hostname.</param>
            <param name="port">The port.</param>
            <param name="useSsl">if set to <c>true</c> [use SSL].</param>
            <param name="username">The username.</param>
            <param name="password">The password.</param>
        </member>
        <member name="M:DotNet.Utilities.Pop3Client.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Utilities.Pop3Client"/> class.
            </summary>
        </member>
        <member name="M:DotNet.Utilities.Pop3Client.EnsureConnection">
            <summary>
            Checks the connection.
            </summary>
        </member>
        <member name="M:DotNet.Utilities.Pop3Client.SetState(DotNet.Utilities.Pop3State)">
            <summary>
            Resets the state.
            </summary>
            <param name="state">The state.</param>
        </member>
        <member name="M:DotNet.Utilities.Pop3Client.EnsureResponse(DotNet.Utilities.Pop3Response,System.String)">
            <summary>
            Ensures the response.
            </summary>
            <param name="response">The response.</param>
            <param name="error">The error.</param>
        </member>
        <member name="M:DotNet.Utilities.Pop3Client.EnsureResponse(DotNet.Utilities.Pop3Response)">
            <summary>
            Ensures the response.
            </summary>
            <param name="response">The response.</param>
        </member>
        <member name="M:DotNet.Utilities.Pop3Client.TraceCommand``2(``0)">
            <summary>
            Traces the command.
            </summary>
            <param name="command">The command.</param>
        </member>
        <member name="M:DotNet.Utilities.Pop3Client.Connect">
            <summary>
            Connects this instance and properly sets the 
            client stream to Use Ssl if it is specified.
            </summary>
        </member>
        <member name="M:DotNet.Utilities.Pop3Client.SetClientStream(System.IO.Stream)">
            <summary>
            Sets the client stream.  If UseSsl <c>true</c> then wrap 
            the client's <c>NetworkStream</c> in an <c>SslStream</c>, if UseSsl <c>false</c> 
            then set the client stream to the <c>NetworkStream</c>
            </summary>
        </member>
        <member name="M:DotNet.Utilities.Pop3Client.Authenticate">
            <summary>
            Authenticates this instance.
            </summary>
            <remarks>A successful execution of this method will result in a Current State of Transaction.
            Unsuccessful USER or PASS commands can be reattempted by resetting the Username or Password 
            properties and re-execution of the methods.</remarks>
            <exception cref="T:DotNet.Utilities.Pop3Exception">
            If the Pop3Server is unable to be connected.
            If the User command is unable to be successfully executed.
            If the Pass command is unable to be successfully executed.
            </exception>
        </member>
        <member name="M:DotNet.Utilities.Pop3Client.Dele(DotNet.Utilities.Pop3ListItem)">
            <summary>
            Executes the POP3 DELE command.
            </summary>
            <param name="item">The item.</param>
            /// <exception cref="T:DotNet.Utilities.Pop3Exception">If the DELE command was unable to be executed successfully.</exception>
        </member>
        <member name="M:DotNet.Utilities.Pop3Client.Noop">
            <summary>
            Executes the POP3 NOOP command.
            </summary>
            <exception cref="T:DotNet.Utilities.Pop3Exception">If the NOOP command was unable to be executed successfully.</exception>
        </member>
        <member name="M:DotNet.Utilities.Pop3Client.Rset">
            <summary>
            Executes the POP3 RSET command.
            </summary>
            <exception cref="T:DotNet.Utilities.Pop3Exception">If the RSET command was unable to be executed successfully.</exception>
        </member>
        <member name="M:DotNet.Utilities.Pop3Client.Stat">
            <summary>
            Executes the POP3 STAT command.
            </summary>
            <returns>A Stat object containing the results of STAT command.</returns>
            <exception cref="T:DotNet.Utilities.Pop3Exception">If the STAT command was unable to be executed successfully.</exception>
        </member>
        <member name="M:DotNet.Utilities.Pop3Client.List">
            <summary>
            Executes the POP3 List command.
            </summary>
            <returns>A generic List of Pop3Items containing the results of the LIST command.</returns>
            <exception cref="T:DotNet.Utilities.Pop3Exception">If the LIST command was unable to be executed successfully.</exception>
        </member>
        <member name="M:DotNet.Utilities.Pop3Client.List(System.Int32)">
            <summary>
            Lists the specified message.
            </summary>
            <param name="message">The message.</param>
            <returns>A <c>Pop3ListItem</c> for the requested Pop3Item.</returns>
            <exception cref="T:DotNet.Utilities.Pop3Exception">If the LIST command was unable to be executed successfully for the provided message id.</exception>
        </member>
        <member name="M:DotNet.Utilities.Pop3Client.RetrMimeEntity(DotNet.Utilities.Pop3ListItem)">
            <summary>
            Retrs the specified message.
            </summary>
            <param name="item">The item.</param>
            <returns>A MimeEntity for the requested Pop3 Mail Item.</returns>
        </member>
        <member name="M:DotNet.Utilities.Pop3Client.RetrMailMessageEx(DotNet.Utilities.Pop3ListItem)">
            <summary>
            Retrs the mail message ex.
            </summary>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.Pop3Client.Quit">
            <summary>
            Executes the Pop3 QUIT command.
            </summary>
            <exception cref="T:DotNet.Utilities.Pop3Exception">If the quit command returns a -ERR server message.</exception>
        </member>
        <member name="M:DotNet.Utilities.Pop3Client.ExecuteCommand``2(``1)">
            <summary>
            Provides a common way to execute all commands.  This method
            validates the connection, traces the command and finally
            validates the response message for a -ERR response.
            </summary>
            <param name="command">The command.</param>
            <returns>The Pop3Response for the provided command</returns>
            <exception cref="T:DotNet.Utilities.Pop3Exception">If the HostMessage does not start with '+OK'.</exception>
            <exception cref="T:DotNet.Utilities.Pop3Exception">If the client is no longer connected.</exception>
        </member>
        <member name="M:DotNet.Utilities.Pop3Client.Disconnect">
            <summary>
            Disconnects this instance.
            </summary>
        </member>
        <member name="T:DotNet.Utilities.Pop3Command`1">
            <summary>
            This class represents a generic Pop3 command and 
            encapsulates the major operations when executing a
            Pop3 command against a Pop3 Server.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:DotNet.Utilities.Pop3Command`1.IsMultiline">
            <summary>
            Sets a value indicating whether this instance is multiline.
            </summary>
            <value>
            	<c>true</c> if this instance is multiline; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:DotNet.Utilities.Pop3Command`1.#ctor(System.IO.Stream,System.Boolean,DotNet.Utilities.Pop3State)">
            <summary>
            Initializes a new instance of the <see cref="!:Pop3CommandBase"/> class.
            </summary>
            <param name="stream">The stream.</param>
            <param name="isMultiline">if set to <c>true</c> [is multiline].</param>
            <param name="validExecuteState">State of the valid execute.</param>
        </member>
        <member name="M:DotNet.Utilities.Pop3Command`1.CreateRequestMessage">
            <summary>
            Abstract method intended for inheritors to 
            build out the byte[] request message for 
            the specific command.
            </summary>
            <returns>The byte[] containing the request message.</returns>
        </member>
        <member name="M:DotNet.Utilities.Pop3Command`1.Send(System.Byte[])">
            <summary>
            Sends the specified message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:DotNet.Utilities.Pop3Command`1.Execute(DotNet.Utilities.Pop3State)">
            <summary>
            Executes this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.Pop3Command`1.EnsurePop3State(DotNet.Utilities.Pop3State)">
            <summary>
            Ensures the state of the POP3.
            </summary>
            <param name="currentState">State of the current.</param>
        </member>
        <member name="M:DotNet.Utilities.Pop3Command`1.CreateResponse(System.Byte[])">
            <summary>
            Creates the response.
            </summary>
            <param name="buffer">The buffer.</param>
            <returns>The <c>Pop3Response</c> containing the results of the
            Pop3 command execution.</returns>
        </member>
        <member name="M:DotNet.Utilities.Pop3Command`1.GetResponse">
            <summary>
            Gets the response.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.Pop3Command`1.Receive(System.AsyncCallback)">
            <summary>
            Receives the specified callback.
            </summary>
            <param name="callback">The callback.</param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.Pop3Command`1.WriteReceivedBytesToBuffer(System.Int32)">
            <summary>
            Writes the received bytes to buffer.
            </summary>
            <param name="bytesReceived">The bytes received.</param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.Pop3Command`1.GetSingleLineResponseCallback(System.IAsyncResult)">
            <summary>
            Gets the single line response callback.
            </summary>
            <param name="ar">The ar.</param>
        </member>
        <member name="M:DotNet.Utilities.Pop3Command`1.GetMultiLineResponseCallback(System.IAsyncResult)">
            <summary>
            Gets the multi line response callback.
            </summary>
            <param name="ar">The ar.</param>
        </member>
        <member name="M:DotNet.Utilities.Pop3Command`1.GetRequestMessage(System.String[])">
            <summary>
            Gets the request message.
            </summary>
            <param name="args">The args.</param>
            <returns>A byte[] request message to send to the host.</returns>
        </member>
        <member name="M:DotNet.Utilities.Pop3Command`1.StripPop3HostMessage(System.Byte[],System.String)">
            <summary>
            Strips the POP3 host message.
            </summary>
            <param name="bytes">The bytes.</param>
            <param name="header">The header.</param>
            <returns>A <c>MemoryStream</c> without the Pop3 server message.</returns>
        </member>
        <member name="M:DotNet.Utilities.Pop3Command`1.GetResponseLines(System.IO.MemoryStream)">
            <summary>
            Gets the response lines.
            </summary>
            <param name="stream">The stream.</param>
            <returns>A string[] of Pop3 response lines.</returns>
        </member>
        <member name="T:DotNet.Utilities.Pop3Commands">
            <summary>
            This class contains a string representation of Pop3 commands
            that can be executed.
            </summary>
        </member>
        <member name="F:DotNet.Utilities.Pop3Commands.User">
            <summary>
            The USER command followed by a space.
            </summary>
        </member>
        <member name="F:DotNet.Utilities.Pop3Commands.Crlf">
            <summary>
            The CRLF escape sequence.
            </summary>
        </member>
        <member name="F:DotNet.Utilities.Pop3Commands.Quit">
            <summary>
            The QUIT command followed by a CRLF.
            </summary>
        </member>
        <member name="F:DotNet.Utilities.Pop3Commands.Stat">
            <summary>
            The STAT command followed by a CRLF.
            </summary>
        </member>
        <member name="F:DotNet.Utilities.Pop3Commands.List">
            <summary>
            The LIST command followed by a space.
            </summary>
        </member>
        <member name="F:DotNet.Utilities.Pop3Commands.Retr">
            <summary>
            The RETR command followed by a space.
            </summary>
        </member>
        <member name="F:DotNet.Utilities.Pop3Commands.Noop">
            <summary>
            The NOOP command followed by a CRLF.
            </summary>
        </member>
        <member name="F:DotNet.Utilities.Pop3Commands.Dele">
            <summary>
            The DELE command followed by a space.
            </summary>
        </member>
        <member name="F:DotNet.Utilities.Pop3Commands.Rset">
            <summary>
            The RSET command followed by a CRLF.
            </summary>
        </member>
        <member name="F:DotNet.Utilities.Pop3Commands.Pass">
            <summary>
            The PASS command followed by a space.
            </summary>
        </member>
        <member name="F:DotNet.Utilities.Pop3Commands.Top">
            <summary>
            The TOP command followed by a space.
            </summary>
        </member>
        <member name="T:DotNet.Utilities.Pop3Exception">
            <summary>
            This class represents a Pop3 Exception.
            </summary>
        </member>
        <member name="M:DotNet.Utilities.Pop3Exception.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Utilities.Pop3Exception"/> class.
            </summary>
        </member>
        <member name="M:DotNet.Utilities.Pop3Exception.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Utilities.Pop3Exception"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:DotNet.Utilities.Pop3Exception.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Utilities.Pop3Exception"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="M:DotNet.Utilities.Pop3Exception.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Utilities.Pop3Exception"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"></see> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"></see> is zero (0). </exception>
            <exception cref="T:System.ArgumentNullException">The info parameter is null. </exception>
        </member>
        <member name="T:DotNet.Utilities.Pop3ListItem">
            <summary>
            This class represents an item returned from the 
            Pop3 LIST command.
            </summary>
        </member>
        <member name="P:DotNet.Utilities.Pop3ListItem.MessageId">
            <summary>
            Gets or sets the message number.
            </summary>
            <value>The message number.</value>
        </member>
        <member name="P:DotNet.Utilities.Pop3ListItem.Octets">
            <summary>
            Gets or sets the octets.
            </summary>
            <value>The octets.</value>
        </member>
        <member name="M:DotNet.Utilities.Pop3ListItem.#ctor(System.Int32,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Utilities.Pop3ListItem"/> class.
            </summary>
            <param name="messageNumber">The message number.</param>
            <param name="octets">The octets.</param>
        </member>
        <member name="T:DotNet.Utilities.Pop3Response">
            <summary>
            This class represents a Pop3 response message and
            is intended to be used as a base class for all other
            Pop3Response types.
            </summary>
        </member>
        <member name="P:DotNet.Utilities.Pop3Response.ResponseContents">
            <summary>
            Gets the response contents.
            </summary>
            <value>The response contents.</value>
        </member>
        <member name="P:DotNet.Utilities.Pop3Response.StatusIndicator">
            <summary>
            Gets a value indicating whether message was <c>true</c> +OK or <c>false</c> -ERR
            </summary>
            <value><c>true</c> if [status indicator]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:DotNet.Utilities.Pop3Response.HostMessage">
            <summary>
            Gets the host message.
            </summary>
            <value>The host message.</value>
        </member>
        <member name="M:DotNet.Utilities.Pop3Response.#ctor(System.Byte[],System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Utilities.Pop3Response"/> class.
            </summary>
            <param name="responseContents">The response contents.</param>
            <param name="hostMessage">The host message.</param>
            <param name="statusIndicator">if set to <c>true</c> [status indicator].</param>
        </member>
        <member name="M:DotNet.Utilities.Pop3Response.CreateResponse(System.Byte[])">
            <summary>
            Creates the response.
            </summary>
            <param name="responseContents">The response contents.</param>
            <returns></returns>
        </member>
        <member name="T:DotNet.Utilities.Pop3Responses">
            <summary>
            This class contains the Positive and Negative starting response strings
            that can be returned from a Pop3 server.
            </summary>
        </member>
        <member name="F:DotNet.Utilities.Pop3Responses.Ok">
            <summary>
            The +OK starting of a positive response from the server.
            </summary>
        </member>
        <member name="F:DotNet.Utilities.Pop3Responses.Err">
            <summary>
            The -ERR starting of a negative response from the server.
            </summary>
        </member>
        <member name="F:DotNet.Utilities.Pop3State.Unknown">
            <summary>
            Undefined.
            </summary>
        </member>
        <member name="F:DotNet.Utilities.Pop3State.Authorization">
            <summary>
            Connected to Pop3 server, but not authorized.
            May issue any of the following commands QUIT, USER, PASS
            </summary>
        </member>
        <member name="F:DotNet.Utilities.Pop3State.Transaction">
            <summary>
            Authorized to Pop3 server, can issue any of the following commands;
            STAT, LIST, RETR, DELE, RSET
            </summary>
        </member>
        <member name="F:DotNet.Utilities.Pop3State.Update">
            <summary>
            Quit command was sent to server indicating deleted
            messages should be removed.
            </summary>
        </member>
        <member name="T:DotNet.Utilities.QuitCommand">
            <summary>
            This class represents the Pop3 QUIT command.
            </summary>
        </member>
        <member name="M:DotNet.Utilities.QuitCommand.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Utilities.QuitCommand"/> class.
            </summary>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:DotNet.Utilities.QuitCommand.CreateRequestMessage">
            <summary>
            Creates the Quit request message.
            </summary>
            <returns>
            The byte[] containing the QUIT request message.
            </returns>
        </member>
        <member name="T:DotNet.Utilities.RetrCommand">
            <summary>
            This class represents the Pop3 RETR command.
            </summary>
        </member>
        <member name="M:DotNet.Utilities.RetrCommand.#ctor(System.IO.Stream,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Utilities.RetrCommand"/> class.
            </summary>
            <param name="stream">The stream.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:DotNet.Utilities.RetrCommand.CreateRequestMessage">
            <summary>
            Creates the RETR request message.
            </summary>
            <returns>
            The byte[] containing the RETR request message.
            </returns>
        </member>
        <member name="M:DotNet.Utilities.RetrCommand.CreateResponse(System.Byte[])">
            <summary>
            Creates the response.
            </summary>
            <param name="buffer">The buffer.</param>
            <returns>
            The <c>Pop3Response</c> containing the results of the
            Pop3 command execution.
            </returns>
        </member>
        <member name="T:DotNet.Utilities.RetrResponse">
            <summary>
            This class represents a RETR response message resulting
            from a Pop3 RETR command execution against a Pop3 Server.
            </summary>
        </member>
        <member name="P:DotNet.Utilities.RetrResponse.MessageLines">
            <summary>
            Gets the message lines.
            </summary>
            <value>The Pop3 message lines.</value>
        </member>
        <member name="M:DotNet.Utilities.RetrResponse.#ctor(DotNet.Utilities.Pop3Response,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Utilities.RetrResponse"/> class.
            </summary>
            <param name="response">The response.</param>
            <param name="messageLines">The message lines.</param>
        </member>
        <member name="T:DotNet.Utilities.RsetCommand">
            <summary>
            This command represents the Pop3 RSET command.
            </summary>
        </member>
        <member name="M:DotNet.Utilities.RsetCommand.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Utilities.RsetCommand"/> class.
            </summary>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:DotNet.Utilities.RsetCommand.CreateRequestMessage">
            <summary>
            Creates the RSET request message.
            </summary>
            <returns>
            The byte[] containing the RSET request message.
            </returns>
        </member>
        <member name="T:DotNet.Utilities.Stat">
            <summary>
            This class represents the results from the execution 
            of a pop3 STAT command.
            </summary>
        </member>
        <member name="P:DotNet.Utilities.Stat.MessageCount">
            <summary>
            Gets or sets the message count.
            </summary>
            <value>The message count.</value>
        </member>
        <member name="P:DotNet.Utilities.Stat.Octets">
            <summary>
            Gets or sets the octets.
            </summary>
            <value>The octets.</value>
        </member>
        <member name="M:DotNet.Utilities.Stat.#ctor(System.Int32,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Utilities.Stat"/> class.
            </summary>
            <param name="messageCount">The message count.</param>
            <param name="octets">The octets.</param>
        </member>
        <member name="T:DotNet.Utilities.StatCommand">
            <summary>
            This class represents the Pop3 STAT command.
            </summary>
        </member>
        <member name="M:DotNet.Utilities.StatCommand.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Utilities.StatCommand"/> class.
            </summary>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:DotNet.Utilities.StatCommand.CreateRequestMessage">
            <summary>
            Creates the STAT request message.
            </summary>
            <returns>
            The byte[] containing the STAT request message.
            </returns>
        </member>
        <member name="M:DotNet.Utilities.StatCommand.CreateResponse(System.Byte[])">
            <summary>
            Creates the response.
            </summary>
            <param name="buffer">The buffer.</param>
            <returns>
            The <c>Pop3Response</c> containing the results of the
            Pop3 command execution.
            </returns>
        </member>
        <member name="T:DotNet.Utilities.StatResponse">
            <summary>
            This class represents the resulting Pop3 response from a STAT command
            executed against a Pop3 server.
            </summary>
        </member>
        <member name="P:DotNet.Utilities.StatResponse.MessageCount">
            <summary>
            Gets the message count.
            </summary>
            <value>The message count.</value>
        </member>
        <member name="P:DotNet.Utilities.StatResponse.Octets">
            <summary>
            Gets the octets.
            </summary>
            <value>The octets.</value>
        </member>
        <member name="M:DotNet.Utilities.StatResponse.#ctor(DotNet.Utilities.Pop3Response,System.Int32,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Utilities.StatResponse"/> class.
            </summary>
            <param name="response">The response.</param>
            <param name="messageCount">The message count.</param>
            <param name="octets">The octets.</param>
        </member>
        <member name="M:DotNet.Utilities.TopCommand.#ctor(System.IO.Stream,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Utilities.TopCommand"/> class.
            </summary>
            <param name="stream">The stream.</param>
            <param name="messageNumber">The message number.</param>
            <param name="lineCount">The line count.</param>
        </member>
        <member name="M:DotNet.Utilities.TopCommand.CreateRequestMessage">
            <summary>
            Abstract method intended for inheritors to
            build out the byte[] request message for
            the specific command.
            </summary>
            <returns>
            The byte[] containing the request message.
            </returns>
        </member>
        <member name="M:DotNet.Utilities.TopCommand.CreateResponse(System.Byte[])">
            <summary>
            Creates the response.
            </summary>
            <param name="buffer">The buffer.</param>
            <returns>
            The <c>Pop3Response</c> containing the results of the
            Pop3 command execution.
            </returns>
        </member>
        <member name="T:DotNet.Utilities.UserCommand">
            <summary>
            This command represents a Pop3 USER command.
            </summary>
        </member>
        <member name="M:DotNet.Utilities.UserCommand.#ctor(System.IO.Stream,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Utilities.UserCommand"/> class.
            </summary>
            <param name="stream">The stream.</param>
            <param name="username">The username.</param>
        </member>
        <member name="M:DotNet.Utilities.UserCommand.CreateRequestMessage">
            <summary>
            Creates the USER request message.
            </summary>
            <returns>
            The byte[] containing the USER request message.
            </returns>
        </member>
        <member name="T:DotNet.Utilities.MailHelper">
            <summary>
            邮件操作类
            </summary>
        </member>
        <member name="M:DotNet.Utilities.MailHelper.GetEMailLoginUrl(System.String)">
            <summary>
            获取Email登陆地址
            </summary>
            <param name="email">email地址</param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.MailHelper.sendMail(System.String,System.String,System.String,System.Collections.Generic.List{System.String},System.String)">
            <summary>
            发送邮件
            </summary>
            <param name="mailSubjct">邮件主题</param>
            <param name="mailBody">邮件正文</param>
            <param name="mailFrom">发送者</param>
            <param name="mailAddress">邮件地址列表</param>
            <param name="HostIP">主机IP</param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.MailHelper.sendMail(System.String,System.String,System.String,System.Collections.Generic.List{System.String},System.String,System.String,System.String)">
            <summary>
            发送邮件（要求登陆）
            </summary>
            <param name="mailSubjct">邮件主题</param>
            <param name="mailBody">邮件正文</param>
            <param name="mailFrom">发送者</param>
            <param name="mailAddress">接收地址列表</param>
            <param name="HostIP">主机IP</param>
            <param name="username">用户名</param>
            <param name="password">密码</param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.MailHelper.sendMail(System.String,System.String,System.String,System.Collections.Generic.List{System.String},System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            发送邮件
            </summary>
            <param name="mailSubjct">邮件主题</param>
            <param name="mailBody">邮件正文</param>
            <param name="mailFrom">发送者</param>
            <param name="mailAddress">接收地址列表</param>
            <param name="HostIP">主机IP</param>
            <param name="filename">附件名</param>
            <param name="username">用户名</param>
            <param name="password">密码</param>
            <param name="ssl">加密类型</param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.MailHelper.sendMail(System.String,System.String,System.String,System.Collections.Generic.List{System.String},System.String,System.Int32,System.String,System.String,System.Boolean,System.String,System.Boolean@)">
            <summary>
            发送邮件
            </summary>
            <param name="mailSubjct"></param>
            <param name="mailBody"></param>
            <param name="mailFrom"></param>
            <param name="mailAddress"></param>
            <param name="HostIP"></param>
            <param name="port"></param>
            <param name="username"></param>
            <param name="password"></param>
            <param name="ssl"></param>
            <param name="replyTo"></param>
            <param name="sendOK"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.配置文件操作类.ConfigHelper_sufei.GetValue(System.String)">
            <summary>
            根据Key取Value值
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:DotNet.Utilities.配置文件操作类.ConfigHelper_sufei.SetValue(System.String,System.String)">
            <summary>
            根据Key修改Value
            </summary>
            <param name="key">要修改的Key</param>
            <param name="value">要修改为的值</param>
        </member>
        <member name="M:DotNet.Utilities.配置文件操作类.ConfigHelper_sufei.Add(System.String,System.String)">
            <summary>
            添加新的Key ，Value键值对
            </summary>
            <param name="key">Key</param>
            <param name="value">Value</param>
        </member>
        <member name="M:DotNet.Utilities.配置文件操作类.ConfigHelper_sufei.Remove(System.String)">
            <summary>
            根据Key删除项
            </summary>
            <param name="key">Key</param>
        </member>
        <member name="T:DotNet.Utilities.RandomHelper">
            <summary>
            使用Random类生成伪随机数
            </summary>
        </member>
        <member name="M:DotNet.Utilities.RandomHelper.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:DotNet.Utilities.RandomHelper.GetRandomInt(System.Int32,System.Int32)">
            <summary>
            生成一个指定范围的随机整数，该随机数范围包括最小值，但不包括最大值
            </summary>
            <param name="minNum">最小值</param>
            <param name="maxNum">最大值</param>
        </member>
        <member name="M:DotNet.Utilities.RandomHelper.GetRandomDouble">
            <summary>
            生成一个0.0到1.0的随机小数
            </summary>
        </member>
        <member name="M:DotNet.Utilities.RandomHelper.GetRandomArray``1(``0[])">
            <summary>
            对一个数组进行随机排序
            </summary>
            <typeparam name="T">数组的类型</typeparam>
            <param name="arr">需要随机排序的数组</param>
        </member>
        <member name="M:DotNet.Utilities.RandomHelper.GetRandomCode(System.String,System.Int32)">
            <summary>
            从字符串里随机得到，规定个数的字符串.
            </summary>
            <param name="allChar"></param>
            <param name="CodeCount"></param>
            <returns></returns>
        </member>
        <member name="P:DotNet.Utilities.HTMLHelper.CookieContainer">
            <summary> 
            Cookie
            </summary> 
        </member>
        <member name="P:DotNet.Utilities.HTMLHelper.Encoding">
            <summary> 
            语言
            </summary> 
        </member>
        <member name="M:DotNet.Utilities.HTMLHelper.GetHtml(System.String,System.String,System.Boolean,System.Net.CookieContainer)">
            <summary>
            获取HTML
            </summary>
            <param name="url">地址</param>
            <param name="postData">post 提交的字符串</param>
            <param name="isPost">是否是post</param>
            <param name="cookieContainer">CookieContainer</param>
        </member>
        <member name="M:DotNet.Utilities.HTMLHelper.GetHtml(System.String,System.Net.CookieContainer)">
            <summary>
            获取HTML
            </summary>
            <param name="url">地址</param>
            <param name="cookieContainer">CookieContainer</param>
        </member>
        <member name="M:DotNet.Utilities.HTMLHelper.GetStream(System.String,System.Net.CookieContainer)">
            <param name="url">地址</param>
            <param name="cookieContainer">cookieContainer</param>
        </member>
        <member name="M:DotNet.Utilities.HTMLHelper.NoHTML(System.String)">
            <summary>   
            清除HTML标记   
            </summary>   
            <param name="NoHTML">包括HTML的源码</param>   
            <returns>已经去除后的文字</returns>   
        </member>
        <member name="M:DotNet.Utilities.HTMLHelper.GetHref(System.String)">
            <summary>
            获取页面的链接正则
            </summary>
        </member>
        <member name="M:DotNet.Utilities.HTMLHelper.GetImgSrc(System.String,System.String)">
            <summary>
            匹配页面的图片地址
            </summary>
            <param name="imgHttp">要补充的http://路径信息</param>
        </member>
        <member name="M:DotNet.Utilities.HTMLHelper.GetImg(System.String,System.String)">
            <summary>
            匹配<img src="" />中的图片路径实际链接
            </summary>
            <param name="ImgString"><img src="" />字符串</param>
        </member>
        <member name="M:DotNet.Utilities.HTMLHelper.Get_Http(System.String)">
            <summary>
            以GET方式抓取远程页面内容
            </summary>
        </member>
        <member name="M:DotNet.Utilities.HTMLHelper.Post_Http(System.String,System.String,System.String)">
            <summary>
            以POST方式抓取远程页面内容
            </summary>
            <param name="postData">参数列表</param>
        </member>
        <member name="M:DotNet.Utilities.HTMLHelper.ZipHtml(System.String)">
            <summary>
            压缩HTML输出
            </summary>
        </member>
        <member name="M:DotNet.Utilities.HTMLHelper.DelHtml(System.String,System.String)">
            <summary>
            过滤指定HTML标签
            </summary>
            <param name="s_TextStr">要过滤的字符</param>
            <param name="html_Str">a img p div</param>
        </member>
        <member name="M:DotNet.Utilities.HTMLHelper.File(System.String,System.Web.UI.Page)">
            <summary>
            加载文件块
            </summary>
        </member>
        <member name="M:DotNet.Utilities.HTMLHelper.CSS(System.String,System.Web.UI.Page)">
            <summary>
            加载CSS样式文件
            </summary>
        </member>
        <member name="M:DotNet.Utilities.HTMLHelper.JS(System.String,System.Web.UI.Page)">
            <summary>
            加载javascript脚本文件
            </summary>
        </member>
        <member name="T:DotNet.Utilities.JavaScriptPlus">
            <summary>
            JavaScript 操作类
            </summary>
        </member>
        <member name="M:DotNet.Utilities.JavaScriptPlus.ResponseScript(System.Web.UI.Page,System.String)">
            <summary>
            输出自定义脚本信息
            </summary>
            <param name="page">当前页面指针，一般为this</param>
            <param name="script">输出脚本</param>
        </member>
        <member name="M:DotNet.Utilities.JavaScriptPlus.GoHistory(System.Int32)">
            <summary>
            回到历史页面
            </summary>
            <param name="value">-1/1</param>
        </member>
        <member name="M:DotNet.Utilities.JavaScriptPlus.CloseWindow">
            <summary>
            关闭当前窗口
            </summary>
        </member>
        <member name="M:DotNet.Utilities.JavaScriptPlus.RefreshParent(System.String)">
            <summary>
            刷新父窗口
            </summary>
        </member>
        <member name="M:DotNet.Utilities.JavaScriptPlus.RefreshOpener">
            <summary>
            刷新打开窗口
            </summary>
        </member>
        <member name="M:DotNet.Utilities.JavaScriptPlus.JavaScriptLocationHref(System.String)">
            <summary>
            转向Url指定的页面
            </summary>
            <param name="url">连接地址</param>
        </member>
        <member name="M:DotNet.Utilities.JavaScriptPlus.ShowModalDialogWindow(System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            打开指定大小位置的模式对话框
            </summary>
            <param name="webFormUrl">连接地址</param>
            <param name="width">宽</param>
            <param name="height">高</param>
            <param name="top">距离上位置</param>
            <param name="left">距离左位置</param>
        </member>
        <member name="M:DotNet.Utilities.JavaScriptPlus.ShowModalDialogWindow(System.String,System.String)">
            <summary>
            打开模式对话框
            </summary>
            <param name="webFormUrl">链接地址</param>
            <param name="features"></param>
        </member>
        <member name="M:DotNet.Utilities.JavaScriptPlus.ShowModalDialogJavascript(System.String,System.String)">
            <summary>
            打开模式对话框
            </summary>
            <param name="webFormUrl"></param>
            <param name="features"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.JavaScriptPlus.OpenWebFormSize(System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            打开指定大小的新窗体
            </summary>
            <param name="url">地址</param>
            <param name="width">宽</param>
            <param name="heigth">高</param>
            <param name="top">头位置</param>
            <param name="left">左位置</param>
        </member>
        <member name="M:DotNet.Utilities.JavaScriptPlus.JavaScriptExitIfream(System.String)">
            <summary>
            页面跳转（跳出框架）
            </summary>
            <param name="url"></param>
        </member>
        <member name="T:DotNet.Utilities.DownLoadHelper">
            <summary>
            文件下载帮助类
            </summary>
        </member>
        <member name="M:DotNet.Utilities.DownLoadHelper.ResponseFile(System.Web.HttpRequest,System.Web.HttpResponse,System.String,System.String,System.Int64)">
            <summary>
             输出硬盘文件，提供下载 支持大文件、续传、速度限制、资源占用小
            </summary>
            <param name="_Request">Page.Request对象</param>
            <param name="_Response">Page.Response对象</param>
            <param name="_fileName">下载文件名</param>
            <param name="_fullPath">带文件名下载路径</param>
            <param name="_speed">每秒允许下载的字节数</param>
            <returns>返回是否成功</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "T:DotNet.Utilities.AppMessage" -->
        <member name="F:DotNet.Utilities.AppMessage.MSG0000">
            <summary>
            ÌáÊ¾ÐÅÏ¢.
            </summary>
        </member>
        <member name="F:DotNet.Utilities.AppMessage.MSG0001">
            <summary>
            ·¢ÉúÎ´Öª´íÎó.
            </summary>
        </member>
        <member name="F:DotNet.Utilities.AppMessage.MSG0002">
            <summary>
            Êý¾Ý¿âÁª½Ó²»Õý³£.
            </summary>
        </member>
        <member name="F:DotNet.Utilities.AppMessage.MSG0003">
            <summary>
            WebServiceÁª½Ó²»Õý³£.
            </summary>
        </member>
        <member name="F:DotNet.Utilities.AppMessage.MSG0004">
            <summary>
            ÈÎºÎÊý¾ÝÎ´±»ÐÞ¸Ä.
            </summary>
        </member>
        <member name="F:DotNet.Utilities.AppMessage.MSG0005">
            <summary>
            ¼ÇÂ¼Î´ÕÒµ½,¿ÉÄÜÒÑ±»ÆäËûÈËÉ¾³ý.
            </summary>
        </member>
        <member name="F:DotNet.Utilities.AppMessage.MSG0006">
            <summary>
            Êý¾ÝÒÑ±»ÆäËûÈËÐÞ¸Ä,Çë°´F5¼ü,ÖØÐÂË¢ÐÂ»ñµÃÊý¾Ý.
            </summary>
        </member>
        <member name="F:DotNet.Utilities.AppMessage.MSG0007">
            <summary>
            '{O}'²»ÔÊÐíÎª¿Õ,ÇëÊäÈë.
            </summary>
        </member>
        <member name="F:DotNet.Utilities.AppMessage.MSG0008">
            <summary>
            {0} ÒÑ´æÔÚ,²»¿ÉÒÔÖØ¸´.
            </summary>
        </member>
        <member name="F:DotNet.Utilities.AppMessage.MSG0009">
            <summary>
            ÐÂÔö³É¹¦.
            </summary>
        </member>
        <member name="F:DotNet.Utilities.AppMessage.MSG0010">
            <summary>
            ¸üÐÂ³É¹¦.
            </summary>
        </member>
        <member name="F:DotNet.Utilities.AppMessage.MSG0011">
            <summary>
            ±£´æ³É¹¦.
            </summary>
        </member>
        <member name="F:DotNet.Utilities.AppMessage.MSG0012">
            <summary>
            ÅúÁ¿±£´æ³É¹¦.
            </summary>
        </member>
        <member name="F:DotNet.Utilities.AppMessage.MSG0013">
            <summary>
            É¾³ý³É¹¦.
            </summary>
        </member>
        <member name="F:DotNet.Utilities.AppMessage.MSG0014">
            <summary>
            ÅúÁ¿É¾³ý³É¹¦.
            </summary>
        </member>
        <member name="F:DotNet.Utilities.AppMessage.MSG0015">
            <summary>
            ÄúÈ·ÈÏÉ¾³ýÂð?
            </summary>
        </member>
        <member name="F:DotNet.Utilities.AppMessage.MSG0016">
            <summary>
            ÄúÈ·ÈÏÉ¾³ý '{0}'Âð?
            </summary>
        </member>
        <member name="F:DotNet.Utilities.AppMessage.MSG0017">
            <summary>
            µ±Ç°¼ÇÂ¼²»ÔÊÐí±»É¾³ý.
            </summary>
        </member>
        <member name="F:DotNet.Utilities.AppMessage.MSG0018">
            <summary>
            µ±Ç°¼ÇÂ¼ '{0}' ²»ÔÊÐí±»É¾³ý.
            </summary>
        </member>
        <member name="F:DotNet.Utilities.AppMessage.MSG0019">
            <summary>
            µ±Ç°¼ÇÂ¼²»ÔÊÐí±»±à¼­,Çë°´F5¼ü,ÖØÐÂ»ñÈ¡Êý¾Ý×îÐÂÊý¾Ý.
            </summary>
        </member>
        <member name="F:DotNet.Utilities.AppMessage.MSG0020">
            <summary>
            µ±Ç°¼ÇÂ¼ '{0}' ²»ÔÊÐí±»±à¼­,Çë°´F5¼ü,ÖØÐÂ»ñÈ¡Êý¾Ý×îÐÂÊý¾Ý.
            </summary>
        </member>
        <member name="F:DotNet.Utilities.AppMessage.MSG0021">
            <summary>
            µ±Ç°¼ÇÂ¼ÒÑÊÇµÚÒ»Ìõ¼ÇÂ¼.
            </summary>
        </member>
        <member name="F:DotNet.Utilities.AppMessage.MSG0022">
            <summary>
            µ±Ç°¼ÇÂ¼ÒÑÊÇ×îºóÒ»Ìõ¼ÇÂ¼.
            </summary>
        </member>
        <member name="F:DotNet.Utilities.AppMessage.MSG0023">
            <summary>
            ÇëÖÁÉÙÑ¡ÔñÒ»Ïî.
            </summary>
        </member>
        <member name="F:DotNet.Utilities.AppMessage.MSG0024">
            <summary>
            ÇëÖÁÉÙÑ¡ÔñÒ»Ïî '{0}'.
            </summary>
        </member>
        <member name="F:DotNet.Utilities.AppMessage.MSG0025">
            <summary>
            '{0}'²»ÄÜ´óÓÚ'{1}'.
            </summary>
        </member>
        <member name="F:DotNet.Utilities.AppMessage.MSG0026">
            <summary>
            '{0}'²»ÄÜÐ¡ÓÚ'{1}'.
            </summary>
        </member>
        <member name="F:DotNet.Utilities.AppMessage.MSG0027">
            <summary>
            '{0}'²»ÄÜµÈÓÚ'{1}'.
            </summary>
        </member>
        <member name="F:DotNet.Utilities.AppMessage.MSG0028">
            <summary>
            ÊäÈëµÄ'{0}'²»ÊÇÓÐÐ§µÄÈÕÆÚ.
            </summary>
        </member>
        <member name="F:DotNet.Utilities.AppMessage.MSG0029">
            <summary>
            ÊäÈëµÄ'{0}'²»ÊÇÓÐÐ§µÄ×Ö·û.
            </summary>
        </member>
        <member name="F:DotNet.Utilities.AppMessage.MSG0030">
            <summary>
            ÊäÈëµÄ'{0}'²»ÊÇÓÐÐ§µÄÊý×Ö.
            </summary>
        </member>
        <member name="F:DotNet.Utilities.AppMessage.MSG0031">
            <summary>
            ÊäÈëµÄ'{0}'²»ÊÇÓÐÐ§µÄ½ð¶î.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:DotNet.Utilities.AppMessage.MSG0032" -->
        <member name="F:DotNet.Utilities.AppMessage.MSG0033">
            <summary>
            Êý¾ÝÒÑ¾­±»ÒýÓÃ,ÓÐ¹ØÁªÊý¾ÝÔÚ
            </summary>
        </member>
        <member name="F:DotNet.Utilities.AppMessage.MSG0034">
            <summary>
            Êý¾ÝÒÑ¾­±»ÒýÓÃ,ÓÐ¹ØÁªÊý¾ÝÔÚ.ÊÇ·ñÇ¿ÖÆÉ¾³ýÊý¾Ý?
            </summary>
        </member>
        <member name="F:DotNet.Utilities.AppMessage.MSG0035">
            <summary>
            {0} ÓÐ×Ó½Úµã²»ÔÊÐí±»É¾³ý.
            </summary>
        </member>
        <member name="F:DotNet.Utilities.AppMessage.MSG0036">
            <summary>
            {0} ²»ÄÜÒÆ¶¯µ½ {1}.
            </summary>
        </member>
        <member name="F:DotNet.Utilities.AppMessage.MSG0037">
            <summary>
            {0} ÏÂµÄ×Ó½Úµã²»ÄÜÒÆ¶¯µ½ {1}.
            </summary>
        </member>
        <member name="F:DotNet.Utilities.AppMessage.MSG0038">
            <summary>
            È·ÈÏÒÆ¶¯ {0} µ½ {1} Âð?
            </summary>
        </member>
        <member name="F:DotNet.Utilities.AppMessage.MSG0039">
            <summary>
            '{0}'²»µÈÓÚ'{1}'.
            </summary>
        </member>
        <member name="F:DotNet.Utilities.AppMessage.MSG0040">
            <summary>
            {0} ´íÎó.
            </summary>
        </member>
        <member name="F:DotNet.Utilities.AppMessage.MSG0041">
            <summary>
            È·ÈÏÉóºËÍ¨¹ýÂð?.
            </summary>
        </member>
        <member name="F:DotNet.Utilities.AppMessage.MSG0042">
            <summary>
            È·ÈÏ²µ»ØÂð?.
            </summary>
        </member>
        <member name="F:DotNet.Utilities.AppMessage.MSG0043">
            <summary>
            ³É¹¦Ëø¶¨Êý¾Ý.
            </summary>
        </member>
        <member name="F:DotNet.Utilities.AppMessage.MSG0044">
            <summary>
            ²»ÄÜËø¶¨Êý¾Ý.
            </summary>
        </member>
        <member name="F:DotNet.Utilities.AppMessage.MSG0045">
            <summary>
            Êý¾Ý±»ÐÞ¸ÄÌáÊ¾
            </summary>
        </member>
        <member name="F:DotNet.Utilities.AppMessage.MSG0046">
            <summary>
            ×î½ü {0} ´ÎÄÚÃÜÂë²»ÄÜÖØ¸´¡£
            </summary>
        </member>
        <member name="F:DotNet.Utilities.AppMessage.MSG0047">
            <summary>
            ÃÜÂëÒÑ¹ýÆÚ£¬ÕË»§±»Ëø¶¨£¬ÇëÁªÏµÏµÍ³¹ÜÀíÔ±¡£
            </summary>
        </member>
        <member name="F:DotNet.Utilities.AppMessage.MSG0065">
            <summary>
            Êý¾ÝÒÑ¾­¸Ä±ä£¬²»±£´æÊý¾Ý£¿
            </summary>
        </member>
        <member name="F:DotNet.Utilities.AppMessage.MSG0075">
            <summary>
            ÄúÈ·ÈÏÒÆ³ýÂð?
            </summary>
        </member>
        <member name="F:DotNet.Utilities.AppMessage.MSG0076">
            <summary>
            ÄúÈ·ÈÏÒÆ³ý '{0}'Âð?
            </summary>
        </member>
        <member name="M:DotNet.Utilities.AppMessage.Format(System.String,System.String[])">
            <summary>
            ¸ñÊ½»¯Ò»¸ö×ÊÔ´×Ö·û´®
            </summary>
            <param name="value">Ä¿±ê×Ö·û´®</param>
            <param name="messages">´«ÈëµÄÐÅÏ¢</param>
            <returns>×Ö·û´®</returns>
        </member>
        <member name="M:DotNet.Utilities.AppMessage.GetMessage(System.String)">
            <summary>
            ¶ÁÈ¡Ò»¸ö×ÊÔ´¶¨Òå
            </summary>
            <param name="id">×ÊÔ´´úÂë</param>
            <returns>×Ö·û´®</returns>
        </member>
        <member name="M:DotNet.Utilities.AppMessage.GetMessage(System.String,System.String[])">
            <summary>
            ¶ÁÈ¡Ò»¸ö×ÊÔ´¶¨Òå
            </summary>
            <param name="id">×ÊÔ´´úÂë</param>
            <param name="messages">´«ÈëµÄÐÅÏ¢</param>
            <returns>×Ö·û´®</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "T:DotNet.Utilities.ResourceManager" -->
        <!-- Badly formed XML comment ignored for member "T:DotNet.Utilities.ResourceManagerWrapper" -->
        <!-- Badly formed XML comment ignored for member "T:DotNet.Utilities.Resources" -->
        <member name="M:DotNet.Utilities.Resources.Set(System.String,System.String)">
            <summary>
            JiRiGaLa 2007.05.02
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:DotNet.Utilities.UpLoadFiles">
            <summary>
            UpLoadFiles 的摘要说明
            </summary>
        </member>
        <member name="M:DotNet.Utilities.UpLoadFiles.UploadFile(System.String,System.Int32,System.String[],System.Web.UI.HtmlControls.HtmlInputFile,System.String@,System.Int32@)">
            <summary>
            上传文件
            </summary>
            <param name="filePath">保存文件地址</param>
            <param name="maxSize">文件最大大小</param>
            <param name="fileType">文件后缀类型</param>
            <param name="TargetFile">控件名</param>
            <param name="saveFileName">保存后的文件名和地址</param>
            <param name="fileSize">文件大小</param>
            <returns></returns>
        </member>
        <member name="T:DotNet.Utilities.DirFileHelper">
            <summary>
            文件操作夹
            </summary>
        </member>
        <member name="M:DotNet.Utilities.DirFileHelper.IsExistDirectory(System.String)">
            <summary>
            检测指定目录是否存在
            </summary>
            <param name="directoryPath">目录的绝对路径</param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.DirFileHelper.IsExistFile(System.String)">
            <summary>
            检测指定文件是否存在,如果存在则返回true。
            </summary>
            <param name="filePath">文件的绝对路径</param>        
        </member>
        <member name="M:DotNet.Utilities.DirFileHelper.GetFileNames(System.String)">
            <summary>
            获取指定目录中所有文件列表
            </summary>
            <param name="directoryPath">指定目录的绝对路径</param>        
        </member>
        <member name="M:DotNet.Utilities.DirFileHelper.GetDirectories(System.String)">
            <summary>
            获取指定目录中所有子目录列表,若要搜索嵌套的子目录列表,请使用重载方法.
            </summary>
            <param name="directoryPath">指定目录的绝对路径</param>        
        </member>
        <member name="M:DotNet.Utilities.DirFileHelper.GetFileNames(System.String,System.String,System.Boolean)">
            <summary>
            获取指定目录及子目录中所有文件列表
            </summary>
            <param name="directoryPath">指定目录的绝对路径</param>
            <param name="searchPattern">模式字符串，"*"代表0或N个字符，"?"代表1个字符。
            范例："Log*.xml"表示搜索所有以Log开头的Xml文件。</param>
            <param name="isSearchChild">是否搜索子目录</param>
        </member>
        <member name="M:DotNet.Utilities.DirFileHelper.IsEmptyDirectory(System.String)">
            <summary>
            检测指定目录是否为空
            </summary>
            <param name="directoryPath">指定目录的绝对路径</param>        
        </member>
        <member name="M:DotNet.Utilities.DirFileHelper.Contains(System.String,System.String)">
            <summary>
            检测指定目录中是否存在指定的文件,若要搜索子目录请使用重载方法.
            </summary>
            <param name="directoryPath">指定目录的绝对路径</param>
            <param name="searchPattern">模式字符串，"*"代表0或N个字符，"?"代表1个字符。
            范例："Log*.xml"表示搜索所有以Log开头的Xml文件。</param>        
        </member>
        <member name="M:DotNet.Utilities.DirFileHelper.Contains(System.String,System.String,System.Boolean)">
            <summary>
            检测指定目录中是否存在指定的文件
            </summary>
            <param name="directoryPath">指定目录的绝对路径</param>
            <param name="searchPattern">模式字符串，"*"代表0或N个字符，"?"代表1个字符。
            范例："Log*.xml"表示搜索所有以Log开头的Xml文件。</param> 
            <param name="isSearchChild">是否搜索子目录</param>
        </member>
        <member name="M:DotNet.Utilities.DirFileHelper.CreateDir(System.String)">
            <summary>
            创建目录
            </summary>
            <param name="dir">要创建的目录路径包括目录名</param>
        </member>
        <member name="M:DotNet.Utilities.DirFileHelper.DeleteDir(System.String)">
            <summary>
            删除目录
            </summary>
            <param name="dir">要删除的目录路径和名称</param>
        </member>
        <member name="M:DotNet.Utilities.DirFileHelper.DeleteFile(System.String)">
            <summary>
            删除文件
            </summary>
            <param name="file">要删除的文件路径和名称</param>
        </member>
        <member name="M:DotNet.Utilities.DirFileHelper.CreateFile(System.String,System.String)">
            <summary>
            创建文件
            </summary>
            <param name="dir">带后缀的文件名</param>
            <param name="pagestr">文件内容</param>
        </member>
        <member name="M:DotNet.Utilities.DirFileHelper.MoveFile(System.String,System.String)">
            <summary>
            移动文件(剪贴--粘贴)
            </summary>
            <param name="dir1">要移动的文件的路径及全名(包括后缀)</param>
            <param name="dir2">文件移动到新的位置,并指定新的文件名</param>
        </member>
        <member name="M:DotNet.Utilities.DirFileHelper.CopyFile(System.String,System.String)">
            <summary>
            复制文件
            </summary>
            <param name="dir1">要复制的文件的路径已经全名(包括后缀)</param>
            <param name="dir2">目标位置,并指定新的文件名</param>
        </member>
        <member name="M:DotNet.Utilities.DirFileHelper.GetDateDir">
            <summary>
            根据时间得到目录名yyyyMMdd
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.DirFileHelper.GetDateFile">
            <summary>
            根据时间得到文件名HHmmssff
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.DirFileHelper.CopyFolder(System.String,System.String)">
            <summary>
            复制文件夹(递归)
            </summary>
            <param name="varFromDirectory">源文件夹路径</param>
            <param name="varToDirectory">目标文件夹路径</param>
        </member>
        <member name="M:DotNet.Utilities.DirFileHelper.ExistsFile(System.String)">
            <summary>
            检查文件,如果文件不存在则创建  
            </summary>
            <param name="FilePath">路径,包括文件名</param>
        </member>
        <member name="M:DotNet.Utilities.DirFileHelper.DeleteFolderFiles(System.String,System.String)">
            <summary>
            删除指定文件夹对应其他文件夹里的文件
            </summary>
            <param name="varFromDirectory">指定文件夹路径</param>
            <param name="varToDirectory">对应其他文件夹路径</param>
        </member>
        <member name="M:DotNet.Utilities.DirFileHelper.GetFileName(System.String)">
            <summary>
            从文件的绝对路径中获取文件名( 包含扩展名 )
            </summary>
            <param name="filePath">文件的绝对路径</param>        
        </member>
        <member name="M:DotNet.Utilities.DirFileHelper.CopyFiles(System.String,System.String)">
            <summary>
            复制文件参考方法,页面中引用
            </summary>
            <param name="cDir">新路径</param>
            <param name="TempId">模板引擎替换编号</param>
        </member>
        <member name="M:DotNet.Utilities.DirFileHelper.CreateDirectory(System.String)">
            <summary>
            创建一个目录
            </summary>
            <param name="directoryPath">目录的绝对路径</param>
        </member>
        <member name="M:DotNet.Utilities.DirFileHelper.CreateFile(System.String)">
            <summary>
            创建一个文件。
            </summary>
            <param name="filePath">文件的绝对路径</param>
        </member>
        <member name="M:DotNet.Utilities.DirFileHelper.CreateFile(System.String,System.Byte[])">
            <summary>
            创建一个文件,并将字节流写入文件。
            </summary>
            <param name="filePath">文件的绝对路径</param>
            <param name="buffer">二进制流数据</param>
        </member>
        <member name="M:DotNet.Utilities.DirFileHelper.GetLineCount(System.String)">
            <summary>
            获取文本文件的行数
            </summary>
            <param name="filePath">文件的绝对路径</param>        
        </member>
        <member name="M:DotNet.Utilities.DirFileHelper.GetFileSize(System.String)">
            <summary>
            获取一个文件的长度,单位为Byte
            </summary>
            <param name="filePath">文件的绝对路径</param>        
        </member>
        <member name="M:DotNet.Utilities.DirFileHelper.GetDirectories(System.String,System.String,System.Boolean)">
            <summary>
            获取指定目录及子目录中所有子目录列表
            </summary>
            <param name="directoryPath">指定目录的绝对路径</param>
            <param name="searchPattern">模式字符串，"*"代表0或N个字符，"?"代表1个字符。
            范例："Log*.xml"表示搜索所有以Log开头的Xml文件。</param>
            <param name="isSearchChild">是否搜索子目录</param>
        </member>
        <member name="M:DotNet.Utilities.DirFileHelper.WriteText(System.String,System.String,System.Text.Encoding)">
            <summary>
            向文本文件中写入内容
            </summary>
            <param name="filePath">文件的绝对路径</param>
            <param name="text">写入的内容</param>
            <param name="encoding">编码</param>
        </member>
        <member name="M:DotNet.Utilities.DirFileHelper.AppendText(System.String,System.String)">
            <summary>
            向文本文件的尾部追加内容
            </summary>
            <param name="filePath">文件的绝对路径</param>
            <param name="content">写入的内容</param>
        </member>
        <member name="M:DotNet.Utilities.DirFileHelper.Copy(System.String,System.String)">
            <summary>
            将源文件的内容复制到目标文件中
            </summary>
            <param name="sourceFilePath">源文件的绝对路径</param>
            <param name="destFilePath">目标文件的绝对路径</param>
        </member>
        <member name="M:DotNet.Utilities.DirFileHelper.Move(System.String,System.String)">
            <summary>
            将文件移动到指定目录
            </summary>
            <param name="sourceFilePath">需要移动的源文件的绝对路径</param>
            <param name="descDirectoryPath">移动到的目录的绝对路径</param>
        </member>
        <member name="M:DotNet.Utilities.DirFileHelper.GetFileNameNoExtension(System.String)">
            <summary>
            从文件的绝对路径中获取文件名( 不包含扩展名 )
            </summary>
            <param name="filePath">文件的绝对路径</param>        
        </member>
        <member name="M:DotNet.Utilities.DirFileHelper.GetExtension(System.String)">
            <summary>
            从文件的绝对路径中获取扩展名
            </summary>
            <param name="filePath">文件的绝对路径</param>        
        </member>
        <member name="M:DotNet.Utilities.DirFileHelper.ClearDirectory(System.String)">
            <summary>
            清空指定目录下所有文件及子目录,但该目录依然保存.
            </summary>
            <param name="directoryPath">指定目录的绝对路径</param>
        </member>
        <member name="M:DotNet.Utilities.DirFileHelper.ClearFile(System.String)">
            <summary>
            清空文件内容
            </summary>
            <param name="filePath">文件的绝对路径</param>
        </member>
        <member name="M:DotNet.Utilities.DirFileHelper.DeleteDirectory(System.String)">
            <summary>
            删除指定目录及其所有子目录
            </summary>
            <param name="directoryPath">指定目录的绝对路径</param>
        </member>
        <member name="M:DotNet.Utilities.BasePage.ExportData(System.Web.UI.WebControls.GridView)">
            <summary>
            导出Excel
            </summary>
            <param name="obj"></param>
        </member>
        <member name="T:DotNet.Utilities.ConfigHelper">
            <summary>
            web.config²Ù×÷Àà
            </summary>
        </member>
        <member name="M:DotNet.Utilities.ConfigHelper.GetConfigString(System.String)">
            <summary>
            µÃµ½AppSettingsÖÐµÄÅäÖÃ×Ö·û´®ÐÅÏ¢
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.ConfigHelper.GetConfigBool(System.String)">
            <summary>
            µÃµ½AppSettingsÖÐµÄÅäÖÃBoolÐÅÏ¢
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.ConfigHelper.GetConfigDecimal(System.String)">
            <summary>
            µÃµ½AppSettingsÖÐµÄÅäÖÃDecimalÐÅÏ¢
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.ConfigHelper.GetConfigInt(System.String)">
            <summary>
            µÃµ½AppSettingsÖÐµÄÅäÖÃintÐÅÏ¢
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:DotNet.Utilities.DataCache">
            <summary>
            »º´æÏà¹ØµÄ²Ù×÷Àà
            </summary>
        </member>
        <member name="M:DotNet.Utilities.DataCache.GetCache(System.String)">
            <summary>
            »ñÈ¡µ±Ç°Ó¦ÓÃ³ÌÐòÖ¸¶¨CacheKeyµÄCacheÖµ
            </summary>
            <param name="CacheKey"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.DataCache.SetCache(System.String,System.Object)">
            <summary>
            ÉèÖÃµ±Ç°Ó¦ÓÃ³ÌÐòÖ¸¶¨CacheKeyµÄCacheÖµ
            </summary>
            <param name="CacheKey"></param>
            <param name="objObject"></param>
        </member>
        <member name="M:DotNet.Utilities.DataCache.SetCache(System.String,System.Object,System.DateTime,System.TimeSpan)">
            <summary>
            ÉèÖÃµ±Ç°Ó¦ÓÃ³ÌÐòÖ¸¶¨CacheKeyµÄCacheÖµ
            </summary>
            <param name="CacheKey"></param>
            <param name="objObject"></param>
        </member>
        <member name="T:DotNet.Utilities.DataToExcel">
            <summary>
            ²Ù×÷EXCELµ¼³öÊý¾Ý±¨±íµÄÀà
            </summary>
        </member>
        <member name="P:DotNet.Utilities.DataToExcel.TitleColorIndex">
            <summary>
            ±êÌâ±³¾°É«
            </summary>
        </member>
        <member name="M:DotNet.Utilities.DataToExcel.CreateExcel">
            <summary>
            ´´½¨Ò»¸öExcelÊ¾Àý
            </summary>
        </member>
        <member name="M:DotNet.Utilities.DataToExcel.KillExcelProcess">
            <summary>
            ½áÊøExcel½ø³Ì
            </summary>
        </member>
        <member name="M:DotNet.Utilities.DataToExcel.ClearFile(System.String)">
            <summary>
            ½«DataTableµÄÊý¾Ýµ¼³öÏÔÊ¾Îª±¨±í(²»Ê¹ÓÃExcel¶ÔÏó)
            </summary>
            <param name="dt">Êý¾ÝDataTable</param>
            <param name="strTitle">±êÌâ</param>
            <param name="FilePath">Éú³ÉÎÄ¼þµÄÂ·¾¶</param>
            <param name="nameList"></param>
            <returns></returns>
        </member>
        <member name="T:DotNet.Utilities.DEncrypt">
            <summary>
            Encrypt µÄÕªÒªËµÃ÷¡£
            </summary>
        </member>
        <member name="M:DotNet.Utilities.DEncrypt.#ctor">
            <summary>
            ¹¹Ôì·½·¨
            </summary>
        </member>
        <member name="M:DotNet.Utilities.DEncrypt.Encrypt(System.String)">
            <summary>
            Ê¹ÓÃÈ±Ê¡ÃÜÔ¿×Ö·û´®¼ÓÃÜstring
            </summary>
            <param name="original">Ã÷ÎÄ</param>
            <returns>ÃÜÎÄ</returns>
        </member>
        <member name="M:DotNet.Utilities.DEncrypt.Decrypt(System.String)">
            <summary>
            Ê¹ÓÃÈ±Ê¡ÃÜÔ¿×Ö·û´®½âÃÜstring
            </summary>
            <param name="original">ÃÜÎÄ</param>
            <returns>Ã÷ÎÄ</returns>
        </member>
        <member name="M:DotNet.Utilities.DEncrypt.Encrypt(System.String,System.String)">
            <summary>
            Ê¹ÓÃ¸ø¶¨ÃÜÔ¿×Ö·û´®¼ÓÃÜstring
            </summary>
            <param name="original">Ô­Ê¼ÎÄ×Ö</param>
            <param name="key">ÃÜÔ¿</param>
            <param name="encoding">×Ö·û±àÂë·½°¸</param>
            <returns>ÃÜÎÄ</returns>
        </member>
        <member name="M:DotNet.Utilities.DEncrypt.Decrypt(System.String,System.String)">
            <summary>
            Ê¹ÓÃ¸ø¶¨ÃÜÔ¿×Ö·û´®½âÃÜstring
            </summary>
            <param name="original">ÃÜÎÄ</param>
            <param name="key">ÃÜÔ¿</param>
            <returns>Ã÷ÎÄ</returns>
        </member>
        <member name="M:DotNet.Utilities.DEncrypt.Decrypt(System.String,System.String,System.Text.Encoding)">
            <summary>
            Ê¹ÓÃ¸ø¶¨ÃÜÔ¿×Ö·û´®½âÃÜstring,·µ»ØÖ¸¶¨±àÂë·½Ê½Ã÷ÎÄ
            </summary>
            <param name="encrypted">ÃÜÎÄ</param>
            <param name="key">ÃÜÔ¿</param>
            <param name="encoding">×Ö·û±àÂë·½°¸</param>
            <returns>Ã÷ÎÄ</returns>
        </member>
        <member name="M:DotNet.Utilities.DEncrypt.Decrypt(System.Byte[])">
            <summary>
            Ê¹ÓÃÈ±Ê¡ÃÜÔ¿×Ö·û´®½âÃÜbyte[]
            </summary>
            <param name="encrypted">ÃÜÎÄ</param>
            <param name="key">ÃÜÔ¿</param>
            <returns>Ã÷ÎÄ</returns>
        </member>
        <member name="M:DotNet.Utilities.DEncrypt.Encrypt(System.Byte[])">
            <summary>
            Ê¹ÓÃÈ±Ê¡ÃÜÔ¿×Ö·û´®¼ÓÃÜ
            </summary>
            <param name="original">Ô­Ê¼Êý¾Ý</param>
            <param name="key">ÃÜÔ¿</param>
            <returns>ÃÜÎÄ</returns>
        </member>
        <member name="M:DotNet.Utilities.DEncrypt.MakeMD5(System.Byte[])">
            <summary>
            Éú³ÉMD5ÕªÒª
            </summary>
            <param name="original">Êý¾ÝÔ´</param>
            <returns>ÕªÒª</returns>
        </member>
        <member name="M:DotNet.Utilities.DEncrypt.Encrypt(System.Byte[],System.Byte[])">
            <summary>
            Ê¹ÓÃ¸ø¶¨ÃÜÔ¿¼ÓÃÜ
            </summary>
            <param name="original">Ã÷ÎÄ</param>
            <param name="key">ÃÜÔ¿</param>
            <returns>ÃÜÎÄ</returns>
        </member>
        <member name="M:DotNet.Utilities.DEncrypt.Decrypt(System.Byte[],System.Byte[])">
            <summary>
            Ê¹ÓÃ¸ø¶¨ÃÜÔ¿½âÃÜÊý¾Ý
            </summary>
            <param name="encrypted">ÃÜÎÄ</param>
            <param name="key">ÃÜÔ¿</param>
            <returns>Ã÷ÎÄ</returns>
        </member>
        <member name="T:DotNet.Utilities.DESEncrypt">
            <summary>
            DES¼ÓÃÜ/½âÃÜÀà¡£
            </summary>
        </member>
        <member name="M:DotNet.Utilities.DESEncrypt.Encrypt(System.String)">
            <summary>
            ¼ÓÃÜ
            </summary>
            <param name="Text"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.DESEncrypt.Encrypt(System.String,System.String)">
            <summary> 
            ¼ÓÃÜÊý¾Ý 
            </summary> 
            <param name="Text"></param> 
            <param name="sKey"></param> 
            <returns></returns> 
        </member>
        <member name="M:DotNet.Utilities.DESEncrypt.Decrypt(System.String)">
            <summary>
            ½âÃÜ
            </summary>
            <param name="Text"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.DESEncrypt.Decrypt(System.String,System.String)">
            <summary> 
            ½âÃÜÊý¾Ý 
            </summary> 
            <param name="Text"></param> 
            <param name="sKey"></param> 
            <returns></returns> 
        </member>
        <member name="T:DotNet.Utilities.HashEncode">
            <summary>
            µÃµ½Ëæ»ú°²È«Âë£¨¹þÏ£¼ÓÃÜ£©¡£
            </summary>
        </member>
        <member name="M:DotNet.Utilities.HashEncode.GetSecurity">
            <summary>
            µÃµ½Ëæ»ú¹þÏ£¼ÓÃÜ×Ö·û´®
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.HashEncode.GetRandomValue">
            <summary>
            µÃµ½Ò»¸öËæ»úÊýÖµ
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.HashEncode.HashEncoding(System.String)">
            <summary>
            ¹þÏ£¼ÓÃÜÒ»¸ö×Ö·û´®
            </summary>
            <param name="Security"></param>
            <returns></returns>
        </member>
        <member name="T:DotNet.Utilities.RSACryption">
            <summary> 
            RSA¼ÓÃÜ½âÃÜ¼°RSAÇ©ÃûºÍÑéÖ¤
            </summary> 
        </member>
        <member name="M:DotNet.Utilities.RSACryption.RSAKey(System.String@,System.String@)">
            <summary>
            RSA µÄÃÜÔ¿²úÉú ²úÉúË½Ô¿ ºÍ¹«Ô¿ 
            </summary>
            <param name="xmlKeys"></param>
            <param name="xmlPublicKey"></param>
        </member>
        <member name="M:DotNet.Utilities.ExportExcel.ExportData(System.String,System.String)">
            <summary>
            将整个网页导出来Excel
            </summary>
            <param name="strContent"></param>
            <param name="FileName"></param>
        </member>
        <member name="M:DotNet.Utilities.ExportExcel.ExportData(System.Web.UI.WebControls.GridView)">
            <summary>
            将GridView数据导出Excel
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:DotNet.Utilities.FileOperateHelper.GetPostfixStr(System.String)">
            <summary>
            取后缀名
            </summary>
            <param name="filename">文件名</param>
            <returns>.gif|.html格式</returns>
        </member>
        <member name="M:DotNet.Utilities.FileOperateHelper.WriteFile(System.String,System.String)">
            <summary>
            写文件
            </summary>
            <param name="Path">文件路径</param>
            <param name="Strings">文件内容</param>
        </member>
        <member name="M:DotNet.Utilities.FileOperateHelper.ReadFile(System.String)">
            <summary>
            读文件
            </summary>
            <param name="Path">文件路径</param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.FileOperateHelper.FileAdd(System.String,System.String)">
            <summary>
            追加文件
            </summary>
            <param name="Path">文件路径</param>
            <param name="strings">内容</param>
        </member>
        <member name="M:DotNet.Utilities.FileOperateHelper.FileCoppy(System.String,System.String)">
            <summary>
            拷贝文件
            </summary>
            <param name="OrignFile">原始文件</param>
            <param name="NewFile">新文件路径</param>
        </member>
        <member name="M:DotNet.Utilities.FileOperateHelper.FileDel(System.String)">
            <summary>
            删除文件
            </summary>
            <param name="Path">路径</param>
        </member>
        <member name="M:DotNet.Utilities.FileOperateHelper.FileMove(System.String,System.String)">
            <summary>
            移动文件
            </summary>
            <param name="OrignFile">原始路径</param>
            <param name="NewFile">新路径</param>
        </member>
        <member name="M:DotNet.Utilities.FileOperateHelper.FolderCreate(System.String,System.String)">
            <summary>
            在当前目录下创建目录
            </summary>
            <param name="OrignFolder">当前目录</param>
            <param name="NewFloder">新目录</param>
        </member>
        <member name="M:DotNet.Utilities.FileOperateHelper.FolderCreate(System.String)">
            <summary>
            创建文件夹
            </summary>
            <param name="Path"></param>
        </member>
        <member name="M:DotNet.Utilities.FileOperateHelper.DeleteFolder(System.String)">
            <summary>
            递归删除文件夹目录及文件
            </summary>
            <param name="dir"></param>  
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.FileOperateHelper.CopyDir(System.String,System.String)">
            <summary>
            指定文件夹下面的所有内容copy到目标文件夹下面
            </summary>
            <param name="srcPath">原始路径</param>
            <param name="aimPath">目标文件夹</param>
        </member>
        <member name="M:DotNet.Utilities.FileOperateHelper.GetFoldAll(System.String)">
            <summary>
            获取指定文件夹下所有子目录及文件
            </summary>
            <param name="Path">详细路径</param>
        </member>
        <member name="M:DotNet.Utilities.FileOperateHelper.ListTreeShow(System.IO.DirectoryInfo,System.Int32,System.String)">
            <summary>
            获取指定文件夹下所有子目录及文件函数
            </summary>
            <param name="theDir">指定目录</param>
            <param name="nLevel">默认起始值,调用时,一般为0</param>
            <param name="Rn">用于迭加的传入值,一般为空</param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.FileOperateHelper.GetFoldAll(System.String,System.String,System.String)">
             <summary>
             获取指定文件夹下所有子目录及文件(下拉框形)
             </summary>
             <param name="Path">详细路径</param>
            <param name="DropName">下拉列表名称</param>
            <param name="tplPath">默认选择模板名称</param>
        </member>
        <member name="M:DotNet.Utilities.FileOperateHelper.ListTreeShow(System.IO.DirectoryInfo,System.Int32,System.String,System.String)">
            <summary>
            获取指定文件夹下所有子目录及文件函数
            </summary>
            <param name="theDir">指定目录</param>
            <param name="nLevel">默认起始值,调用时,一般为0</param>
            <param name="Rn">用于迭加的传入值,一般为空</param>
            <param name="tplPath">默认选择模板名称</param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.FileOperateHelper.GetDirectoryLength(System.String)">
            <summary>
            获取文件夹大小
            </summary>
            <param name="dirPath">文件夹路径</param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.FileOperateHelper.GetFileAttibe(System.String)">
            <summary>
            获取指定文件详细属性
            </summary>
            <param name="filePath">文件详细路径</param>
            <returns></returns>
        </member>
        <member name="T:DotNet.Utilities.BaseRandom">
            <summary>
            BaseRandom
            产生随机数
            
            随机数管理，最大值、最小值可以自己进行设定。
            </summary>
        </member>
        <member name="M:DotNet.Utilities.BaseRandom.GetRandomString">
            <summary>
            产生随机字符
            </summary>
            <returns>字符串</returns>
        </member>
        <member name="M:DotNet.Utilities.BaseRandom.GetRandom">
            <summary>
            产生随机数
            </summary>
            <returns>随机数</returns>
        </member>
        <member name="M:DotNet.Utilities.BaseRandom.GetRandom(System.Int32,System.Int32)">
            <summary>
            产生随机数
            </summary>
            <param name="minimum">最小值</param>
            <param name="maximal">最大值</param>
            <returns>随机数</returns>
        </member>
        <member name="T:DotNet.Utilities.UploadEventArgs">
            <summary>    
            ÉÏ´«Êý¾Ý²ÎÊý    
            </summary>    
        </member>
        <member name="P:DotNet.Utilities.UploadEventArgs.BytesSent">
            <summary>    
            ÒÑ·¢ËÍµÄ×Ö½ÚÊý    
            </summary>    
        </member>
        <member name="P:DotNet.Utilities.UploadEventArgs.TotalBytes">
            <summary>    
            ×Ü×Ö½ÚÊý    
            </summary>    
        </member>
        <member name="T:DotNet.Utilities.DownloadEventArgs">
            <summary>    
            ÏÂÔØÊý¾Ý²ÎÊý    
            </summary>    
        </member>
        <member name="P:DotNet.Utilities.DownloadEventArgs.BytesReceived">
            <summary>    
            ÒÑ½ÓÊÕµÄ×Ö½ÚÊý    
            </summary>    
        </member>
        <member name="P:DotNet.Utilities.DownloadEventArgs.TotalBytes">
            <summary>    
            ×Ü×Ö½ÚÊý    
            </summary>    
        </member>
        <member name="P:DotNet.Utilities.DownloadEventArgs.ReceivedData">
            <summary>    
            µ±Ç°»º³åÇø½ÓÊÕµÄÊý¾Ý    
            </summary>    
        </member>
        <member name="M:DotNet.Utilities.WebClient.#ctor">
            <summary>    
            ´´½¨WebClientµÄÊµÀý    
            </summary>    
        </member>
        <member name="P:DotNet.Utilities.WebClient.BufferSize">
            <summary>    
            ÉèÖÃ·¢ËÍºÍ½ÓÊÕµÄÊý¾Ý»º³å´óÐ¡    
            </summary>    
        </member>
        <member name="P:DotNet.Utilities.WebClient.ResponseHeaders">
            <summary>    
            »ñÈ¡ÏìÓ¦Í·¼¯ºÏ    
            </summary>    
        </member>
        <member name="P:DotNet.Utilities.WebClient.RequestHeaders">
            <summary>    
            »ñÈ¡ÇëÇóÍ·¼¯ºÏ    
            </summary>    
        </member>
        <member name="P:DotNet.Utilities.WebClient.Proxy">
            <summary>    
            »ñÈ¡»òÉèÖÃ´úÀí    
            </summary>    
        </member>
        <member name="P:DotNet.Utilities.WebClient.Encoding">
            <summary>    
            »ñÈ¡»òÉèÖÃÇëÇóÓëÏìÓ¦µÄÎÄ±¾±àÂë·½Ê½    
            </summary>    
        </member>
        <member name="P:DotNet.Utilities.WebClient.RespHtml">
            <summary>    
            »ñÈ¡»òÉèÖÃÏìÓ¦µÄhtml´úÂë    
            </summary>    
        </member>
        <member name="P:DotNet.Utilities.WebClient.CookieContainer">
            <summary>    
            »ñÈ¡»òÉèÖÃÓëÇëÇó¹ØÁªµÄCookieÈÝÆ÷    
            </summary>    
        </member>
        <member name="M:DotNet.Utilities.WebClient.GetHtml(System.String)">
            <summary>    
             »ñÈ¡ÍøÒ³Ô´´úÂë    
            </summary>    
            <param name="url">ÍøÖ·</param>    
            <returns></returns>    
        </member>
        <member name="M:DotNet.Utilities.WebClient.DownloadFile(System.String,System.String)">
            <summary>    
            ÏÂÔØÎÄ¼þ    
            </summary>    
            <param name="url">ÎÄ¼þURLµØÖ·</param>    
            <param name="filename">ÎÄ¼þ±£´æÍêÕûÂ·¾¶</param>    
        </member>
        <member name="M:DotNet.Utilities.WebClient.GetData(System.String)">
            <summary>    
            ´ÓÖ¸¶¨URLÏÂÔØÊý¾Ý    
            </summary>    
            <param name="url">ÍøÖ·</param>    
            <returns></returns>    
        </member>
        <member name="M:DotNet.Utilities.WebClient.Post(System.String,System.String)">
            <summary>    
            ÏòÖ¸¶¨URL·¢ËÍÎÄ±¾Êý¾Ý    
            </summary>    
            <param name="url">ÍøÖ·</param>    
            <param name="postData">urlencode±àÂëµÄÎÄ±¾Êý¾Ý</param>    
            <returns></returns>    
        </member>
        <member name="M:DotNet.Utilities.WebClient.Post(System.String,System.Byte[])">
            <summary>    
            ÏòÖ¸¶¨URL·¢ËÍ×Ö½ÚÊý¾Ý    
            </summary>    
            <param name="url">ÍøÖ·</param>    
            <param name="postData">·¢ËÍµÄ×Ö½ÚÊý×é</param>    
            <returns></returns>    
        </member>
        <member name="M:DotNet.Utilities.WebClient.Post(System.String,DotNet.Utilities.MultipartForm)">
            <summary>    
            ÏòÖ¸¶¨ÍøÖ··¢ËÍmulitpart±àÂëµÄÊý¾Ý    
            </summary>    
            <param name="url">ÍøÖ·</param>    
            <param name="mulitpartForm">mulitpart form data</param>    
            <returns></returns>    
        </member>
        <member name="M:DotNet.Utilities.WebClient.GetData(System.Net.HttpWebRequest)">
            <summary>    
            ¶ÁÈ¡ÇëÇó·µ»ØµÄÊý¾Ý    
            </summary>    
            <param name="request">ÇëÇó¶ÔÏó</param>    
            <returns></returns>    
        </member>
        <member name="M:DotNet.Utilities.WebClient.PostData(System.Net.HttpWebRequest,System.Byte[])">
            <summary>    
            ·¢ËÍÇëÇóÊý¾Ý    
            </summary>    
            <param name="request">ÇëÇó¶ÔÏó</param>    
            <param name="postData">ÇëÇó·¢ËÍµÄ×Ö½ÚÊý×é</param>    
        </member>
        <member name="M:DotNet.Utilities.WebClient.CreateRequest(System.String,System.String)">
            <summary>    
            ´´½¨HTTPÇëÇó    
            </summary>    
            <param name="url">URLµØÖ·</param>    
            <returns></returns>    
        </member>
        <member name="M:DotNet.Utilities.WebClient.SaveCookiesToDisk">
            <summary>    
            ½«Cookie±£´æµ½´ÅÅÌ    
            </summary>    
        </member>
        <member name="M:DotNet.Utilities.WebClient.LoadCookiesFromDisk">
            <summary>    
            ´Ó´ÅÅÌ¼ÓÔØCookie    
            </summary>    
        </member>
        <member name="T:DotNet.Utilities.MultipartForm">
            <summary>    
            ¶ÔÎÄ¼þºÍÎÄ±¾Êý¾Ý½øÐÐMultipartÐÎÊ½µÄ±àÂë    
            </summary>    
        </member>
        <member name="P:DotNet.Utilities.MultipartForm.FormData">
            <summary>    
            »ñÈ¡±àÂëºóµÄ×Ö½ÚÊý×é    
            </summary>    
        </member>
        <member name="P:DotNet.Utilities.MultipartForm.ContentType">
            <summary>    
            »ñÈ¡´Ë±àÂëÄÚÈÝµÄÀàÐÍ    
            </summary>    
        </member>
        <member name="P:DotNet.Utilities.MultipartForm.StringEncoding">
            <summary>    
            »ñÈ¡»òÉèÖÃ¶Ô×Ö·û´®²ÉÓÃµÄ±àÂëÀàÐÍ    
            </summary>    
        </member>
        <member name="M:DotNet.Utilities.MultipartForm.#ctor">
            <summary>    
            ÊµÀý»¯    
            </summary>    
        </member>
        <member name="M:DotNet.Utilities.MultipartForm.AddFlie(System.String,System.String)">
            <summary>    
            Ìí¼ÓÒ»¸öÎÄ¼þ    
            </summary>    
            <param name="name">ÎÄ¼þÓòÃû³Æ</param>    
            <param name="filename">ÎÄ¼þµÄÍêÕûÂ·¾¶</param>    
        </member>
        <member name="M:DotNet.Utilities.MultipartForm.AddFlie(System.String,System.String,System.Byte[],System.Int32)">
            <summary>    
            Ìí¼ÓÒ»¸öÎÄ¼þ    
            </summary>    
            <param name="name">ÎÄ¼þÓòÃû³Æ</param>    
            <param name="filename">ÎÄ¼þÃû</param>    
            <param name="fileData">ÎÄ¼þ¶þ½øÖÆÊý¾Ý</param>    
            <param name="dataLength">¶þ½øÖÆÊý¾Ý´óÐ¡</param>    
        </member>
        <member name="M:DotNet.Utilities.MultipartForm.AddString(System.String,System.String)">
            <summary>    
            Ìí¼Ó×Ö·û´®    
            </summary>    
            <param name="name">ÎÄ±¾ÓòÃû³Æ</param>    
            <param name="value">ÎÄ±¾Öµ</param>    
        </member>
        <member name="M:DotNet.Utilities.MultipartForm.GetContentType(System.String)">
            <summary>    
            ´Ó×¢²á±í»ñÈ¡ÎÄ¼þÀàÐÍ    
            </summary>    
            <param name="filename">°üº¬À©Õ¹ÃûµÄÎÄ¼þÃû</param>    
            <returns>Èç£ºapplication/stream</returns>    
        </member>
        <member name="T:DotNet.Utilities.INIFileHelper">
            <summary>
            INIÎÄ¼þ¶ÁÐ´Àà¡£
            </summary>
        </member>
        <member name="M:DotNet.Utilities.INIFileHelper.IniWriteValue(System.String,System.String,System.String)">
            <summary>
            Ð´INIÎÄ¼þ
            </summary>
            <param name="Section"></param>
            <param name="Key"></param>
            <param name="Value"></param>
        </member>
        <member name="M:DotNet.Utilities.INIFileHelper.IniReadValue(System.String,System.String)">
            <summary>
            ¶ÁÈ¡INIÎÄ¼þ
            </summary>
            <param name="Section"></param>
            <param name="Key"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.INIFileHelper.ClearAllSection">
            <summary>
            É¾³ýiniÎÄ¼þÏÂËùÓÐ¶ÎÂä
            </summary>
        </member>
        <member name="M:DotNet.Utilities.INIFileHelper.ClearSection(System.String)">
            <summary>
            É¾³ýiniÎÄ¼þÏÂpersonal¶ÎÂäÏÂµÄËùÓÐ¼ü
            </summary>
            <param name="Section"></param>
        </member>
        <member name="T:DotNet.Utilities.Rmb">
            <summary> 
            Rmb µÄÕªÒªËµÃ÷¡£ 
            </summary> 
        </member>
        <member name="M:DotNet.Utilities.Rmb.CmycurD(System.Decimal)">
            <summary> 
            ×ª»»ÈËÃñ±Ò´óÐ¡½ð¶î 
            </summary> 
            <param name="num">½ð¶î</param> 
            <returns>·µ»Ø´óÐ´ÐÎÊ½</returns> 
        </member>
        <member name="M:DotNet.Utilities.Rmb.CmycurD(System.String)">
            <summary> 
            Ò»¸öÖØÔØ£¬½«×Ö·û´®ÏÈ×ª»»³ÉÊý×ÖÔÚµ÷ÓÃCmycurD(decimal num) 
            </summary> 
            <param name="num">ÓÃ»§ÊäÈëµÄ½ð¶î£¬×Ö·û´®ÐÎÊ½Î´×ª³Édecimal</param> 
            <returns></returns> 
        </member>
        <member name="M:DotNet.Utilities.Serialize.BinarySerialize(System.String,System.Object)">
            <summary>
            序列化为对象
            </summary>
            <param name="objname"></param>
            <param name="obj"></param>
        </member>
        <member name="M:DotNet.Utilities.Serialize.BinaryDeserialize(System.String)">
            <summary>
            从二进制文件中反序列化
            </summary>
            <param name="objname"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.Serialize.SoapSerialize(System.String,System.Object)">
            <summary>
            序列化为soap 即xml
            </summary>
            <param name="objname"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.Serialize.SoapDeserialize(System.String)">
            <summary>
            反序列对象
            </summary>
            <param name="objname"></param>
        </member>
        <member name="M:DotNet.Utilities.Serialize.XmlDeserailize(System.String)">
            <summary>
            从xml序列中反序列化
            </summary>
            <param name="objname"></param>
            <returns></returns>
        </member>
        <member name="T:DotNet.Utilities.Encrypt">
            <summary>
            ¼ÓÃÜ½âÃÜÊµÓÃÀà¡£
            </summary>
        </member>
        <member name="M:DotNet.Utilities.Encrypt.Encode(System.String)">
            <summary>
            ¼ÓÃÜ¡£
            </summary>
            <param name="m_Need_Encode_String"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.Encrypt.Decode(System.String)">
            <summary>
            ½âÃÜ¡£
            </summary>
            <param name="m_Need_Encode_String"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.Encrypt.Md5(System.String)">
            <summary>
            md5
            </summary>
            <param name="encypStr"></param>
            <returns></returns>
        </member>
        <member name="T:DotNet.Utilities.GridViewExport">
            <summary>
            Summary description for GridViewExport
            </summary>
        </member>
        <member name="M:DotNet.Utilities.GridViewExport.PrepareControlForExport(System.Web.UI.Control)">
            <summary>
            Replace any of the contained controls with literals
            </summary>
            <param name="control"></param>
        </member>
        <member name="M:DotNet.Utilities.GridViewExport.OutputExcel(System.Web.UI.WebControls.GridView,System.Data.DataTable,System.String)">
            <summary>
            导出Grid的数据(全部)到Excel
            字段全部为BoundField类型时可用
            要是字段为TemplateField模板型时就取不到数据
            </summary>
            <param name="grid">grid的ID</param>
            <param name="dt">数据源</param>
            <param name="excelFileName">要导出Excel的文件名</param>
        </member>
        <member name="M:DotNet.Utilities.MessageBox.Show(System.Web.UI.Page,System.String)">
            <summary>
            显示消息提示对话框
            </summary>
            <param name="page">当前页面指针，一般为this</param>
            <param name="msg">提示信息</param>
        </member>
        <member name="M:DotNet.Utilities.MessageBox.ShowConfirm(System.Web.UI.WebControls.WebControl,System.String)">
            <summary>
            控件点击 消息确认提示框
            </summary>
            <param name="page">当前页面指针，一般为this</param>
            <param name="msg">提示信息</param>
        </member>
        <member name="M:DotNet.Utilities.MessageBox.ShowAndRedirect(System.Web.UI.Page,System.String,System.String)">
            <summary>
            显示消息提示对话框，并进行页面跳转
            </summary>
            <param name="page">当前页面指针，一般为this</param>
            <param name="msg">提示信息</param>
            <param name="url">跳转的目标URL</param>
        </member>
        <member name="M:DotNet.Utilities.MessageBox.ResponseScript(System.Web.UI.Page,System.String)">
            <summary>
            输出自定义脚本信息
            </summary>
            <param name="page">当前页面指针，一般为this</param>
            <param name="script">输出脚本</param>
        </member>
        <member name="T:DotNet.Utilities.ShowMessageBox">
            <summary>
            页面常用方法包装
            </summary>
        </member>
        <member name="M:DotNet.Utilities.ShowMessageBox.ShowMG(System.String)">
            <summary>
            显示提示信息
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:DotNet.Utilities.ShowMessageBox.ShowMessage(System.String)">
            <summary>
            显示提示信息
            </summary>
            <param name="message">提示信息</param>
        </member>
        <member name="M:DotNet.Utilities.ShowMessageBox.ShowMessage_link(System.String,System.String)">
            <summary>
            显示提示信息
            </summary>
            <param name="message">提示信息</param>
        </member>
        <member name="M:DotNet.Utilities.ShowMessageBox.ShowMessage(System.String,System.Int32,System.Int32,System.String)">
            <summary>
            显示提示信息
            </summary>
            <param name="title"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="message">提示信息</param>
        </member>
        <member name="M:DotNet.Utilities.ShowMessageBox.ShowMessage(System.String,System.Int32,System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
            显示提示信息
            </summary>
            <param name="title"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="message"></param>
            <param name="delayms"></param>
            <param name="leftSpace"></param>
        </member>
        <member name="M:DotNet.Utilities.ShowMessageBox.ShowMessage_link(System.String,System.Int32,System.Int32,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            显示提示信息
            </summary>
            <param name="title"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="message"></param>
            <param name="delayms"></param>
            <param name="leftSpace"></param>
        </member>
        <member name="M:DotNet.Utilities.ShowMessageBox.ShowExceptionMessage(System.Exception)">
            <summary>
            显示异常信息
            </summary>
            <param name="ex"></param>
        </member>
        <member name="M:DotNet.Utilities.ShowMessageBox.ShowExceptionMessage(System.String)">
            <summary>
            显示异常信息
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:DotNet.Utilities.ShowMessageBox.ShowExceptionMessage(System.String,System.Int32,System.Int32,System.String)">
            <summary>
            显示异常信息
            </summary>
            <param name="title"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="message"></param>
        </member>
        <member name="M:DotNet.Utilities.ShowMessageBox.GetShowModalWindowScript(System.String,System.String,System.Int32,System.Int32,System.String)">
            <summary>
            返回把指定链接地址显示模态窗口的脚本
            </summary>
            <param name="wid"></param>
            <param name="title"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="url"></param>
        </member>
        <member name="M:DotNet.Utilities.ShowMessageBox.ShowModalWindow(System.String,System.String,System.Int32,System.Int32,System.String)">
            <summary>
            把指定链接地址显示模态窗口
            </summary>
            <param name="wid">窗口ID</param>
            <param name="title">标题</param>
            <param name="width">宽度</param>
            <param name="height">高度</param>
            <param name="url">链接地址</param>
        </member>
        <member name="M:DotNet.Utilities.ShowMessageBox.ShowCilentModalWindow(System.String,System.Web.UI.WebControls.WebControl,System.String,System.String,System.Int32,System.Int32,System.String,System.Boolean)">
            <summary>
            为指定控件绑定前台脚本：显示模态窗口
            </summary>
            <param name="control"></param>
            <param name="eventName"></param>
            <param name="wid"></param>
            <param name="title"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="url"></param>
            <param name="isScriptEnd"></param>
        </member>
        <member name="M:DotNet.Utilities.ShowMessageBox.ShowCilentModalWindow(System.String,System.Web.UI.WebControls.TableCell,System.String,System.String,System.Int32,System.Int32,System.String,System.Boolean)">
            <summary>
            为指定控件绑定前台脚本：显示模态窗口
            </summary>
            <param name="cell"></param>
            <param name="eventName"></param>
            <param name="wid"></param>
            <param name="title"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="url"></param>
            <param name="isScriptEnd"></param>
        </member>
        <member name="M:DotNet.Utilities.ShowMessageBox.ShowCilentConfirm(System.Web.UI.WebControls.WebControl,System.String,System.String)">
            <summary>
            显示客户端确认窗口
            </summary>
            <param name="control"></param>
            <param name="eventName"></param>
            <param name="message"></param>
        </member>
        <member name="M:DotNet.Utilities.ShowMessageBox.ShowCilentConfirm(System.Web.UI.WebControls.WebControl,System.String,System.String,System.Int32,System.Int32,System.String)">
            <summary>
            显示客户端确认窗口
            </summary>
            <param name="control"></param>
            <param name="eventName"></param>
            <param name="title"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="message"></param>
        </member>
        <member name="M:DotNet.Utilities.ShowMessageBox.WriteScript(System.String)">
            <summary>
            写javascript脚本
            </summary>
            <param name="script">脚本内容</param>
        </member>
        <member name="M:DotNet.Utilities.ShowMessageBox.GetCurrentPage">
            <summary>
            得到当前页对象实例
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.PageValidate.FormatString(System.String,System.Int32)">
            <summary>
            格式化字符串
            </summary>
            <param name="inputData">源字符串</param>
            <param name="formatlevel">0:不做验证| 1:sql语句参数| 2:存储过程参数| 3:EncodeHtml| 4:Encode+sql| 5:Encode+存储过程</param>
            <returns>返回格式化后的字符串</returns>
        </member>
        <member name="M:DotNet.Utilities.PageValidate.FetchInputDigit(System.Web.HttpRequest,System.String,System.Int32)">
            <summary>
            检查Request查询字符串的键值，是否是数字，最大长度限制
            </summary>
            <param name="req">Request</param>
            <param name="inputKey">Request的键值</param>
            <param name="maxLen">最大长度</param>
            <returns>返回Request查询字符串</returns>
        </member>
        <member name="M:DotNet.Utilities.PageValidate.checkString(System.String,System.Int32)">
            <summary>
            检测字符串类型
            </summary>
            <param name="inputData">输入字符串</param>
            <param name="checktype">0:不检测| 1:数字| 2:符号数字| 3: 浮点数| 4:符号浮点| 5: 中文?| 6:邮件?</param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.PageValidate.IsNumber(System.String)">
            <summary>
            是否数字字符串
            </summary>
            <param name="inputData">输入字符串</param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.PageValidate.IsNumberSign(System.String)">
            <summary>
            是否数字字符串 可带正负号
            </summary>
            <param name="inputData">输入字符串</param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.PageValidate.IsDecimal(System.String)">
            <summary>
            是否是浮点数
            </summary>
            <param name="inputData">输入字符串</param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.PageValidate.IsDecimalSign(System.String)">
            <summary>
            是否是浮点数 可带正负号
            </summary>
            <param name="inputData">输入字符串</param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.PageValidate.IsHasCHZN(System.String)">
            <summary>
            检测是否有中文字符
            </summary>
            <param name="inputData"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.PageValidate.IsEmail(System.String)">
            <summary>
            是否是浮点数 可带正负号
            </summary>
            <param name="inputData">输入字符串</param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.PageValidate.SqlText(System.String,System.Int32)">
            <summary>
            检查字符串最大长度，返回指定长度的串
            </summary>
            <param name="sqlInput">输入字符串</param>
            <param name="maxLength">最大长度</param>
            <returns></returns>			
        </member>
        <member name="M:DotNet.Utilities.PageValidate.HtmlEncode(System.String)">
            <summary>
            字符串编码
            </summary>
            <param name="inputData"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.PageValidate.SetLabel(System.Web.UI.WebControls.Label,System.String)">
            <summary>
            设置Label显示Encode的字符串
            </summary>
            <param name="lbl"></param>
            <param name="txtInput"></param>
        </member>
        <member name="M:DotNet.Utilities.PageValidate.Text_Length(System.String)">
            <summary>   
            计算文本长度，区分中英文字符，中文算两个长度，英文算一个长度
            </summary>
            <param name="Text">需计算长度的字符串</param>
            <returns>int</returns>
        </member>
        <member name="M:DotNet.Utilities.PageValidate.GetSubString(System.String,System.Int32)">
            <summary>   
            截取文本，区分中英文字符，中文算两个长度，英文算一个长度
            </summary>
            <param name="str">待截取的字符串</param>
            <param name="length">需计算长度的字符串</param>
            <returns>string</returns>
        </member>
        <member name="M:DotNet.Utilities.PageValidate.IsDateTime(System.String)">
            <summary>
            日期格式字符串判断
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.PageValidate.isContainSpecChar(System.String)">
            <summary>
            检查输入的参数是不是某些定义好的特殊字符：这个方法目前用于密码输入的安全检查
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:DotNet.Utilities.StringPlus" -->
        <member name="M:DotNet.Utilities.StringPlus.GetStrArray(System.String,System.Char,System.Boolean)">
            <summary>
            °Ñ×Ö·û´®°´ÕÕ·Ö¸ô·û×ª»»³É List
            </summary>
            <param name="str">Ô´×Ö·û´®</param>
            <param name="speater">·Ö¸ô·û</param>
            <param name="toLower">ÊÇ·ñ×ª»»ÎªÐ¡Ð´</param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.StringPlus.GetStrArray(System.String)">
            <summary>
            °Ñ×Ö·û´®×ª °´ÕÕ, ·Ö¸î »»ÎªÊý¾Ý
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:DotNet.Utilities.StringPlus.GetArrayStr(System.Collections.Generic.List{System.String},System.String)" -->
        <member name="M:DotNet.Utilities.StringPlus.GetArrayStr(System.Collections.Generic.List{System.Int32})">
            <summary>
            µÃµ½Êý×éÁÐ±íÒÔ¶ººÅ·Ö¸ôµÄ×Ö·û´®
            </summary>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.StringPlus.GetArrayValueStr(System.Collections.Generic.Dictionary{System.Int32,System.Int32})">
            <summary>
            µÃµ½Êý×éÁÐ±íÒÔ¶ººÅ·Ö¸ôµÄ×Ö·û´®
            </summary>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.StringPlus.DelLastComma(System.String)">
            <summary>
            É¾³ý×îºó½áÎ²µÄÒ»¸ö¶ººÅ
            </summary>
        </member>
        <member name="M:DotNet.Utilities.StringPlus.DelLastChar(System.String,System.String)">
            <summary>
            É¾³ý×îºó½áÎ²µÄÖ¸¶¨×Ö·ûºóµÄ×Ö·û
            </summary>
        </member>
        <member name="M:DotNet.Utilities.StringPlus.ToSBC(System.String)">
            <summary>
            ×ªÈ«½ÇµÄº¯Êý(SBC case)
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.StringPlus.ToDBC(System.String)">
            <summary>
             ×ª°ë½ÇµÄº¯Êý(SBC case)
            </summary>
            <param name="input">ÊäÈë</param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.StringPlus.GetSubStringList(System.String,System.Char)">
            <summary>
            °Ñ×Ö·û´®°´ÕÕÖ¸¶¨·Ö¸ô·û×°³É List È¥³ýÖØ¸´
            </summary>
            <param name="o_str"></param>
            <param name="sepeater"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.StringPlus.GetCleanStyle(System.String,System.String)">
            <summary>
             ½«×Ö·û´®ÑùÊ½×ª»»Îª´¿×Ö·û´®
            </summary>
            <param name="StrList"></param>
            <param name="SplitString"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.StringPlus.GetNewStyle(System.String,System.String,System.String,System.String@)">
            <summary>
            ½«×Ö·û´®×ª»»ÎªÐÂÑùÊ½
            </summary>
            <param name="StrList"></param>
            <param name="NewStyle"></param>
            <param name="SplitString"></param>
            <param name="Error"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.StringPlus.SplitMulti(System.String,System.String)">
            <summary>
            ·Ö¸î×Ö·û´®
            </summary>
            <param name="str"></param>
            <param name="splitstr"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.StringPlus.StrToId(System.String)">
            <summary>
            »ñÈ¡ÕýÈ·µÄId£¬Èç¹û²»ÊÇÕýÕûÊý£¬·µ»Ø0
            </summary>
            <param name="_value"></param>
            <returns>·µ»ØÕýÈ·µÄÕûÊýID£¬Ê§°Ü·µ»Ø0</returns>
        </member>
        <member name="M:DotNet.Utilities.StringPlus.IsNumberId(System.String)">
            <summary>
            ¼ì²éÒ»¸ö×Ö·û´®ÊÇ·ñÊÇ´¿Êý×Ö¹¹³ÉµÄ£¬Ò»°ãÓÃÓÚ²éÑ¯×Ö·û´®²ÎÊýµÄÓÐÐ§ÐÔÑéÖ¤¡£(0³ýÍâ)
            </summary>
            <param name="_value">ÐèÑéÖ¤µÄ×Ö·û´®¡£¡£</param>
            <returns>ÊÇ·ñºÏ·¨µÄboolÖµ¡£</returns>
        </member>
        <member name="M:DotNet.Utilities.StringPlus.QuickValidate(System.String,System.String)">
            <summary>
            ¿ìËÙÑéÖ¤Ò»¸ö×Ö·û´®ÊÇ·ñ·ûºÏÖ¸¶¨µÄÕýÔò±í´ïÊ½¡£
            </summary>
            <param name="_express">ÕýÔò±í´ïÊ½µÄÄÚÈÝ¡£</param>
            <param name="_value">ÐèÑéÖ¤µÄ×Ö·û´®¡£</param>
            <returns>ÊÇ·ñºÏ·¨µÄboolÖµ¡£</returns>
        </member>
        <member name="T:DotNet.Utilities.UrlOper">
            <summary>
            URLµÄ²Ù×÷Àà
            </summary>
        </member>
        <member name="M:DotNet.Utilities.UrlOper.IsBase64(System.String)">
            <summary>
            ÊÇ·ñÊÇBase64×Ö·û´®
            </summary>
            <param name="eStr"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.UrlOper.AddParam(System.String,System.String,System.String)">
            <summary>
            Ìí¼ÓURL²ÎÊý
            </summary>
        </member>
        <member name="M:DotNet.Utilities.UrlOper.UpdateParam(System.String,System.String,System.String)">
            <summary>
            ¸üÐÂURL²ÎÊý
            </summary>
        </member>
        <member name="M:DotNet.Utilities.UrlOper.ParseUrl(System.String,System.String@,System.Collections.Specialized.NameValueCollection@)">
            <summary>
            ·ÖÎö url ×Ö·û´®ÖÐµÄ²ÎÊýÐÅÏ¢
            </summary>
            <param name="url">ÊäÈëµÄ URL</param>
            <param name="baseUrl">Êä³ö URL µÄ»ù´¡²¿·Ö</param>
            <param name="nvc">Êä³ö·ÖÎöºóµÃµ½µÄ (²ÎÊýÃû,²ÎÊýÖµ) µÄ¼¯ºÏ</param>
        </member>
        <member name="T:DotNet.Utilities.Utility">
            <summary>
            Utility µÄÕªÒªËµÃ÷¡£
            </summary>
        </member>
        <member name="M:DotNet.Utilities.Utility.ToObjectString(System.Object)">
            <summary>
            ·µ»Ø¶ÔÏóobjµÄStringÖµ,objÎªnullÊ±·µ»Ø¿ÕÖµ¡£
            </summary>
            <param name="obj">¶ÔÏó¡£</param>
            <returns>×Ö·û´®¡£</returns>
        </member>
        <member name="M:DotNet.Utilities.Utility.ToInt(System.Object)">
            <summary>
            ½«¶ÔÏó×ª»»ÎªÊýÖµ(Int32)ÀàÐÍ,×ª»»Ê§°Ü·µ»Ø-1¡£
            </summary>
            <param name="obj">¶ÔÏó¡£</param>
            <returns>Int32ÊýÖµ¡£</returns>
        </member>
        <member name="M:DotNet.Utilities.Utility.ToInt(System.Object,System.Int32)">
            <summary>
            ½«¶ÔÏó×ª»»ÎªÊýÖµ(Int32)ÀàÐÍ¡£
            </summary>
            <param name="obj">¶ÔÏó¡£</param>
            <param name="returnValue">×ª»»Ê§°Ü·µ»Ø¸ÃÖµ¡£</param>
            <returns>Int32ÊýÖµ¡£</returns>
        </member>
        <member name="M:DotNet.Utilities.Utility.ToLong(System.Object)">
            <summary>
            ½«¶ÔÏó×ª»»ÎªÊýÖµ(Long)ÀàÐÍ,×ª»»Ê§°Ü·µ»Ø-1¡£
            </summary>
            <param name="obj">¶ÔÏó¡£</param>
            <returns>LongÊýÖµ¡£</returns>
        </member>
        <member name="M:DotNet.Utilities.Utility.ToLong(System.Object,System.Int64)">
            <summary>
            ½«¶ÔÏó×ª»»ÎªÊýÖµ(Long)ÀàÐÍ¡£
            </summary>
            <param name="obj">¶ÔÏó¡£</param>
            <param name="returnValue">×ª»»Ê§°Ü·µ»Ø¸ÃÖµ¡£</param>
            <returns>LongÊýÖµ¡£</returns>
        </member>
        <member name="M:DotNet.Utilities.Utility.ToDecimal(System.Object)">
            <summary>
            ½«¶ÔÏó×ª»»ÎªÊýÖµ(Decimal)ÀàÐÍ,×ª»»Ê§°Ü·µ»Ø-1¡£
            </summary>
            <param name="obj">¶ÔÏó¡£</param>
            <returns>DecimalÊýÖµ¡£</returns>
        </member>
        <member name="M:DotNet.Utilities.Utility.ToDecimal(System.Object,System.Decimal)">
            <summary>
            ½«¶ÔÏó×ª»»ÎªÊýÖµ(Decimal)ÀàÐÍ¡£
            </summary>
            <param name="obj">¶ÔÏó¡£</param>
            <param name="returnValue">×ª»»Ê§°Ü·µ»Ø¸ÃÖµ¡£</param>
            <returns>DecimalÊýÖµ¡£</returns>
        </member>
        <member name="M:DotNet.Utilities.Utility.ToDouble(System.Object)">
            <summary>
            ½«¶ÔÏó×ª»»ÎªÊýÖµ(Double)ÀàÐÍ,×ª»»Ê§°Ü·µ»Ø-1¡£
            </summary>
            <param name="obj">¶ÔÏó¡£</param>
            <returns>DoubleÊýÖµ¡£</returns>
        </member>
        <member name="M:DotNet.Utilities.Utility.ToDouble(System.Object,System.Double)">
            <summary>
            ½«¶ÔÏó×ª»»ÎªÊýÖµ(Double)ÀàÐÍ¡£
            </summary>
            <param name="obj">¶ÔÏó¡£</param>
            <param name="returnValue">×ª»»Ê§°Ü·µ»Ø¸ÃÖµ¡£</param>
            <returns>DoubleÊýÖµ¡£</returns>
        </member>
        <member name="M:DotNet.Utilities.Utility.ToFloat(System.Object)">
            <summary>
            ½«¶ÔÏó×ª»»ÎªÊýÖµ(Float)ÀàÐÍ,×ª»»Ê§°Ü·µ»Ø-1¡£
            </summary>
            <param name="obj">¶ÔÏó¡£</param>
            <returns>FloatÊýÖµ¡£</returns>
        </member>
        <member name="M:DotNet.Utilities.Utility.ToFloat(System.Object,System.Single)">
            <summary>
            ½«¶ÔÏó×ª»»ÎªÊýÖµ(Float)ÀàÐÍ¡£
            </summary>
            <param name="obj">¶ÔÏó¡£</param>
            <param name="returnValue">×ª»»Ê§°Ü·µ»Ø¸ÃÖµ¡£</param>
            <returns>FloatÊýÖµ¡£</returns>
        </member>
        <member name="M:DotNet.Utilities.Utility.ToDateTime(System.Object)">
            <summary>
            ½«¶ÔÏó×ª»»ÎªÊýÖµ(DateTime)ÀàÐÍ,×ª»»Ê§°Ü·µ»ØNow¡£
            </summary>
            <param name="obj">¶ÔÏó¡£</param>
            <returns>DateTimeÖµ¡£</returns>
        </member>
        <member name="M:DotNet.Utilities.Utility.ToDateTime(System.Object,System.DateTime)">
            <summary>
            ½«¶ÔÏó×ª»»ÎªÊýÖµ(DateTime)ÀàÐÍ¡£
            </summary>
            <param name="obj">¶ÔÏó¡£</param>
            <param name="returnValue">×ª»»Ê§°Ü·µ»Ø¸ÃÖµ¡£</param>
            <returns>DateTimeÖµ¡£</returns>
        </member>
        <member name="M:DotNet.Utilities.Utility.ToByteByBool(System.Object)">
            <summary>
            ´ÓBoolean×ª»»³Ébyte,×ª»»Ê§°Ü·µ»Ø0¡£
            </summary>
            <param name="obj">¶ÔÏó¡£</param>
            <returns>ByteÖµ¡£</returns>
        </member>
        <member name="M:DotNet.Utilities.Utility.ToByteByBool(System.Object,System.Byte)">
            <summary>
            ´ÓBoolean×ª»»³Ébyte¡£
            </summary>
            <param name="obj">¶ÔÏó¡£</param>
            <param name="returnValue">×ª»»Ê§°Ü·µ»Ø¸ÃÖµ¡£</param>
            <returns>ByteÖµ¡£</returns>
        </member>
        <member name="M:DotNet.Utilities.Utility.ToBoolByByte(System.Object)">
            <summary>
            ´Óbyte×ª»»³ÉBoolean,×ª»»Ê§°Ü·µ»Øfalse¡£
            </summary>
            <param name="obj">¶ÔÏó¡£</param>
            <returns>BooleanÖµ¡£</returns>
        </member>
        <member name="M:DotNet.Utilities.Utility.ToBoolByByte(System.Object,System.Boolean)">
            <summary>
            ´Óbyte×ª»»³ÉBoolean¡£
            </summary>
            <param name="obj">¶ÔÏó¡£</param>
            <param name="returnValue">×ª»»Ê§°Ü·µ»Ø¸ÃÖµ¡£</param>
            <returns>BooleanÖµ¡£</returns>
        </member>
        <member name="M:DotNet.Utilities.Utility.IsEmpty(System.String)">
            <summary>
            ÅÐ¶ÏÎÄ±¾objÊÇ·ñÎª¿ÕÖµ¡£
            </summary>
            <param name="obj">¶ÔÏó¡£</param>
            <returns>BooleanÖµ¡£</returns>
        </member>
        <member name="M:DotNet.Utilities.Utility.IsDateTime(System.Object)">
            <summary>
            ÅÐ¶Ï¶ÔÏóÊÇ·ñÎªÕýÈ·µÄÈÕÆÚÖµ¡£
            </summary>
            <param name="obj">¶ÔÏó¡£</param>
            <returns>Boolean¡£</returns>
        </member>
        <member name="M:DotNet.Utilities.Utility.IsInt(System.Object)">
            <summary>
            ÅÐ¶Ï¶ÔÏóÊÇ·ñÎªÕýÈ·µÄInt32Öµ¡£
            </summary>
            <param name="obj">¶ÔÏó¡£</param>
            <returns>Int32Öµ¡£</returns>
        </member>
        <member name="M:DotNet.Utilities.Utility.IsLong(System.Object)">
            <summary>
            ÅÐ¶Ï¶ÔÏóÊÇ·ñÎªÕýÈ·µÄLongÖµ¡£
            </summary>
            <param name="obj">¶ÔÏó¡£</param>
            <returns>LongÖµ¡£</returns>
        </member>
        <member name="M:DotNet.Utilities.Utility.IsFloat(System.Object)">
            <summary>
            ÅÐ¶Ï¶ÔÏóÊÇ·ñÎªÕýÈ·µÄFloatÖµ¡£
            </summary>
            <param name="obj">¶ÔÏó¡£</param>
            <returns>FloatÖµ¡£</returns>
        </member>
        <member name="M:DotNet.Utilities.Utility.IsDouble(System.Object)">
            <summary>
            ÅÐ¶Ï¶ÔÏóÊÇ·ñÎªÕýÈ·µÄDoubleÖµ¡£
            </summary>
            <param name="obj">¶ÔÏó¡£</param>
            <returns>DoubleÖµ¡£</returns>
        </member>
        <member name="M:DotNet.Utilities.Utility.IsDecimal(System.Object)">
            <summary>
            ÅÐ¶Ï¶ÔÏóÊÇ·ñÎªÕýÈ·µÄDecimalÖµ¡£
            </summary>
            <param name="obj">¶ÔÏó¡£</param>
            <returns>DecimalÖµ¡£</returns>
        </member>
        <member name="M:DotNet.Utilities.Utility.StringTrimAll(System.String)">
            <summary>
            È¥³ý×Ö·û´®µÄËùÓÐ¿Õ¸ñ¡£
            </summary>
            <param name="text">×Ö·û´®</param>
            <returns>×Ö·û´®</returns>
        </member>
        <member name="M:DotNet.Utilities.Utility.NumricTrimAll(System.String)">
            <summary>
            È¥³ýÊýÖµ×Ö·û´®µÄËùÓÐ¿Õ¸ñ¡£
            </summary>
            <param name="numricString">ÊýÖµ×Ö·û´®</param>
            <returns>String</returns>
        </member>
        <member name="M:DotNet.Utilities.Utility.ArrayFind(System.Array,System.Object)">
            <summary>
            ÔÚÊý×éÖÐ²éÕÒÆ¥Åä¶ÔÏóÀàÐÍ
            </summary>
            <param name="array">Êý×é</param>
            <param name="obj">¶ÔÏó</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:DotNet.Utilities.Utility.ArrayFind(System.Array,System.String,System.Boolean)">
            <summary>
            ÔÚÊý×éÖÐ²éÕÒÆ¥Åä×Ö·û´®
            </summary>
            <param name="array">Êý×é</param>
            <param name="obj">¶ÔÏó</param>
            <param name="unUpLower">ÊÇ·ñºöÂÔ´óÐ¡Ð´</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:DotNet.Utilities.Utility.ReplaceInvertedComma(System.String)">
            <summary>
            Ìæ»»×Ö·û´®ÖÐµÄµ¥ÒýºÅ¡£
            </summary>
            <param name="inputString">×Ö·û´®</param>
            <returns>String</returns>
        </member>
        <member name="M:DotNet.Utilities.Utility.CompareByteArray(System.Byte[],System.Byte[])">
            <summary>
            ÅÐ¶ÏÁ½¸ö×Ö½ÚÊý×éÊÇ·ñ¾ßÓÐÏàÍ¬Öµ.
            </summary>
            <param name="bytea">×Ö½Ú1</param>
            <param name="byteb">×Ö½Ú2</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:DotNet.Utilities.Utility.BuildDate(System.String)">
            <summary>
            ÈÕÆÚÖÇÄÜÉú³É¡£
            </summary>
            <param name="inputText">×Ö·û´®</param>
            <returns>DateTime</returns>
        </member>
        <member name="M:DotNet.Utilities.Utility.IsFileExists(System.String)">
            <summary>
            ¼ì²éÎÄ¼þÊÇ·ñÕæÊµ´æÔÚ¡£
            </summary>
            <param name="path">ÎÄ¼þÈ«Ãû£¨°üÀ¨Â·¾¶£©¡£</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:DotNet.Utilities.Utility.IsDirectoryExists(System.String)">
            <summary>
            ¼ì²éÄ¿Â¼ÊÇ·ñÕæÊµ´æÔÚ¡£
            </summary>
            <param name="path">Ä¿Â¼Â·¾¶.</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:DotNet.Utilities.Utility.FindLineTextFromFile(System.IO.FileInfo,System.String,System.Boolean)">
            <summary>
            ²éÕÒÎÄ¼þÖÐÊÇ·ñ´æÔÚÆ¥ÅäÐÐ¡£
            </summary>
            <param name="fi">Ä¿±êÎÄ¼þ.</param>
            <param name="lineText">Òª²éÕÒµÄÐÐÎÄ±¾.</param>
            <param name="lowerUpper">ÊÇ·ñÇø·Ö´óÐ¡Ð´.</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:DotNet.Utilities.Utility.IsRightParent(System.Data.DataTable,System.String,System.String,System.String,System.String)">
            <summary>
            ÅÐ¶Ï¸¸×Ó¼¶¹ØÏµÊÇ·ñÕýÈ·¡£
            </summary>
            <param name="table">Êý¾Ý±í¡£</param>
            <param name="columnName">×Ó¼üÁÐÃû¡£</param>
            <param name="parentColumnName">¸¸¼üÁÐÃû¡£</param>
            <param name="inputString">×Ó¼üÖµ¡£</param>
            <param name="compareString">¸¸¼üÖµ¡£</param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.Utility.Fomatdate(System.DateTime,System.String)">
            <summary>
            ¸ñÊ½»¯ÈÕÆÚÀàÐÍ£¬·µ»Ø×Ö·û´®
            </summary>
            <param name="dtime">ÈÕÆÚ</param>
            <param name="s">ÈÕÆÚÄêÔÂÈÕ¼ä¸ô·ûºÅ</param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.Utility.Datediff(System.DateTime,System.DateTime)">
            <summary>
            ·µ»ØÈÕÆÚ²î
            </summary>
            <param name="sdmin">¿ªÊ¼ÈÕÆÚ</param>
            <param name="sdmax">½áÊøÈÕÆÚ</param>
            <returns>ÈÕÆÚ²î£º¸ºÊýÎªÊ§°Ü</returns>
        </member>
        <member name="M:DotNet.Utilities.Utility.Datediff(System.String,System.String)">
            <summary>
            ·µ»ØÈÕÆÚ²î
            </summary>
            <param name="sdmin">¿ªÊ¼ÈÕÆÚ</param>
            <param name="sdmax">½áÊøÈÕÆÚ</param>
            <returns>ÈÕÆÚ²î£º¸ºÊýÎªÊ§°Ü</returns>
        </member>
        <member name="M:DotNet.Utilities.Utility.ConvertStr(System.String)">
            <summary>
            ½«ÓÃ»§ÊäÈëµÄ×Ö·û´®×ª»»Îª¿É»»ÐÐ¡¢Ìæ»»Html±àÂë¡¢ÎÞÎ£º¦Êý¾Ý¿âÌØÊâ×Ö·û¡¢È¥µôÊ×Î²¿Õ°×¡¢µÄ°²È«·½±ã´úÂë¡£
            </summary>
            <param name="inputString">ÓÃ»§ÊäÈë×Ö·û´®</param>
        </member>
        <member name="M:DotNet.Utilities.Utility.OutputText(System.String)">
            <summary>
            ½«html´úÂëÏÔÊ¾ÔÚÍøÒ³ÉÏ
            </summary>
            <param name="inputString"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.Utility.SetTableRows(System.Data.DataTable,System.Int32)">
            <summary>
            ÉèÖÃ°ó¶¨µ½DataGridµÄDataTableµÄ¼ÇÂ¼ÐÐÊý£¬Èç²»¹»ÔòÌí¼Ó¿ÕÐÐ
            </summary>
            <param name="myDataTable">Êý¾Ý±í</param>
            <param name="intPageCount">DataGrid·ÖÒ³Ê±Ã¿Ò³ÐÐÊý</param>
        </member>
        <member name="M:DotNet.Utilities.Utility.GetSubString(System.String,System.Int32)">
            <summary>   
            ½ØÈ¡ÎÄ±¾£¬Çø·ÖÖÐÓ¢ÎÄ×Ö·û£¬ÖÐÎÄËãÁ½¸ö³¤¶È£¬Ó¢ÎÄËãÒ»¸ö³¤¶È
            </summary>
            <param name="str">´ý½ØÈ¡µÄ×Ö·û´®</param>
            <param name="length">Ðè¼ÆËã³¤¶ÈµÄ×Ö·û´®</param>
            <returns>string</returns>
        </member>
        <member name="M:DotNet.Utilities.PageHelper.LockPage(System.Web.UI.Page,System.Object[])">
            <summary>
            锁定页面上的一些组件
            </summary>
            <param name="page"></param>
            <param name="obj">不需锁定的控件</param>
        </member>
        <member name="M:DotNet.Utilities.PageHelper.UnLockPage(System.Web.UI.Page,System.Object[])">
            <summary>
            解除锁定页面上的一些组件
            </summary>
            <param name="page"></param>
            <param name="obj">继续保持锁定的控件</param>
        </member>
        <member name="M:DotNet.Utilities.PageHelper.LockControl(System.Web.UI.Page,System.Web.UI.Control)">
            <summary>
            禁用控件
            </summary>
            <param name="page"></param>
            <param name="ctl"></param>
        </member>
        <member name="M:DotNet.Utilities.PageHelper.UnLockControl(System.Web.UI.Page,System.Web.UI.Control)">
            <summary>
            开放控件
            </summary>
            <param name="page"></param>
            <param name="ctl"></param>
        </member>
        <member name="M:DotNet.Utilities.PageHelper.IsContains(System.Object[],System.Web.UI.Control)">
            <summary>
            数组中是否包含当前控件
            </summary>
            <param name="obj"></param>
            <param name="ctl"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.PageHelper.GetCurrentPage">
            <summary>
            得到当前页对象实例
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.PageHelper.GetPageName">
            <summary>
            从System.Web.HttpRequest的Url中获取所调用的页面名称
            </summary>
            <returns>页面名称</returns>
        </member>
        <member name="M:DotNet.Utilities.PageHelper.GetQueryString(System.String)">
            <summary>
            读取QueryString值
            </summary>
            <param name="queryStringName">QueryString名称</param>
            <returns>QueryString值</returns>
        </member>
        <member name="M:DotNet.Utilities.PageHelper.Redirect(System.String)">
            <summary>
            页面跳转
            </summary>
            <param name="url">URL地址</param>
        </member>
        <member name="M:DotNet.Utilities.PageHelper.GetRelativeLevel">
            <summary>
            获取当前请求页面相对于根目录的层级
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.PageHelper.WriteScript(System.String)">
            <summary>
            写javascript脚本
            </summary>
            <param name="script">脚本内容</param>
        </member>
        <member name="M:DotNet.Utilities.PageHelper.GetClientBrowserVersion">
            <summary>
            返回客户端浏览器版本
            如果是IE类型，返回版本数字
            如果不是IE类型，返回-1
            </summary>
            <returns>一位数字版本号</returns>
        </member>
        <member name="T:DotNet.Utilities.Rand">
            <summary>
            验证码类
            </summary>
        </member>
        <member name="M:DotNet.Utilities.Rand.Number(System.Int32)">
            <summary>
            生成随机数字
            </summary>
            <param name="length">生成长度</param>
        </member>
        <member name="M:DotNet.Utilities.Rand.Number(System.Int32,System.Boolean)">
            <summary>
            生成随机数字
            </summary>
            <param name="Length">生成长度</param>
            <param name="Sleep">是否要在生成前将当前线程阻止以避免重复</param>
        </member>
        <member name="M:DotNet.Utilities.Rand.Str(System.Int32)">
            <summary>
            生成随机字母与数字
            </summary>
            <param name="IntStr">生成长度</param>
        </member>
        <member name="M:DotNet.Utilities.Rand.Str(System.Int32,System.Boolean)">
            <summary>
            生成随机字母与数字
            </summary>
            <param name="Length">生成长度</param>
            <param name="Sleep">是否要在生成前将当前线程阻止以避免重复</param>
        </member>
        <member name="M:DotNet.Utilities.Rand.Str_char(System.Int32)">
            <summary>
            生成随机纯字母随机数
            </summary>
            <param name="IntStr">生成长度</param>
        </member>
        <member name="M:DotNet.Utilities.Rand.Str_char(System.Int32,System.Boolean)">
            <summary>
            生成随机纯字母随机数
            </summary>
            <param name="Length">生成长度</param>
            <param name="Sleep">是否要在生成前将当前线程阻止以避免重复</param>
        </member>
        <member name="T:DotNet.Utilities.YZMHelper">
            <summary>
            验证图片类
            </summary>
        </member>
        <member name="P:DotNet.Utilities.YZMHelper.Text">
            <summary>
            验证码
            </summary>
        </member>
        <member name="P:DotNet.Utilities.YZMHelper.Image">
            <summary>
            验证码图片
            </summary>
        </member>
        <member name="M:DotNet.Utilities.YZMHelper.Next(System.Int32)">
            <summary>
            获得下一个随机数
            </summary>
            <param name="max">最大值</param>
        </member>
        <member name="M:DotNet.Utilities.YZMHelper.Next(System.Int32,System.Int32)">
            <summary>
            获得下一个随机数
            </summary>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
        </member>
        <member name="M:DotNet.Utilities.YZMHelper.CreateImage">
            <summary>
            绘制验证码
            </summary>
        </member>
        <member name="M:DotNet.Utilities.YZMHelper.GetRandomColor">
            <summary>
            字体随机颜色
            </summary>
        </member>
        <member name="M:DotNet.Utilities.YZMHelper.TwistImage(System.Drawing.Bitmap,System.Boolean,System.Double,System.Double)">
            <summary>
            正弦曲线Wave扭曲图片
            </summary>
            <param name="srcBmp">图片路径</param>
            <param name="bXDir">如果扭曲则选择为True</param>
            <param name="nMultValue">波形的幅度倍数，越大扭曲的程度越高,一般为3</param>
            <param name="dPhase">波形的起始相位,取值区间[0-2*PI)</param>
        </member>
        <member name="T:DotNet.Utilities_Xofly.MailAttachments">
            <summary>
            添加附件
            </summary>
        </member>
        <member name="M:DotNet.Utilities_Xofly.MailAttachments.Add(System.String[])">
            <summary>
            添加邮件附件
            </summary>
            <param name="FilePath">附件的绝对路径</param>
        </member>
        <member name="M:DotNet.Utilities_Xofly.MailAttachments.Add(System.String)">
            <summary>
            添加一个附件,当指定的附件不存在时，忽略该附件，不产生异常。
            </summary>
            <param name="filePath">附件的绝对路径</param>
        </member>
        <member name="M:DotNet.Utilities_Xofly.MailAttachments.Clear">
            <summary>
            清除所有附件
            </summary>
        </member>
        <member name="P:DotNet.Utilities_Xofly.MailAttachments.Count">
            <summary>
            获取附件个数
            </summary>
        </member>
        <member name="T:DotNet.Utilities_Xofly.MailMessage">
            <summary>
            邮件信息
            </summary>
        </member>
        <member name="P:DotNet.Utilities_Xofly.MailMessage.Charset">
            <summary>
            设定语言代码，默认设定为GB2312，如不需要可设置为""
            </summary>
        </member>
        <member name="P:DotNet.Utilities_Xofly.MailMessage.MaxRecipientNum">
            <summary>
            最大收件人
            </summary>
        </member>
        <member name="P:DotNet.Utilities_Xofly.MailMessage.From">
            <summary>
            发件人地址
            </summary>
        </member>
        <member name="P:DotNet.Utilities_Xofly.MailMessage.FromName">
            <summary>
            发件人姓名
            </summary>
        </member>
        <member name="P:DotNet.Utilities_Xofly.MailMessage.Body">
            <summary>
            内容
            </summary>
        </member>
        <member name="P:DotNet.Utilities_Xofly.MailMessage.Subject">
            <summary>
            主题
            </summary>
        </member>
        <member name="P:DotNet.Utilities_Xofly.MailMessage.Attachments">
            <summary>
            附件
            </summary>
        </member>
        <member name="P:DotNet.Utilities_Xofly.MailMessage.Priority">
            <summary>
            优先权
            </summary>
        </member>
        <member name="P:DotNet.Utilities_Xofly.MailMessage.Recipients">
            <summary>
            收件人
            </summary>
        </member>
        <member name="P:DotNet.Utilities_Xofly.MailMessage.BodyFormat">
            <summary>
            邮件格式
            </summary>
        </member>
        <member name="M:DotNet.Utilities_Xofly.MailMessage.AddRecipients(System.String)">
            <summary>
            增加一个收件人地址
            </summary>
            <param name="recipient">收件人的Email地址</param>
        </member>
        <member name="M:DotNet.Utilities_Xofly.MailMessage.AddRecipients(System.String[])">
            <summary>
            增加多个收件人地址
            </summary>
            <param name="recipient">收件人的Email地址集合</param>
        </member>
        <member name="T:DotNet.Utilities_Xofly.SmtpServerHelper">
            <summary>
            邮件操作
            </summary>
        </member>
        <member name="F:DotNet.Utilities_Xofly.SmtpServerHelper.CRLF">
            <summary>
            回车换行
            </summary>
        </member>
        <member name="F:DotNet.Utilities_Xofly.SmtpServerHelper.errmsg">
            <summary>
            错误消息反馈
            </summary>
        </member>
        <member name="F:DotNet.Utilities_Xofly.SmtpServerHelper.tcpClient">
            <summary>
            TcpClient对象，用于连接服务器
            </summary> 
        </member>
        <member name="F:DotNet.Utilities_Xofly.SmtpServerHelper.networkStream">
            <summary>
            NetworkStream对象
            </summary> 
        </member>
        <member name="F:DotNet.Utilities_Xofly.SmtpServerHelper.logs">
            <summary>
            服务器交互记录
            </summary>
        </member>
        <member name="F:DotNet.Utilities_Xofly.SmtpServerHelper.ErrCodeHT">
            <summary>
            SMTP错误代码哈希表
            </summary>
        </member>
        <member name="F:DotNet.Utilities_Xofly.SmtpServerHelper.RightCodeHT">
            <summary>
            SMTP正确代码哈希表
            </summary>
        </member>
        <member name="P:DotNet.Utilities_Xofly.SmtpServerHelper.ErrMsg">
            <summary>
            错误消息反馈
            </summary>
        </member>
        <member name="M:DotNet.Utilities_Xofly.SmtpServerHelper.Base64Encode(System.String)">
            <summary>
            将字符串编码为Base64字符串
            </summary>
            <param name="str">要编码的字符串</param>
        </member>
        <member name="M:DotNet.Utilities_Xofly.SmtpServerHelper.Base64Decode(System.String)">
            <summary>
            将Base64字符串解码为普通字符串
            </summary>
            <param name="str">要解码的字符串</param>
        </member>
        <member name="M:DotNet.Utilities_Xofly.SmtpServerHelper.GetStream(System.String)">
            <summary>
            得到上传附件的文件流
            </summary>
            <param name="FilePath">附件的绝对路径</param>
        </member>
        <member name="M:DotNet.Utilities_Xofly.SmtpServerHelper.SMTPCodeAdd">
            <summary>
            SMTP回应代码哈希表
            </summary>
        </member>
        <member name="M:DotNet.Utilities_Xofly.SmtpServerHelper.SendCommand(System.String)">
            <summary>
            发送SMTP命令
            </summary> 
        </member>
        <member name="M:DotNet.Utilities_Xofly.SmtpServerHelper.RecvResponse">
            <summary>
            接收SMTP服务器回应
            </summary>
        </member>
        <member name="M:DotNet.Utilities_Xofly.SmtpServerHelper.Dialog(System.String,System.String)">
            <summary>
            与服务器交互，发送一条命令并接收回应。
            </summary>
            <param name="str">一个要发送的命令</param>
            <param name="errstr">如果错误，要反馈的信息</param>
        </member>
        <member name="M:DotNet.Utilities_Xofly.SmtpServerHelper.Dialog(System.String[],System.String)">
            <summary>
            与服务器交互，发送一组命令并接收回应。
            </summary>
        </member>
        <member name="M:DotNet.Utilities_Xofly.SmtpServerHelper.Connect(System.String,System.Int32)">
            <summary>
            连接服务器
            </summary>
        </member>
        <member name="M:DotNet.Utilities_Xofly.SmtpServerHelper.GetPriorityString(DotNet.Utilities_Xofly.MailPriority)">
            <summary>
            获取优先级
            </summary>
            <param name="mailPriority">优先级</param>
        </member>
        <member name="M:DotNet.Utilities_Xofly.SmtpServerHelper.SendEmail(System.String,System.Int32,System.Boolean,System.String,System.String,DotNet.Utilities_Xofly.MailMessage)">
            <summary>
            发送电子邮件
            </summary>
            <param name="smtpServer">发信SMTP服务器</param>
            <param name="port">端口，默认为25</param>
            <param name="username">发信人邮箱地址</param>
            <param name="password">发信人邮箱密码</param>
            <param name="mailMessage">邮件内容</param>
        </member>
        <member name="M:DotNet.Utilities_Xofly.SmtpServerHelper.SendEmail(System.String,System.Int32,DotNet.Utilities_Xofly.MailMessage)">
            <summary>
            发送电子邮件,SMTP服务器不需要身份验证
            </summary>
            <param name="smtpServer">发信SMTP服务器</param>
            <param name="port">端口，默认为25</param>
            <param name="mailMessage">邮件内容</param>
        </member>
        <member name="M:DotNet.Utilities_Xofly.SmtpServerHelper.SendEmail(System.String,System.Int32,System.String,System.String,DotNet.Utilities_Xofly.MailMessage)">
            <summary>
            发送电子邮件,SMTP服务器需要身份验证
            </summary>
            <param name="smtpServer">发信SMTP服务器</param>
            <param name="port">端口，默认为25</param>
            <param name="username">发信人邮箱地址</param>
            <param name="password">发信人邮箱密码</param>
            <param name="mailMessage">邮件内容</param>
        </member>
        <member name="T:DotNet.Utilities_Xofly.SmtpClient">
            <summary>
            发送邮件
            </summary>
        </member>
        <member name="P:DotNet.Utilities_Xofly.SmtpClient.ErrMsg">
            <summary>
            错误消息反馈
            </summary>
        </member>
        <member name="P:DotNet.Utilities_Xofly.SmtpClient.SmtpServer">
            <summary>
            邮件服务器
            </summary>
        </member>
        <member name="T:DotNet.Utilities_Xofly.SmtpMail">
            <summary>
            操作服务器上邮件
            </summary>
        </member>
        <member name="M:DotNet.Utilities_Xofly.SmtpMail.SendDataToServer(System.String)">
            <summary>
            向服务器发送信息
            </summary>
        </member>
        <member name="M:DotNet.Utilities_Xofly.SmtpMail.ReadDataFromServer">
            <summary>
            从网络流中读取服务器回送的信息
            </summary>
        </member>
        <member name="M:DotNet.Utilities_Xofly.SmtpMail.ReceiveMail(System.String,System.String)">
            <summary>
            获取邮件信息
            </summary>
            <param name="uid">邮箱账号</param>
            <param name="pwd">邮箱密码</param>
            <returns>邮件信息</returns>
        </member>
        <member name="M:DotNet.Utilities_Xofly.SmtpMail.ReadEmail(System.String)">
            <summary>
            读取邮件内容
            </summary>
            <param name="mailMessage">第几封</param>
            <returns>内容</returns>
        </member>
        <member name="M:DotNet.Utilities_Xofly.SmtpMail.DeleteEmail(System.String)">
            <summary>
            删除邮件
            </summary>
            <param name="str">第几封</param>
            <returns>操作信息</returns>
        </member>
        <member name="M:DotNet.Utilities_Xofly.SmtpMail.CloseConnection">
            <summary>
            关闭服务器连接
            </summary>
        </member>
        <member name="T:Xiuse.DbUtility.AosyMySql">
            <summary>
            Êý¾ÝÍ¨ÓÃÀà[MySql]
            </summary>
        </member>
        <member name="F:Xiuse.DbUtility.AosyMySql.Connstr">
            <summary>
            »ñÈ¡Êý¾Ý¿âÁ¬½Ó×Ö·û´®
            </summary>
        </member>
        <member name="M:Xiuse.DbUtility.AosyMySql.ExecuteNonQuery(System.String)">
            <summary>
            Ö´ÐÐSQLÓï¾ä,·µ»ØÓ°ÏìÐÐÊý
            </summary>
            <param name="strSql">MySqlÓï¾ä</param>
            <returns>Ó°ÏìÐÐÊý</returns>
        </member>
        <member name="M:Xiuse.DbUtility.AosyMySql.ExecuteScalar(System.String)">
            <summary>
            Ö´ÐÐSQLÓï¾ä£¬·µ»ØÖ´ÐÐ½á¹ûµÄµÚÒ»ÐÐµÄµÚÒ»ÁÐ
            </summary>
            <param name="strSql">SQLÓï¾ä</param>
            <returns>·µ»ØÖ´ÐÐ½á¹ûµÄµÚÒ»ÐÐµÄµÚÒ»ÁÐ</returns>
        </member>
        <member name="M:Xiuse.DbUtility.AosyMySql.ExecuteReader(System.String)">
            <summary>
            Ö´ÐÐSQLÓï¾ä£¬·µ»ØÖ´ÐÐ½á¹û[MySqlDataReader]
            </summary>
            <param name="strSql">SQLÓï¾ä</param>
            <returns></returns>
        </member>
        <member name="M:Xiuse.DbUtility.AosyMySql.ExecuteListSQL(System.Collections.Generic.List{System.String})">
            <summary>
            ÅúÁ¿Ö´ÐÐSQLÓï¾ä[´øÊÂÎñ´¦Àí]
            </summary>
            <param name="listSQL">SQLÓï¾ä¼¯ºÏ</param>
            <returns>Ö´ÐÐ³É¹¦µÄSQLÓï¾äÊýÁ¿</returns>
        </member>
        <member name="M:Xiuse.DbUtility.AosyMySql.ExecuteforDataSet(System.String)">
            <summary>
            Ö´ÐÐSQLÓï¾ä,·µ»ØDataSet
            </summary>
            <param name="strSql">MySqlÓï¾ä</param>
            <returns>½á¹û¼¯</returns>
        </member>
        <member name="M:Xiuse.DbUtility.AosyMySql.ExecuteforDataSet(System.Int32,System.Int32,System.Int32@,System.String,System.String)">
            <summary>
            Ö´ÐÐSQLÓï¾ä,·µ»ØDataSet[¿ÉÓÃÓÚ·ÖÒ³Ê¹ÓÃ]
            </summary>
            <param name="startRecord">¿ªÊ¼¼ÇÂ¼Êý</param>
            <param name="maxRecord">×î´ó¼ÇÂ¼Êý</param>
            <param name="RecordCount">×Ü¼ÇÂ¼Êý</param>
            <param name="strSql">SQLÓï¾ä</param>
            <returns></returns>
        </member>
        <member name="M:Xiuse.DbUtility.AosyMySql.ExecuteforDataSet(System.String,System.Data.CommandType,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            Ö´ÐÐSqlÓï¾ä,·µ»ØDataSet
            </summary>
            <param name="strSql">SQLÓï¾ä</param>
            <param name="cmdType">CommandTypeÀàÐÍ</param>
            <param name="param">²ÎÊý</param>
            <returns></returns>
        </member>
        <member name="M:Xiuse.DbUtility.AosyMySql.ExecuteforDataSet(System.String,System.String,System.Int32,System.Int32,System.Int32@,System.Data.CommandType,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            Ö´ÐÐSqlÓï¾ä,·µ»ØDataSet
            </summary>
            <param name="strSql">SQLÓï¾ä</param>
            <param name="reccountSql">¼ìË÷¼ÇÂ¼ÊýSQLÓï¾ä</param>
            <param name="startRecord">¿ªÊ¼¼ÇÂ¼Êý</param>
            <param name="maxRecord">×î´ó¼ÇÂ¼Êý</param>
            <param name="recordCount">×Ü¼ÇÂ¼Êý</param>
            <param name="cmdType">CommandTypeÀàÐÍ</param>
            <param name="param">²ÎÊý</param>
            <returns></returns>
        </member>
        <member name="M:Xiuse.DbUtility.AosyMySql.ExecuteNonQuery(System.String,System.Data.CommandType,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            Ö´ÐÐSQLÓï¾ä,·µ»ØÓ°ÏìÐÐÊý
            </summary>
            <param name="strSql">MySqlÓï¾ä</param>
            <param name="cmdType">Ö¸¶¨ÎªSQLÓï¾ä£¬´æ´¢¹ý³ÌÃû³Æ£¬ÎÄ±¾</param>
            <param name="param">²ÎÊýÊý×é</param>
            <returns>Ó°ÏìÐÐÊý</returns>
        </member>
        <member name="M:Xiuse.DbUtility.AosyMySql.ExecuteScalar(System.String,System.Data.CommandType,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            Ö´ÐÐSQLÓï¾ä£¬·µ»ØÖ´ÐÐ½á¹ûµÄµÚÒ»ÐÐµÄµÚÒ»ÁÐ
            </summary>
            <param name="strSql">SQLÓï¾ä</param>
            <param name="cmdType">Ö¸¶¨ÎªSQLÓï¾ä£¬´æ´¢¹ý³ÌÃû³Æ£¬ÎÄ±¾</param>
            <param name="param">²ÎÊýÊý×é</param>
            <returns>·µ»ØÖ´ÐÐ½á¹ûµÄµÚÒ»ÐÐµÄµÚÒ»ÁÐ</returns>
        </member>
        <member name="M:Xiuse.DbUtility.AosyMySql.ExecuteReader(System.String,System.Data.CommandType,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            Ö´ÐÐSQLÓï¾ä£¬·µ»ØÖ´ÐÐ½á¹û[MySqlDataReader]
            </summary>
            <param name="strSql">SQLÓï¾ä</param>
            <param name="cmdType">Ö¸¶¨ÎªSQLÓï¾ä£¬´æ´¢¹ý³ÌÃû³Æ£¬ÎÄ±¾</param>
            <param name="param">²ÎÊýÊý×é</param>
            <returns></returns>
        </member>
        <member name="M:Xiuse.DbUtility.AosyMySql.ExecuteProcedure(System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            Ö´ÐÐ´æ´¢¹ý³Ì£¬»ñÈ¡·µ»ØÖµ
            </summary>
            <param name="procedureName">´æ´¢¹ý³ÌÃû³Æ</param>
            <param name="param">´æ´¢¹ý³Ì²ÎÊý</param>
            <returns></returns>
        </member>
        <member name="M:Xiuse.DbUtility.AosyMySql.ExecuteProcedure(System.String,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            Ö´ÐÐ´æ´¢¹ý³Ì£¬»ñÈ¡·µ»ØÖµ
            </summary>
            <param name="procedureName">´æ´¢¹ý³ÌÃû³Æ</param>
            <param name="returnParamName">´ø·µ»ØÖµ²ÎÊýµÄÃû³Æ</param>
            <param name="param">´æ´¢¹ý³Ì²ÎÊý</param>
            <returns></returns>
        </member>
        <member name="M:Xiuse.DbUtility.AosyMySql.ExecuteProcedureDataReader(System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            Ö´ÐÐ´æ´¢¹ý³Ì,·µ»ØMySqlDataReader
            </summary>
            <param name="procedureName">´æ´¢¹ý³ÌÃû³Æ</param>
            <param name="param">´æ´¢¹ý³Ì²ÎÊý</param>
            <returns></returns>
        </member>
        <member name="M:Xiuse.DbUtility.AosyMySql.ExecuteProcedureDataset(System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            Ö´ÐÐ´æ´¢¹ý³Ì,·µ»ØDataSet
            </summary>
            <param name="procedureName">´æ´¢¹ý³ÌÃû³Æ</param>
            <param name="param">´æ´¢¹ý³Ì²ÎÊý</param>
            <returns></returns>
        </member>
        <member name="M:Xiuse.DbUtility.AosyMySql.ExecuteProcedureDataset(System.String,System.Int32,System.Int32,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            Ö´ÐÐ´æ´¢¹ý³Ì,·µ»ØDataSet 
            </summary>
            <param name="procedureName">´æ´¢¹ý³ÌÃû³Æ</param>
            <param name="startRecord">¿ªÊ¼¼ÇÂ¼Êý</param>
            <param name="maxRecord">×î´ó¼ÇÂ¼Êý</param>
            <param name="param">´æ´¢¹ý³Ì²ÎÊý</param>
            <returns></returns>
        </member>
        <member name="M:Xiuse.DbUtility.AosyMySql.ExecuteProcedureDataset(System.String,System.Int32,System.Int32,System.Int32@,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            Ö´ÐÐ´æ´¢¹ý³Ì,·µ»ØDataSet 
            </summary>
            <param name="procedureName">´æ´¢¹ý³ÌÃû³Æ</param>
            <param name="startRecord">¿ªÊ¼¼ÇÂ¼Êý</param>
            <param name="maxRecord">×î´ó¼ÇÂ¼Êý</param>
            <param name="recordcount">×Ü¼ÇÂ¼Êý</param>
            <param name="param">´æ´¢¹ý³Ì²ÎÊý</param>
            <returns></returns>
        </member>
        <member name="M:Xiuse.DbUtility.AosyMySql.ExecuteProcedurePage(System.String,System.String,System.String,System.Int32,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Ö´ÐÐ·ÖÒ³´æ´¢¹ý³Ì
            </summary>
            <param name="tablename">±íÃû³Æ</param>
            <param name="tablefields">Òª²éÑ¯µÄ×Ö¶Î</param>
            <param name="orderfields">ÅÅÐò×Ö¶Î</param>
            <param name="ordertype">ÅÅÐò·½Ê½ 0 asc, 1 desc</param>
            <param name="strwhere">²éÑ¯Ìõ¼þ</param>
            <param name="pagesize">·ÖÒ³´óÐ¡</param>
            <param name="pageindex">µ±Ç°Ò³</param>
            <param name="totalcount">×Ü¼ÇÂ¼Êý</param>
            <returns></returns>
        </member>
        <member name="M:Xiuse.DbUtility.AosyMySql.GetMaxId(System.String,System.String)">
            <summary>
            »ñÈ¡×Ö¶Î×î´óID
            </summary>
            <param name="filedName">ÁÐÃû³Æ</param>
            <param name="tableName">±íÃû³Æ</param>
            <returns>×î´óID</returns>
        </member>
        <member name="M:Xiuse.DbUtility.AosyMySql.GetCount(System.String,System.String)">
            <summary>
            ·µ»Ø×Ö¶ÎÊýÁ¿×ÛºÏ
            </summary>
            <param name="filedName">×Ö¶ÎÃû³Æ</param>
            <param name="tableName">±íÃû³Æ</param>
            <returns></returns>
        </member>
        <member name="M:Xiuse.DbUtility.AosyMySql.GetCount(System.String)">
             <summary>
             ·µ»Ø×Ö¶ÎÊýÁ¿×ÛºÏ
             </summary>
            <param name="countMySql">²éÑ¯Count×ÜºÍÓï¾ä</param>
             <returns></returns>
        </member>
        <member name="M:Xiuse.DbUtility.AosyMySql.ExecuteforBool(System.String)">
            <summary>
            Ö´ÐÐSQLÓï¾ä,·µ»ØboolÊý¾ÝÀàÐÍ
            </summary>
            <param name="strSql">SQLÓï¾ä</param>
            <returns></returns>
        </member>
        <member name="M:Xiuse.DbUtility.AosyMySql.ExecuteforBool(System.String,System.Data.CommandType,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            Ö´ÐÐSQLÓï¾ä,·µ»ØboolÊý¾ÝÀàÐÍ
            </summary>
            <param name="strSql">SqlÓï¾ä</param>
            <param name="cmdType">CommandTypeÀàÐÍ</param>
            <param name="param">²ÎÊý</param>
            <returns></returns>
        </member>
        <member name="M:Xiuse.DbUtility.AosyMySql.AttachParameters(MySql.Data.MySqlClient.MySqlCommand,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            ½«MySqlParameter²ÎÊýÊý×é(²ÎÊýÖµ)·ÖÅä¸øMySqlCommandÃüÁî.
            Õâ¸ö·½·¨½«¸øÈÎºÎÒ»¸ö²ÎÊý·ÖÅäDBNull.Value;
            ¸Ã²Ù×÷½«×èÖ¹Ä¬ÈÏÖµµÄÊ¹ÓÃ.
            </summary>
            <param name="command">ÃüÁîÃû</param>
            <param name="commandParameters">MySqlParametersÊý×é</param>
        </member>
        <member name="M:Xiuse.DbUtility.AosyMySql.AssignParameterValues(MySql.Data.MySqlClient.MySqlParameter[],System.Data.DataRow)">
            <summary>
            ½«DataRowÀàÐÍµÄÁÐÖµ·ÖÅäµ½MySqlParameter²ÎÊýÊý×é.
            </summary>
            <param name="commandParameters">Òª·ÖÅäÖµµÄMySqlParameter²ÎÊýÊý×é</param>
            <param name="dataRow">½«Òª·ÖÅä¸ø´æ´¢¹ý³Ì²ÎÊýµÄDataRow</param>
        </member>
        <member name="M:Xiuse.DbUtility.AosyMySql.AssignParameterValues(MySql.Data.MySqlClient.MySqlParameter[],System.Object[])">
            <summary>
            ½«Ò»¸ö¶ÔÏóÊý×é·ÖÅä¸øMySqlParameter²ÎÊýÊý×é.
            </summary>
            <param name="commandParameters">Òª·ÖÅäÖµµÄMySqlParameter²ÎÊýÊý×é</param>
            <param name="parameterValues">½«Òª·ÖÅä¸ø´æ´¢¹ý³Ì²ÎÊýµÄ¶ÔÏóÊý×é</param>
        </member>
        <member name="M:Xiuse.DbUtility.AosyMySql.PrepareCommand(MySql.Data.MySqlClient.MySqlCommand,MySql.Data.MySqlClient.MySqlConnection,MySql.Data.MySqlClient.MySqlTransaction,System.Data.CommandType,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            Ô¤´¦ÀíÓÃ»§Ìá¹©µÄÃüÁî,Êý¾Ý¿âÁ¬½Ó/ÊÂÎñ/ÃüÁîÀàÐÍ/²ÎÊý
            </summary>
            <param name="command">Òª´¦ÀíµÄMySqlCommand</param>
            <param name="connection">Êý¾Ý¿âÁ¬½Ó</param>
            <param name="transaction">Ò»¸öÓÐÐ§µÄÊÂÎñ»òÕßÊÇnullÖµ</param>
            <param name="commandType">ÃüÁîÀàÐÍ (´æ´¢¹ý³Ì,ÃüÁîÎÄ±¾, ÆäËü.)</param>
            <param name="commandText">´æ´¢¹ý³ÌÃû»ò¶¼T-SQLÃüÁîÎÄ±¾</param>
            <param name="commandParameters">ºÍÃüÁîÏà¹ØÁªµÄMySqlParameter²ÎÊýÊý×é,Èç¹ûÃ»ÓÐ²ÎÊýÎª'null'</param>
        </member>
        <member name="T:Xiuse.DbUtility.AosyOleDb">
            <summary>
            Êý¾ÝÍ¨ÓÃÀà[OleDb]
            </summary>
        </member>
        <member name="F:Xiuse.DbUtility.AosyOleDb.Connstr">
            <summary>
            »ñÈ¡Êý¾Ý¿âÁ¬½Ó×Ö·û´®
            </summary>
        </member>
        <member name="M:Xiuse.DbUtility.AosyOleDb.ExecuteNonQuery(System.String)">
            <summary>
            Ö´ÐÐSQLÓï¾ä,·µ»ØÓ°ÏìÐÐÊý
            </summary>
            <param name="strSql">OleDbÓï¾ä</param>
            <returns>Ó°ÏìÐÐÊý</returns>
        </member>
        <member name="M:Xiuse.DbUtility.AosyOleDb.ExecuteScalar(System.String)">
            <summary>
            Ö´ÐÐSQLÓï¾ä£¬·µ»ØÖ´ÐÐ½á¹ûµÄµÚÒ»ÐÐµÄµÚÒ»ÁÐ
            </summary>
            <param name="strSql">SQLÓï¾ä</param>
            <returns>·µ»ØÖ´ÐÐ½á¹ûµÄµÚÒ»ÐÐµÄµÚÒ»ÁÐ</returns>
        </member>
        <member name="M:Xiuse.DbUtility.AosyOleDb.ExecuteReader(System.String)">
            <summary>
            Ö´ÐÐSQLÓï¾ä£¬·µ»ØÖ´ÐÐ½á¹û[OleDbDataReader]
            </summary>
            <param name="OleDbStr">SQLÓï¾ä</param>
            <returns></returns>
        </member>
        <member name="M:Xiuse.DbUtility.AosyOleDb.ExecuteListSQL(System.Collections.Generic.List{System.String})">
            <summary>
            ÅúÁ¿Ö´ÐÐSQLÓï¾ä[´øÊÂÎñ´¦Àí]
            </summary>
            <param name="listSQL">SQLÓï¾ä¼¯ºÏ</param>
            <returns>Ö´ÐÐ³É¹¦µÄSQLÓï¾äÊýÁ¿</returns>
        </member>
        <member name="M:Xiuse.DbUtility.AosyOleDb.ExecuteforDataSet(System.String)">
            <summary>
            Ö´ÐÐSQLÓï¾ä,·µ»ØDataSet
            </summary>
            <param name="strSql">OleDbÓï¾ä</param>
            <returns>½á¹û¼¯</returns>
        </member>
        <member name="M:Xiuse.DbUtility.AosyOleDb.ExecuteforDataSet(System.Int32,System.Int32,System.Int32@,System.String,System.String)">
            <summary>
            Ö´ÐÐSQLÓï¾ä,·µ»ØDataSet[¿ÉÓÃÓÚ·ÖÒ³Ê¹ÓÃ]
            </summary>
            <param name="startRecord">¿ªÊ¼¼ÇÂ¼Êý</param>
            <param name="maxRecord">×î´ó¼ÇÂ¼Êý</param>
            <param name="RecordCount">×Ü¼ÇÂ¼Êý</param>
            <param name="strSql">SQLÓï¾ä</param>
            <returns></returns>
        </member>
        <member name="M:Xiuse.DbUtility.AosyOleDb.ExecuteforDataSet(System.String,System.Data.CommandType,System.Data.OleDb.OleDbParameter[])">
            <summary>
            Ö´ÐÐSqlÓï¾ä,·µ»ØDataSet
            </summary>
            <param name="strSql">SQLÓï¾ä</param>
            <param name="cmdType">CommandTypeÀàÐÍ</param>
            <param name="param">²ÎÊý</param>
            <returns></returns>
        </member>
        <member name="M:Xiuse.DbUtility.AosyOleDb.ExecuteforDataSet(System.String,System.String,System.Int32,System.Int32,System.Int32@,System.Data.CommandType,System.Data.OleDb.OleDbParameter[])">
            <summary>
            Ö´ÐÐSqlÓï¾ä,·µ»ØDataSet
            </summary>
            <param name="strSql">SQLÓï¾ä</param>
            <param name="reccountSql">¼ìË÷¼ÇÂ¼ÊýSQLÓï¾ä</param>
            <param name="startRecord">¿ªÊ¼¼ÇÂ¼Êý</param>
            <param name="maxRecord">×î´ó¼ÇÂ¼Êý</param>
            <param name="recordCount">×Ü¼ÇÂ¼Êý</param>
            <param name="cmdType">CommandTypeÀàÐÍ</param>
            <param name="param">²ÎÊý</param>
            <returns></returns>
        </member>
        <member name="M:Xiuse.DbUtility.AosyOleDb.ExecuteNonQuery(System.String,System.Data.CommandType,System.Data.OleDb.OleDbParameter[])">
            <summary>
            Ö´ÐÐSQLÓï¾ä,·µ»ØÓ°ÏìÐÐÊý
            </summary>
            <param name="strSql">OleDbÓï¾ä</param>
            <param name="cmdType">Ö¸¶¨ÎªSQLÓï¾ä£¬´æ´¢¹ý³ÌÃû³Æ£¬ÎÄ±¾</param>
            <param name="param">²ÎÊýÊý×é</param>
            <returns>Ó°ÏìÐÐÊý</returns>
        </member>
        <member name="M:Xiuse.DbUtility.AosyOleDb.ExecuteScalar(System.String,System.Data.CommandType,System.Data.OleDb.OleDbParameter[])">
            <summary>
            Ö´ÐÐSQLÓï¾ä£¬·µ»ØÖ´ÐÐ½á¹ûµÄµÚÒ»ÐÐµÄµÚÒ»ÁÐ
            </summary>
            <param name="strSql">SQLÓï¾ä</param>
            <param name="cmdType">Ö¸¶¨ÎªSQLÓï¾ä£¬´æ´¢¹ý³ÌÃû³Æ£¬ÎÄ±¾</param>
            <param name="param">²ÎÊýÊý×é</param>
            <returns>·µ»ØÖ´ÐÐ½á¹ûµÄµÚÒ»ÐÐµÄµÚÒ»ÁÐ</returns>
        </member>
        <member name="M:Xiuse.DbUtility.AosyOleDb.ExecuteReader(System.String,System.Data.CommandType,System.Data.OleDb.OleDbParameter[])">
            <summary>
            Ö´ÐÐSQLÓï¾ä£¬·µ»ØÖ´ÐÐ½á¹û[OleDbDataReader]
            </summary>
            <param name="OleDbStr">SQLÓï¾ä</param>
            <param name="cmdType">Ö¸¶¨ÎªSQLÓï¾ä£¬´æ´¢¹ý³ÌÃû³Æ£¬ÎÄ±¾</param>
            <param name="param">²ÎÊýÊý×é</param>
            <returns></returns>
        </member>
        <member name="M:Xiuse.DbUtility.AosyOleDb.ExecuteProcedure(System.String,System.Data.OleDb.OleDbParameter[])">
            <summary>
            Ö´ÐÐ´æ´¢¹ý³Ì£¬»ñÈ¡·µ»ØÖµ
            </summary>
            <param name="procedureName">´æ´¢¹ý³ÌÃû³Æ</param>
            <param name="param">´æ´¢¹ý³Ì²ÎÊý</param>
            <returns></returns>
        </member>
        <member name="M:Xiuse.DbUtility.AosyOleDb.ExecuteProcedure(System.String,System.String,System.Data.OleDb.OleDbParameter[])">
            <summary>
            Ö´ÐÐ´æ´¢¹ý³Ì£¬»ñÈ¡·µ»ØÖµ
            </summary>
            <param name="procedureName">´æ´¢¹ý³ÌÃû³Æ</param>
            <param name="returnParamName">´ø·µ»ØÖµ²ÎÊýµÄÃû³Æ</param>
            <param name="param">´æ´¢¹ý³Ì²ÎÊý</param>
            <returns></returns>
        </member>
        <member name="M:Xiuse.DbUtility.AosyOleDb.ExecuteProcedureDataReader(System.String,System.Data.OleDb.OleDbParameter[])">
            <summary>
            Ö´ÐÐ´æ´¢¹ý³Ì,·µ»ØOleDbDataReader
            </summary>
            <param name="procedureName">´æ´¢¹ý³ÌÃû³Æ</param>
            <param name="param">´æ´¢¹ý³Ì²ÎÊý</param>
            <returns></returns>
        </member>
        <member name="M:Xiuse.DbUtility.AosyOleDb.ExecuteProcedureDataset(System.String,System.Data.OleDb.OleDbParameter[])">
            <summary>
            Ö´ÐÐ´æ´¢¹ý³Ì,·µ»ØDataSet
            </summary>
            <param name="procedureName">´æ´¢¹ý³ÌÃû³Æ</param>
            <param name="param">´æ´¢¹ý³Ì²ÎÊý</param>
            <returns></returns>
        </member>
        <member name="M:Xiuse.DbUtility.AosyOleDb.ExecuteProcedureDataset(System.String,System.Int32,System.Int32,System.Data.OleDb.OleDbParameter[])">
            <summary>
            Ö´ÐÐ´æ´¢¹ý³Ì,·µ»ØDataSet 
            </summary>
            <param name="procedureName">´æ´¢¹ý³ÌÃû³Æ</param>
            <param name="startRecord">¿ªÊ¼¼ÇÂ¼Êý</param>
            <param name="maxRecord">×î´ó¼ÇÂ¼Êý</param>
            <param name="param">´æ´¢¹ý³Ì²ÎÊý</param>
            <returns></returns>
        </member>
        <member name="M:Xiuse.DbUtility.AosyOleDb.ExecuteProcedureDataset(System.String,System.Int32,System.Int32,System.Int32@,System.Data.OleDb.OleDbParameter[])">
            <summary>
            Ö´ÐÐ´æ´¢¹ý³Ì,·µ»ØDataSet 
            </summary>
            <param name="procedureName">´æ´¢¹ý³ÌÃû³Æ</param>
            <param name="startRecord">¿ªÊ¼¼ÇÂ¼Êý</param>
            <param name="maxRecord">×î´ó¼ÇÂ¼Êý</param>
            <param name="recordcount">×Ü¼ÇÂ¼Êý</param>
            <param name="param">´æ´¢¹ý³Ì²ÎÊý</param>
            <returns></returns>
        </member>
        <member name="M:Xiuse.DbUtility.AosyOleDb.ExecuteProcedurePage(System.String,System.String,System.String,System.Int32,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Ö´ÐÐ·ÖÒ³´æ´¢¹ý³Ì
            </summary>
            <param name="tablename">±íÃû³Æ</param>
            <param name="tablefields">Òª²éÑ¯µÄ×Ö¶Î</param>
            <param name="orderfields">ÅÅÐò×Ö¶Î[±ØÐë]</param>
            <param name="ordertype">ÅÅÐò·½Ê½ 0 asc, 1 desc</param>
            <param name="strwhere">²éÑ¯Ìõ¼þ</param>
            <param name="pagesize">·ÖÒ³´óÐ¡</param>
            <param name="pageindex">µ±Ç°Ò³</param>
            <param name="totalcount">×Ü¼ÇÂ¼Êý</param>
            <returns></returns>
        </member>
        <member name="M:Xiuse.DbUtility.AosyOleDb.GetMaxId(System.String,System.String)">
            <summary>
            »ñÈ¡×Ö¶Î×î´óID
            </summary>
            <param name="filedName">ÁÐÃû³Æ</param>
            <param name="tableName">±íÃû³Æ</param>
            <returns>×î´óID</returns>
        </member>
        <member name="M:Xiuse.DbUtility.AosyOleDb.GetCount(System.String,System.String)">
            <summary>
            ·µ»Ø×Ö¶ÎÊýÁ¿×ÛºÏ
            </summary>
            <param name="filedName">×Ö¶ÎÃû³Æ</param>
            <param name="tableName">±íÃû³Æ</param>
            <returns></returns>
        </member>
        <member name="M:Xiuse.DbUtility.AosyOleDb.GetCount(System.String)">
             <summary>
             ·µ»Ø×Ö¶ÎÊýÁ¿×ÛºÏ
             </summary>
            <param name="countOleDb">²éÑ¯Count×ÜºÍÓï¾ä</param>
             <returns></returns>
        </member>
        <member name="M:Xiuse.DbUtility.AosyOleDb.ExecuteforBool(System.String)">
            <summary>
            Ö´ÐÐSQLÓï¾ä,·µ»ØboolÊý¾ÝÀàÐÍ
            </summary>
            <param name="strSql">SQLÓï¾ä</param>
            <returns></returns>
        </member>
        <member name="M:Xiuse.DbUtility.AosyOleDb.ExecuteforBool(System.String,System.Data.CommandType,System.Data.OleDb.OleDbParameter[])">
            <summary>
            Ö´ÐÐSQLÓï¾ä,·µ»ØboolÊý¾ÝÀàÐÍ
            </summary>
            <param name="strSql">SqlÓï¾ä</param>
            <param name="cmdType">CommandTypeÀàÐÍ</param>
            <param name="param">²ÎÊý</param>
            <returns></returns>
        </member>
        <member name="M:Xiuse.DbUtility.AosyOleDb.AttachParameters(System.Data.OleDb.OleDbCommand,System.Data.OleDb.OleDbParameter[])">
            <summary>
            ½«OleDbParameter²ÎÊýÊý×é(²ÎÊýÖµ)·ÖÅä¸øOleDbCommandÃüÁî.
            Õâ¸ö·½·¨½«¸øÈÎºÎÒ»¸ö²ÎÊý·ÖÅäDBNull.Value;
            ¸Ã²Ù×÷½«×èÖ¹Ä¬ÈÏÖµµÄÊ¹ÓÃ.
            </summary>
            <param name="command">ÃüÁîÃû</param>
            <param name="commandParameters">OleDbParametersÊý×é</param>
        </member>
        <member name="M:Xiuse.DbUtility.AosyOleDb.AssignParameterValues(System.Data.OleDb.OleDbParameter[],System.Data.DataRow)">
            <summary>
            ½«DataRowÀàÐÍµÄÁÐÖµ·ÖÅäµ½OleDbParameter²ÎÊýÊý×é.
            </summary>
            <param name="commandParameters">Òª·ÖÅäÖµµÄOleDbParameter²ÎÊýÊý×é</param>
            <param name="dataRow">½«Òª·ÖÅä¸ø´æ´¢¹ý³Ì²ÎÊýµÄDataRow</param>
        </member>
        <member name="M:Xiuse.DbUtility.AosyOleDb.AssignParameterValues(System.Data.OleDb.OleDbParameter[],System.Object[])">
            <summary>
            ½«Ò»¸ö¶ÔÏóÊý×é·ÖÅä¸øOleDbParameter²ÎÊýÊý×é.
            </summary>
            <param name="commandParameters">Òª·ÖÅäÖµµÄOleDbParameter²ÎÊýÊý×é</param>
            <param name="parameterValues">½«Òª·ÖÅä¸ø´æ´¢¹ý³Ì²ÎÊýµÄ¶ÔÏóÊý×é</param>
        </member>
        <member name="M:Xiuse.DbUtility.AosyOleDb.PrepareCommand(System.Data.OleDb.OleDbCommand,System.Data.OleDb.OleDbConnection,System.Data.OleDb.OleDbTransaction,System.Data.CommandType,System.String,System.Data.OleDb.OleDbParameter[])">
            <summary>
            Ô¤´¦ÀíÓÃ»§Ìá¹©µÄÃüÁî,Êý¾Ý¿âÁ¬½Ó/ÊÂÎñ/ÃüÁîÀàÐÍ/²ÎÊý
            </summary>
            <param name="command">Òª´¦ÀíµÄOleDbCommand</param>
            <param name="connection">Êý¾Ý¿âÁ¬½Ó</param>
            <param name="transaction">Ò»¸öÓÐÐ§µÄÊÂÎñ»òÕßÊÇnullÖµ</param>
            <param name="commandType">ÃüÁîÀàÐÍ (´æ´¢¹ý³Ì,ÃüÁîÎÄ±¾, ÆäËü.)</param>
            <param name="commandText">´æ´¢¹ý³ÌÃû»ò¶¼T-SQLÃüÁîÎÄ±¾</param>
            <param name="commandParameters">ºÍÃüÁîÏà¹ØÁªµÄOleDbParameter²ÎÊýÊý×é,Èç¹ûÃ»ÓÐ²ÎÊýÎª'null'</param>
        </member>
        <member name="T:Xiuse.DbUtility.AosyOracle">
            <summary>
            Êý¾ÝÍ¨ÓÃÀà[Oracle]
            </summary>
        </member>
        <member name="F:Xiuse.DbUtility.AosyOracle.Connstr">
            <summary>
            »ñÈ¡Êý¾Ý¿âÁ¬½Ó×Ö·û´®
            </summary>
        </member>
        <member name="M:Xiuse.DbUtility.AosyOracle.ExecuteNonQuery(System.String)">
            <summary>
            Ö´ÐÐSQLÓï¾ä,·µ»ØÓ°ÏìÐÐÊý
            </summary>
            <param name="strSql">OracleÓï¾ä</param>
            <returns>Ó°ÏìÐÐÊý</returns>
        </member>
        <member name="M:Xiuse.DbUtility.AosyOracle.ExecuteScalar(System.String)">
            <summary>
            Ö´ÐÐSQLÓï¾ä£¬·µ»ØÖ´ÐÐ½á¹ûµÄµÚÒ»ÐÐµÄµÚÒ»ÁÐ
            </summary>
            <param name="strSql">SQLÓï¾ä</param>
            <returns>·µ»ØÖ´ÐÐ½á¹ûµÄµÚÒ»ÐÐµÄµÚÒ»ÁÐ</returns>
        </member>
        <member name="M:Xiuse.DbUtility.AosyOracle.ExecuteReader(System.String)">
            <summary>
            Ö´ÐÐSQLÓï¾ä£¬·µ»ØÖ´ÐÐ½á¹û[OracleDataReader]
            </summary>
            <param name="strSql">SQLÓï¾ä</param>
            <returns></returns>
        </member>
        <member name="M:Xiuse.DbUtility.AosyOracle.ExecuteListSQL(System.Collections.Generic.List{System.String})">
            <summary>
            ÅúÁ¿Ö´ÐÐSQLÓï¾ä[´øÊÂÎñ´¦Àí]
            </summary>
            <param name="listSQL">SQLÓï¾ä¼¯ºÏ</param>
            <returns>Ö´ÐÐ³É¹¦µÄSQLÓï¾äÊýÁ¿</returns>
        </member>
        <member name="M:Xiuse.DbUtility.AosyOracle.ExecuteforDataSet(System.String)">
            <summary>
            Ö´ÐÐSQLÓï¾ä,·µ»ØDataSet
            </summary>
            <param name="strSql">OracleÓï¾ä</param>
            <returns>½á¹û¼¯</returns>
        </member>
        <member name="M:Xiuse.DbUtility.AosyOracle.ExecuteforDataSet(System.Int32,System.Int32,System.Int32@,System.String,System.String)">
            <summary>
            Ö´ÐÐSQLÓï¾ä,·µ»ØDataSet[¿ÉÓÃÓÚ·ÖÒ³Ê¹ÓÃ]
            </summary>
            <param name="startRecord">¿ªÊ¼¼ÇÂ¼Êý</param>
            <param name="maxRecord">×î´ó¼ÇÂ¼Êý</param>
            <param name="RecordCount">×Ü¼ÇÂ¼Êý</param>
            <param name="strSql">SQLÓï¾ä</param>
            <returns></returns>
        </member>
        <member name="M:Xiuse.DbUtility.AosyOracle.ExecuteforDataSet(System.String,System.Data.CommandType,System.Data.OracleClient.OracleParameter[])">
            <summary>
            Ö´ÐÐSqlÓï¾ä,·µ»ØDataSet
            </summary>
            <param name="strSql">SQLÓï¾ä</param>
            <param name="cmdType">CommandTypeÀàÐÍ</param>
            <param name="param">²ÎÊý</param>
            <returns></returns>
        </member>
        <member name="M:Xiuse.DbUtility.AosyOracle.ExecuteforDataSet(System.String,System.String,System.Int32,System.Int32,System.Int32@,System.Data.CommandType,System.Data.OracleClient.OracleParameter[])">
            <summary>
            Ö´ÐÐSqlÓï¾ä,·µ»ØDataSet
            </summary>
            <param name="strSql">SQLÓï¾ä</param>
            <param name="reccountSql">¼ìË÷¼ÇÂ¼ÊýSQLÓï¾ä</param>
            <param name="startRecord">¿ªÊ¼¼ÇÂ¼Êý</param>
            <param name="maxRecord">×î´ó¼ÇÂ¼Êý</param>
            <param name="recordCount">×Ü¼ÇÂ¼Êý</param>
            <param name="cmdType">CommandTypeÀàÐÍ</param>
            <param name="param">²ÎÊý</param>
            <returns></returns>
        </member>
        <member name="M:Xiuse.DbUtility.AosyOracle.ExecuteNonQuery(System.String,System.Data.CommandType,System.Data.OracleClient.OracleParameter[])">
            <summary>
            Ö´ÐÐSQLÓï¾ä,·µ»ØÓ°ÏìÐÐÊý
            </summary>
            <param name="strSql">OracleÓï¾ä</param>
            <param name="cmdType">Ö¸¶¨ÎªSQLÓï¾ä£¬´æ´¢¹ý³ÌÃû³Æ£¬ÎÄ±¾</param>
            <param name="param">²ÎÊýÊý×é</param>
            <returns>Ó°ÏìÐÐÊý</returns>
        </member>
        <member name="M:Xiuse.DbUtility.AosyOracle.ExecuteScalar(System.String,System.Data.CommandType,System.Data.OracleClient.OracleParameter[])">
            <summary>
            Ö´ÐÐSQLÓï¾ä£¬·µ»ØÖ´ÐÐ½á¹ûµÄµÚÒ»ÐÐµÄµÚÒ»ÁÐ
            </summary>
            <param name="strSql">SQLÓï¾ä</param>
            <param name="cmdType">Ö¸¶¨ÎªSQLÓï¾ä£¬´æ´¢¹ý³ÌÃû³Æ£¬ÎÄ±¾</param>
            <param name="param">²ÎÊýÊý×é</param>
            <returns>·µ»ØÖ´ÐÐ½á¹ûµÄµÚÒ»ÐÐµÄµÚÒ»ÁÐ</returns>
        </member>
        <member name="M:Xiuse.DbUtility.AosyOracle.ExecuteReader(System.String,System.Data.CommandType,System.Data.OracleClient.OracleParameter[])">
            <summary>
            Ö´ÐÐSQLÓï¾ä£¬·µ»ØÖ´ÐÐ½á¹û[OracleDataReader]
            </summary>
            <param name="strSql">SQLÓï¾ä</param>
            <param name="cmdType">Ö¸¶¨ÎªSQLÓï¾ä£¬´æ´¢¹ý³ÌÃû³Æ£¬ÎÄ±¾</param>
            <param name="param">²ÎÊýÊý×é</param>
            <returns></returns>
        </member>
        <member name="M:Xiuse.DbUtility.AosyOracle.ExecuteProcedure(System.String,System.Data.OracleClient.OracleParameter[])">
            <summary>
            Ö´ÐÐ´æ´¢¹ý³Ì£¬»ñÈ¡·µ»ØÖµ
            </summary>
            <param name="procedureName">´æ´¢¹ý³ÌÃû³Æ</param>
            <param name="param">´æ´¢¹ý³Ì²ÎÊý</param>
            <returns></returns>
        </member>
        <member name="M:Xiuse.DbUtility.AosyOracle.ExecuteProcedure(System.String,System.String,System.Data.OracleClient.OracleParameter[])">
            <summary>
            Ö´ÐÐ´æ´¢¹ý³Ì£¬»ñÈ¡·µ»ØÖµ
            </summary>
            <param name="procedureName">´æ´¢¹ý³ÌÃû³Æ</param>
            <param name="returnParamName">´ø·µ»ØÖµ²ÎÊýµÄÃû³Æ</param>
            <param name="param">´æ´¢¹ý³Ì²ÎÊý</param>
            <returns></returns>
        </member>
        <member name="M:Xiuse.DbUtility.AosyOracle.ExecuteProcedureDataReader(System.String,System.Data.OracleClient.OracleParameter[])">
            <summary>
            Ö´ÐÐ´æ´¢¹ý³Ì,·µ»ØOracleDataReader
            </summary>
            <param name="procedureName">´æ´¢¹ý³ÌÃû³Æ</param>
            <param name="param">´æ´¢¹ý³Ì²ÎÊý</param>
            <returns></returns>
        </member>
        <member name="M:Xiuse.DbUtility.AosyOracle.ExecuteProcedureDataset(System.String,System.Data.OracleClient.OracleParameter[])">
            <summary>
            Ö´ÐÐ´æ´¢¹ý³Ì,·µ»ØDataSet
            </summary>
            <param name="procedureName">´æ´¢¹ý³ÌÃû³Æ</param>
            <param name="param">´æ´¢¹ý³Ì²ÎÊý</param>
            <returns></returns>
        </member>
        <member name="M:Xiuse.DbUtility.AosyOracle.ExecuteProcedureDataset(System.String,System.Int32,System.Int32,System.Data.OracleClient.OracleParameter[])">
            <summary>
            Ö´ÐÐ´æ´¢¹ý³Ì,·µ»ØDataSet 
            </summary>
            <param name="procedureName">´æ´¢¹ý³ÌÃû³Æ</param>
            <param name="startRecord">¿ªÊ¼¼ÇÂ¼Êý</param>
            <param name="maxRecord">×î´ó¼ÇÂ¼Êý</param>
            <param name="param">´æ´¢¹ý³Ì²ÎÊý</param>
            <returns></returns>
        </member>
        <member name="M:Xiuse.DbUtility.AosyOracle.ExecuteProcedureDataset(System.String,System.Int32,System.Int32,System.Int32@,System.Data.OracleClient.OracleParameter[])">
            <summary>
            Ö´ÐÐ´æ´¢¹ý³Ì,·µ»ØDataSet 
            </summary>
            <param name="procedureName">´æ´¢¹ý³ÌÃû³Æ</param>
            <param name="startRecord">¿ªÊ¼¼ÇÂ¼Êý</param>
            <param name="maxRecord">×î´ó¼ÇÂ¼Êý</param>
            <param name="recordcount">×Ü¼ÇÂ¼Êý</param>
            <param name="param">´æ´¢¹ý³Ì²ÎÊý</param>
            <returns></returns>
        </member>
        <member name="M:Xiuse.DbUtility.AosyOracle.ExecuteProcedurePage(System.String,System.String,System.String,System.Int32,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Ö´ÐÐ·ÖÒ³´æ´¢¹ý³Ì
            </summary>
            <param name="tablename">±íÃû³Æ</param>
            <param name="tablefields">Òª²éÑ¯µÄ×Ö¶Î</param>
            <param name="orderfields">ÅÅÐò×Ö¶Î[±ØÐë]</param>
            <param name="ordertype">ÅÅÐò·½Ê½ 0 asc, 1 desc</param>
            <param name="strwhere">²éÑ¯Ìõ¼þ</param>
            <param name="pagesize">·ÖÒ³´óÐ¡</param>
            <param name="pageindex">µ±Ç°Ò³</param>
            <param name="totalcount">×Ü¼ÇÂ¼Êý</param>
            <returns></returns>
        </member>
        <member name="M:Xiuse.DbUtility.AosyOracle.GetMaxId(System.String,System.String)">
            <summary>
            »ñÈ¡×Ö¶Î×î´óID
            </summary>
            <param name="filedName">ÁÐÃû³Æ</param>
            <param name="tableName">±íÃû³Æ</param>
            <returns>×î´óID</returns>
        </member>
        <member name="M:Xiuse.DbUtility.AosyOracle.GetCount(System.String,System.String)">
            <summary>
            ·µ»Ø×Ö¶ÎÊýÁ¿×ÛºÏ
            </summary>
            <param name="filedName">×Ö¶ÎÃû³Æ</param>
            <param name="tableName">±íÃû³Æ</param>
            <returns></returns>
        </member>
        <member name="M:Xiuse.DbUtility.AosyOracle.GetCount(System.String)">
             <summary>
             ·µ»Ø×Ö¶ÎÊýÁ¿×ÛºÏ
             </summary>
            <param name="countOracle">²éÑ¯Count×ÜºÍÓï¾ä</param>
             <returns></returns>
        </member>
        <member name="M:Xiuse.DbUtility.AosyOracle.ExecuteforBool(System.String)">
            <summary>
            Ö´ÐÐSQLÓï¾ä,·µ»ØboolÊý¾ÝÀàÐÍ
            </summary>
            <param name="strSql">SQLÓï¾ä</param>
            <returns></returns>
        </member>
        <member name="M:Xiuse.DbUtility.AosyOracle.ExecuteforBool(System.String,System.Data.CommandType,System.Data.OracleClient.OracleParameter[])">
            <summary>
            Ö´ÐÐSQLÓï¾ä,·µ»ØboolÊý¾ÝÀàÐÍ
            </summary>
            <param name="strSql">SqlÓï¾ä</param>
            <param name="cmdType">CommandTypeÀàÐÍ</param>
            <param name="param">²ÎÊý</param>
            <returns></returns>
        </member>
        <member name="M:Xiuse.DbUtility.AosyOracle.AttachParameters(System.Data.OracleClient.OracleCommand,System.Data.OracleClient.OracleParameter[])">
            <summary>
            ½«OracleParameter²ÎÊýÊý×é(²ÎÊýÖµ)·ÖÅä¸øOracleCommandÃüÁî.
            Õâ¸ö·½·¨½«¸øÈÎºÎÒ»¸ö²ÎÊý·ÖÅäDBNull.Value;
            ¸Ã²Ù×÷½«×èÖ¹Ä¬ÈÏÖµµÄÊ¹ÓÃ.
            </summary>
            <param name="command">ÃüÁîÃû</param>
            <param name="commandParameters">OracleParametersÊý×é</param>
        </member>
        <member name="M:Xiuse.DbUtility.AosyOracle.AssignParameterValues(System.Data.OracleClient.OracleParameter[],System.Data.DataRow)">
            <summary>
            ½«DataRowÀàÐÍµÄÁÐÖµ·ÖÅäµ½OracleParameter²ÎÊýÊý×é.
            </summary>
            <param name="commandParameters">Òª·ÖÅäÖµµÄOracleParameter²ÎÊýÊý×é</param>
            <param name="dataRow">½«Òª·ÖÅä¸ø´æ´¢¹ý³Ì²ÎÊýµÄDataRow</param>
        </member>
        <member name="M:Xiuse.DbUtility.AosyOracle.AssignParameterValues(System.Data.OracleClient.OracleParameter[],System.Object[])">
            <summary>
            ½«Ò»¸ö¶ÔÏóÊý×é·ÖÅä¸øOracleParameter²ÎÊýÊý×é.
            </summary>
            <param name="commandParameters">Òª·ÖÅäÖµµÄOracleParameter²ÎÊýÊý×é</param>
            <param name="parameterValues">½«Òª·ÖÅä¸ø´æ´¢¹ý³Ì²ÎÊýµÄ¶ÔÏóÊý×é</param>
        </member>
        <member name="M:Xiuse.DbUtility.AosyOracle.PrepareCommand(System.Data.OracleClient.OracleCommand,System.Data.OracleClient.OracleConnection,System.Data.OracleClient.OracleTransaction,System.Data.CommandType,System.String,System.Data.OracleClient.OracleParameter[])">
            <summary>
            Ô¤´¦ÀíÓÃ»§Ìá¹©µÄÃüÁî,Êý¾Ý¿âÁ¬½Ó/ÊÂÎñ/ÃüÁîÀàÐÍ/²ÎÊý
            </summary>
            <param name="command">Òª´¦ÀíµÄOracleCommand</param>
            <param name="connection">Êý¾Ý¿âÁ¬½Ó</param>
            <param name="transaction">Ò»¸öÓÐÐ§µÄÊÂÎñ»òÕßÊÇnullÖµ</param>
            <param name="commandType">ÃüÁîÀàÐÍ (´æ´¢¹ý³Ì,ÃüÁîÎÄ±¾, ÆäËü.)</param>
            <param name="commandText">´æ´¢¹ý³ÌÃû»ò¶¼T-SQLÃüÁîÎÄ±¾</param>
            <param name="commandParameters">ºÍÃüÁîÏà¹ØÁªµÄOracleParameter²ÎÊýÊý×é,Èç¹ûÃ»ÓÐ²ÎÊýÎª'null'</param>
        </member>
        <member name="T:Xiuse.DbUtility.AosySql">
            <summary>
            Êý¾ÝÍ¨ÓÃÀà[SqlServer]
            </summary>
        </member>
        <member name="F:Xiuse.DbUtility.AosySql.Connstr">
            <summary>
            »ñÈ¡Êý¾Ý¿âÁ¬½Ó×Ö·û´®
            </summary>
        </member>
        <member name="M:Xiuse.DbUtility.AosySql.ExecuteNonQuery(System.String)">
            <summary>
            Ö´ÐÐSQLÓï¾ä,·µ»ØÓ°ÏìÐÐÊý
            </summary>
            <param name="strSql">SqlÓï¾ä</param>
            <returns>Ó°ÏìÐÐÊý</returns>
        </member>
        <member name="M:Xiuse.DbUtility.AosySql.ExecuteScalar(System.String)">
            <summary>
            Ö´ÐÐSQLÓï¾ä£¬·µ»ØÖ´ÐÐ½á¹ûµÄµÚÒ»ÐÐµÄµÚÒ»ÁÐ
            </summary>
            <param name="strSql">SQLÓï¾ä</param>
            <returns>·µ»ØÖ´ÐÐ½á¹ûµÄµÚÒ»ÐÐµÄµÚÒ»ÁÐ</returns>
        </member>
        <member name="M:Xiuse.DbUtility.AosySql.ExecuteReader(System.String)">
            <summary>
            Ö´ÐÐSQLÓï¾ä£¬·µ»ØÖ´ÐÐ½á¹û[SqlDataReader]
            </summary>
            <param name="SqlStr">SQLÓï¾ä</param>
            <returns></returns>
        </member>
        <member name="M:Xiuse.DbUtility.AosySql.ExecuteListSQL(System.Collections.Generic.List{System.String})">
            <summary>
            ÅúÁ¿Ö´ÐÐSQLÓï¾ä[´øÊÂÎñ´¦Àí]
            </summary>
            <param name="listSQL">SQLÓï¾ä¼¯ºÏ</param>
            <returns>Ö´ÐÐ³É¹¦µÄSQLÓï¾äÊýÁ¿</returns>
        </member>
        <member name="M:Xiuse.DbUtility.AosySql.ExecuteforDataSet(System.String)">
            <summary>
            Ö´ÐÐSQLÓï¾ä,·µ»ØDataSet
            </summary>
            <param name="strSql">SqlÓï¾ä</param>
            <returns>½á¹û¼¯</returns>
        </member>
        <member name="M:Xiuse.DbUtility.AosySql.ExecuteforDataSet(System.Int32,System.Int32,System.Int32@,System.String,System.String)">
            <summary>
            Ö´ÐÐSQLÓï¾ä,·µ»ØDataSet[¿ÉÓÃÓÚ·ÖÒ³Ê¹ÓÃ]
            </summary>
            <param name="startRecord">¿ªÊ¼¼ÇÂ¼Êý</param>
            <param name="maxRecord">×î´ó¼ÇÂ¼Êý</param>
            <param name="RecordCount">×Ü¼ÇÂ¼Êý</param>
            <param name="strSql">SQLÓï¾ä</param>
            <returns></returns>
        </member>
        <member name="M:Xiuse.DbUtility.AosySql.ExecuteforDataSet(System.String,System.Data.CommandType,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Ö´ÐÐSqlÓï¾ä,·µ»ØDataSet
            </summary>
            <param name="strSql">SQLÓï¾ä</param>
            <param name="cmdType">CommandTypeÀàÐÍ</param>
            <param name="param">²ÎÊý</param>
            <returns></returns>
        </member>
        <member name="M:Xiuse.DbUtility.AosySql.ExecuteforDataSet(System.String,System.String,System.Int32,System.Int32,System.Int32@,System.Data.CommandType,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Ö´ÐÐSqlÓï¾ä,·µ»ØDataSet
            </summary>
            <param name="strSql">SQLÓï¾ä</param>
            <param name="reccountSql">¼ìË÷¼ÇÂ¼ÊýSQLÓï¾ä</param>
            <param name="startRecord">¿ªÊ¼¼ÇÂ¼Êý</param>
            <param name="maxRecord">×î´ó¼ÇÂ¼Êý</param>
            <param name="recordCount">×Ü¼ÇÂ¼Êý</param>
            <param name="cmdType">CommandTypeÀàÐÍ</param>
            <param name="param">²ÎÊý</param>
            <returns></returns>
        </member>
        <member name="M:Xiuse.DbUtility.AosySql.ExecuteNonQuery(System.String,System.Data.CommandType,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Ö´ÐÐSQLÓï¾ä,·µ»ØÓ°ÏìÐÐÊý
            </summary>
            <param name="strSql">SqlÓï¾ä</param>
            <param name="cmdType">Ö¸¶¨ÎªSQLÓï¾ä£¬´æ´¢¹ý³ÌÃû³Æ£¬ÎÄ±¾</param>
            <param name="param">²ÎÊýÊý×é</param>
            <returns>Ó°ÏìÐÐÊý</returns>
        </member>
        <member name="M:Xiuse.DbUtility.AosySql.ExecuteScalar(System.String,System.Data.CommandType,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Ö´ÐÐSQLÓï¾ä£¬·µ»ØÖ´ÐÐ½á¹ûµÄµÚÒ»ÐÐµÄµÚÒ»ÁÐ
            </summary>
            <param name="strSql">SQLÓï¾ä</param>
            <param name="cmdType">Ö¸¶¨ÎªSQLÓï¾ä£¬´æ´¢¹ý³ÌÃû³Æ£¬ÎÄ±¾</param>
            <param name="param">²ÎÊýÊý×é</param>
            <returns>·µ»ØÖ´ÐÐ½á¹ûµÄµÚÒ»ÐÐµÄµÚÒ»ÁÐ</returns>
        </member>
        <member name="M:Xiuse.DbUtility.AosySql.ExecuteReader(System.String,System.Data.CommandType,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Ö´ÐÐSQLÓï¾ä£¬·µ»ØÖ´ÐÐ½á¹û[SqlDataReader]
            </summary>
            <param name="SqlStr">SQLÓï¾ä</param>
            <param name="cmdType">Ö¸¶¨ÎªSQLÓï¾ä£¬´æ´¢¹ý³ÌÃû³Æ£¬ÎÄ±¾</param>
            <param name="param">²ÎÊýÊý×é</param>
            <returns></returns>
        </member>
        <member name="M:Xiuse.DbUtility.AosySql.ExecuteProcedure(System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Ö´ÐÐ´æ´¢¹ý³Ì£¬·µ»ØÓ°ÏìÐÐÊý
            </summary>
            <param name="procedureName">´æ´¢¹ý³ÌÃû³Æ</param>
            <param name="param">´æ´¢¹ý³Ì²ÎÊý</param>
            <returns></returns>
        </member>
        <member name="M:Xiuse.DbUtility.AosySql.ExecuteProcedure(System.String,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Ö´ÐÐ´æ´¢¹ý³Ì£¬»ñÈ¡·µ»ØÖµ
            </summary>
            <param name="procedureName">´æ´¢¹ý³ÌÃû³Æ</param>
            <param name="returnParamName">´ø·µ»ØÖµ²ÎÊýµÄÃû³Æ</param>
            <param name="param">´æ´¢¹ý³Ì²ÎÊý</param>
            <returns></returns>
        </member>
        <member name="M:Xiuse.DbUtility.AosySql.ExecuteProcedureDataReader(System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Ö´ÐÐ´æ´¢¹ý³Ì,·µ»ØSqlDataReader
            </summary>
            <param name="procedureName">´æ´¢¹ý³ÌÃû³Æ</param>
            <param name="param">´æ´¢¹ý³Ì²ÎÊý</param>
            <returns></returns>
        </member>
        <member name="M:Xiuse.DbUtility.AosySql.ExecuteProcedureDataset(System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Ö´ÐÐ´æ´¢¹ý³Ì,·µ»ØDataSet 
            </summary>
            <param name="procedureName">´æ´¢¹ý³ÌÃû³Æ</param>
            <param name="param">´æ´¢¹ý³Ì²ÎÊý</param>
            <returns></returns>
        </member>
        <member name="M:Xiuse.DbUtility.AosySql.ExecuteProcedureDataset(System.String,System.Int32,System.Int32,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Ö´ÐÐ´æ´¢¹ý³Ì,·µ»ØDataSet 
            </summary>
            <param name="procedureName">´æ´¢¹ý³ÌÃû³Æ</param>
            <param name="startRecord">¿ªÊ¼¼ÇÂ¼Êý</param>
            <param name="maxRecord">×î´ó¼ÇÂ¼Êý</param>
            <param name="param">´æ´¢¹ý³Ì²ÎÊý</param>
            <returns></returns>
        </member>
        <member name="M:Xiuse.DbUtility.AosySql.ExecuteProcedureDataset(System.String,System.Int32,System.Int32,System.Int32@,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Ö´ÐÐ´æ´¢¹ý³Ì,·µ»ØDataSet 
            </summary>
            <param name="procedureName">´æ´¢¹ý³ÌÃû³Æ</param>
            <param name="startRecord">¿ªÊ¼¼ÇÂ¼Êý</param>
            <param name="maxRecord">×î´ó¼ÇÂ¼Êý</param>
            <param name="recordcount">×Ü¼ÇÂ¼Êý</param>
            <param name="param">´æ´¢¹ý³Ì²ÎÊý</param>
            <returns></returns>
        </member>
        <member name="M:Xiuse.DbUtility.AosySql.ExecuteProcedurePage(System.String,System.String,System.String,System.Int32,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Ö´ÐÐ·ÖÒ³´æ´¢¹ý³Ì
            </summary>
            <param name="tablename">±íÃû³Æ</param>
            <param name="tablefields">Òª²éÑ¯µÄ×Ö¶Î</param>
            <param name="orderfields">ÅÅÐò×Ö¶Î[±ØÐë]</param>
            <param name="ordertype">ÅÅÐò·½Ê½ 0 asc, 1 desc</param>
            <param name="strwhere">²éÑ¯Ìõ¼þ</param>
            <param name="pagesize">·ÖÒ³´óÐ¡</param>
            <param name="pageindex">µ±Ç°Ò³</param>
            <param name="totalcount">×Ü¼ÇÂ¼Êý</param>
            <returns></returns>
        </member>
        <member name="M:Xiuse.DbUtility.AosySql.GetMaxId(System.String,System.String)">
            <summary>
            »ñÈ¡×Ö¶Î×î´óID
            </summary>
            <param name="filedName">ÁÐÃû³Æ</param>
            <param name="tableName">±íÃû³Æ</param>
            <returns>×î´óID</returns>
        </member>
        <member name="M:Xiuse.DbUtility.AosySql.GetCount(System.String,System.String)">
            <summary>
            ·µ»Ø×Ö¶ÎÊýÁ¿×ÛºÏ
            </summary>
            <param name="filedName">×Ö¶ÎÃû³Æ</param>
            <param name="tableName">±íÃû³Æ</param>
            <returns></returns>
        </member>
        <member name="M:Xiuse.DbUtility.AosySql.GetCount(System.String)">
             <summary>
             ·µ»Ø×Ö¶ÎÊýÁ¿×ÛºÏ
             </summary>
            <param name="countSql">²éÑ¯Count×ÜºÍÓï¾ä</param>
             <returns></returns>
        </member>
        <member name="M:Xiuse.DbUtility.AosySql.ExecuteforBool(System.String)">
            <summary>
            Ö´ÐÐSQLÓï¾ä,·µ»ØboolÊý¾ÝÀàÐÍ
            </summary>
            <param name="strSql">SQLÓï¾ä</param>
            <returns></returns>
        </member>
        <member name="M:Xiuse.DbUtility.AosySql.ExecuteforBool(System.String,System.Data.CommandType,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Ö´ÐÐSQLÓï¾ä,·µ»ØboolÊý¾ÝÀàÐÍ
            </summary>
            <param name="strSql">SqlÓï¾ä</param>
            <param name="cmdType">CommandTypeÀàÐÍ</param>
            <param name="param">²ÎÊý</param>
            <returns></returns>
        </member>
        <member name="M:Xiuse.DbUtility.AosySql.AttachParameters(System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlParameter[])">
            <summary>
            ½«SqlParameter²ÎÊýÊý×é(²ÎÊýÖµ)·ÖÅä¸øSqlCommandÃüÁî.
            Õâ¸ö·½·¨½«¸øÈÎºÎÒ»¸ö²ÎÊý·ÖÅäDBNull.Value;
            ¸Ã²Ù×÷½«×èÖ¹Ä¬ÈÏÖµµÄÊ¹ÓÃ.
            </summary>
            <param name="command">ÃüÁîÃû</param>
            <param name="commandParameters">SqlParametersÊý×é</param>
        </member>
        <member name="M:Xiuse.DbUtility.AosySql.AssignParameterValues(System.Data.SqlClient.SqlParameter[],System.Data.DataRow)">
            <summary>
            ½«DataRowÀàÐÍµÄÁÐÖµ·ÖÅäµ½SqlParameter²ÎÊýÊý×é.
            </summary>
            <param name="commandParameters">Òª·ÖÅäÖµµÄSqlParameter²ÎÊýÊý×é</param>
            <param name="dataRow">½«Òª·ÖÅä¸ø´æ´¢¹ý³Ì²ÎÊýµÄDataRow</param>
        </member>
        <member name="M:Xiuse.DbUtility.AosySql.AssignParameterValues(System.Data.SqlClient.SqlParameter[],System.Object[])">
            <summary>
            ½«Ò»¸ö¶ÔÏóÊý×é·ÖÅä¸øSqlParameter²ÎÊýÊý×é.
            </summary>
            <param name="commandParameters">Òª·ÖÅäÖµµÄSqlParameter²ÎÊýÊý×é</param>
            <param name="parameterValues">½«Òª·ÖÅä¸ø´æ´¢¹ý³Ì²ÎÊýµÄ¶ÔÏóÊý×é</param>
        </member>
        <member name="M:Xiuse.DbUtility.AosySql.PrepareCommand(System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Ô¤´¦ÀíÓÃ»§Ìá¹©µÄÃüÁî,Êý¾Ý¿âÁ¬½Ó/ÊÂÎñ/ÃüÁîÀàÐÍ/²ÎÊý
            </summary>
            <param name="command">Òª´¦ÀíµÄSqlCommand</param>
            <param name="connection">Êý¾Ý¿âÁ¬½Ó</param>
            <param name="transaction">Ò»¸öÓÐÐ§µÄÊÂÎñ»òÕßÊÇnullÖµ</param>
            <param name="commandType">ÃüÁîÀàÐÍ (´æ´¢¹ý³Ì,ÃüÁîÎÄ±¾, ÆäËü.)</param>
            <param name="commandText">´æ´¢¹ý³ÌÃû»ò¶¼T-SQLÃüÁîÎÄ±¾</param>
            <param name="commandParameters">ºÍÃüÁîÏà¹ØÁªµÄSqlParameter²ÎÊýÊý×é,Èç¹ûÃ»ÓÐ²ÎÊýÎª'null'</param>
        </member>
        <member name="T:Xiuse.DbUtility.MySqlHelper">
            <summary>
            Helper class that makes it easier to work with the provider.
            </summary>
        </member>
        <member name="M:Xiuse.DbUtility.MySqlHelper.AttachParameters(MySql.Data.MySqlClient.MySqlCommand,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            This method is used to attach array of SqlParameters to a SqlCommand.
            
            This method will assign a value of DbNull to any parameter with a direction of
            InputOutput and a value of null.  
            
            This behavior will prevent default values from being used, but
            this will be the less common case than an intended pure output parameter (derived as InputOutput)
            where the user provided no input value.
            </summary>
            <param name="command">The command to which the parameters will be added</param>
            <param name="commandParameters">An array of SqlParameters to be added to command</param>
        </member>
        <member name="M:Xiuse.DbUtility.MySqlHelper.AssignParameterValues(MySql.Data.MySqlClient.MySqlParameter[],System.Data.DataRow)">
            <summary>
            This method assigns dataRow column values to an array of SqlParameters
            </summary>
            <param name="commandParameters">Array of SqlParameters to be assigned values</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values</param>
        </member>
        <member name="M:Xiuse.DbUtility.MySqlHelper.AssignParameterValues(MySql.Data.MySqlClient.MySqlParameter[],System.Object[])">
            <summary>
            This method assigns an array of values to an array of SqlParameters
            </summary>
            <param name="commandParameters">Array of SqlParameters to be assigned values</param>
            <param name="parameterValues">Array of objects holding the values to be assigned</param>
        </member>
        <member name="M:Xiuse.DbUtility.MySqlHelper.AssignParameterValues(MySql.Data.MySqlClient.MySqlParameter,System.Object)">
            <summary>
            This method assigns an array of values to an array of SqlParameters
            </summary>
            <param name="commandParameter">Array of SqlParameters to be assigned values</param>
            <param name="parameterValue">Array of objects holding the values to be assigned</param>
        </member>
        <member name="M:Xiuse.DbUtility.MySqlHelper.ExecuteNonQuery(MySql.Data.MySqlClient.MySqlConnection,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            Executes a single command against a MySQL database.  The <see cref="T:MySql.Data.MySqlClient.MySqlConnection"/> is assumed to be
            open when the method is called and remains open after the method completes.
            </summary>
            <param name="connection"><see cref="T:MySql.Data.MySqlClient.MySqlConnection"/> object to use</param>
            <param name="commandText">SQL command to be executed</param>
            <param name="commandParameters">Array of <see cref="T:MySql.Data.MySqlClient.MySqlParameter"/> objects to use with the command.</param>
            <returns></returns>
        </member>
        <member name="M:Xiuse.DbUtility.MySqlHelper.ExecuteNonQuery(System.String,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            Executes a single command against a MySQL database.  A new <see cref="T:MySql.Data.MySqlClient.MySqlConnection"/> is created
            using the <see cref="P:MySql.Data.MySqlClient.MySqlConnection.ConnectionString"/> given.
            </summary>
            <param name="connectionString"><see cref="P:MySql.Data.MySqlClient.MySqlConnection.ConnectionString"/> to use</param>
            <param name="commandText">SQL command to be executed</param>
            <param name="parms">Array of <see cref="T:MySql.Data.MySqlClient.MySqlParameter"/> objects to use with the command.</param>
            <returns></returns>
        </member>
        <member name="M:Xiuse.DbUtility.MySqlHelper.ExecuteNonQuery(MySql.Data.MySqlClient.MySqlTransaction,System.String)">
            <summary>
            Execute a SqlCommand (that returns no resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(trans, CommandType.StoredProcedure, "PublishOrders");
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>    
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Xiuse.DbUtility.MySqlHelper.ExecuteNonQuery(MySql.Data.MySqlClient.MySqlTransaction,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns no resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(trans, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>    
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Xiuse.DbUtility.MySqlHelper.ExecuteDataRow(System.String,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            Executes a single SQL command and returns the first row of the resultset.  A new MySqlConnection object
            is created, opened, and closed during this method.
            </summary>
            <param name="connectionString">Settings to be used for the connection</param>
            <param name="commandText">Command to execute</param>
            <param name="parms">Parameters to use for the command</param>
            <returns>DataRow containing the first row of the resultset</returns>
        </member>
        <member name="M:Xiuse.DbUtility.MySqlHelper.ExecuteDataset(System.String,System.String)">
            <summary>
            Executes a single SQL command and returns the resultset in a <see cref="T:System.Data.DataSet"/>.  
            A new MySqlConnection object is created, opened, and closed during this method.
            </summary>
            <param name="connectionString">Settings to be used for the connection</param>
            <param name="commandText">Command to execute</param>
            <returns><see cref="T:System.Data.DataSet"/> containing the resultset</returns>
        </member>
        <member name="M:Xiuse.DbUtility.MySqlHelper.ExecuteDataset(System.String,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            Executes a single SQL command and returns the resultset in a <see cref="T:System.Data.DataSet"/>.  
            A new MySqlConnection object is created, opened, and closed during this method.
            </summary>
            <param name="connectionString">Settings to be used for the connection</param>
            <param name="commandText">Command to execute</param>
            <param name="commandParameters">Parameters to use for the command</param>
            <returns><see cref="T:System.Data.DataSet"/> containing the resultset</returns>
        </member>
        <member name="M:Xiuse.DbUtility.MySqlHelper.ExecuteDataset(MySql.Data.MySqlClient.MySqlConnection,System.String)">
            <summary>
            Executes a single SQL command and returns the resultset in a <see cref="T:System.Data.DataSet"/>.  
            The state of the <see cref="T:MySql.Data.MySqlClient.MySqlConnection"/> object remains unchanged after execution
            of this method.
            </summary>
            <param name="connection"><see cref="T:MySql.Data.MySqlClient.MySqlConnection"/> object to use</param>
            <param name="commandText">Command to execute</param>
            <returns><see cref="T:System.Data.DataSet"/> containing the resultset</returns>
        </member>
        <member name="M:Xiuse.DbUtility.MySqlHelper.ExecuteDataset(MySql.Data.MySqlClient.MySqlConnection,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            Executes a single SQL command and returns the resultset in a <see cref="T:System.Data.DataSet"/>.  
            The state of the <see cref="T:MySql.Data.MySqlClient.MySqlConnection"/> object remains unchanged after execution
            of this method.
            </summary>
            <param name="connection"><see cref="T:MySql.Data.MySqlClient.MySqlConnection"/> object to use</param>
            <param name="commandText">Command to execute</param>
            <param name="commandParameters">Parameters to use for the command</param>
            <returns><see cref="T:System.Data.DataSet"/> containing the resultset</returns>
        </member>
        <member name="M:Xiuse.DbUtility.MySqlHelper.ExecuteDataset(MySql.Data.MySqlClient.MySqlTransaction,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(trans, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>      
            <param name="commandText">The T-SQL command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Xiuse.DbUtility.MySqlHelper.ExecuteDataset(MySql.Data.MySqlClient.MySqlTransaction,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            Execute a MySqlCommand (that returns a resultset) against the specified MySqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(trans, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid MySqlTransaction</param>        
            <param name="commandText">The T-SQL command</param>
            <param name="commandParameters">An array of MySqlParamters used to execute the command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Xiuse.DbUtility.MySqlHelper.UpdateDataSet(System.String,System.String,System.Data.DataSet,System.String)">
            <summary>
            Updates the given table with data from the given <see cref="T:System.Data.DataSet"/>
            </summary>
            <param name="connectionString">Settings to use for the update</param>
            <param name="commandText">Command text to use for the update</param>
            <param name="ds"><see cref="T:System.Data.DataSet"/> containing the new data to use in the update</param>
            <param name="tablename">Tablename in the dataset to update</param>
        </member>
        <member name="M:Xiuse.DbUtility.MySqlHelper.ExecuteDataset(System.String,System.Data.CommandType,System.Int32,System.Int32,System.Int32@,System.String)">
            <summary>
            Ö´ÐÐÖ¸¶¨Êý¾Ý¿âÁ¬½Ó¶ÔÏóµÄÃüÁî,·µ»ØDataSet.
            </summary>
            <param name="connectionString">Ò»¸öÓÐÐ§µÄÊý¾Ý¿âÁ¬½Ó×Ö·û´®</param>
            <param name="startRecord">¿ªÊ¼¼ÇÂ¼Êý</param>
            <param name="maxRecord">×î´ó¼ÇÂ¼Êý</param>
            <param name="recordCount">¼ÇÂ¼×ÜÊý</param>
            <param name="commandText">²éÑ¯Óï¾ä</param>
            <returns></returns>
        </member>
        <member name="M:Xiuse.DbUtility.MySqlHelper.ExecuteDataset(System.String,System.Data.CommandType,System.Int32,System.Int32,System.Int32@,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            Ö´ÐÐÖ¸¶¨Êý¾Ý¿âÁ¬½Ó¶ÔÏóµÄÃüÁî,·µ»ØDataSet.
            </summary>
            <param name="connectionString">Ò»¸öÓÐÐ§µÄÊý¾Ý¿âÁ¬½Ó×Ö·û´®</param>
            <param name="startRecord">¿ªÊ¼¼ÇÂ¼Êý</param>
            <param name="maxRecord">×î´ó¼ÇÂ¼Êý</param>
            <param name="recordCount">¼ÇÂ¼×ÜÊý</param>
            <param name="commandText">²éÑ¯Óï¾ä</param>
            <param name="parameters">²ÎÊý¼¯ºÏ</param>
            <returns></returns>
        </member>
        <member name="M:Xiuse.DbUtility.MySqlHelper.ExecuteReader(MySql.Data.MySqlClient.MySqlConnection,MySql.Data.MySqlClient.MySqlTransaction,System.String,MySql.Data.MySqlClient.MySqlParameter[],System.Boolean)">
            <summary>
            Executes a single command against a MySQL database, possibly inside an existing transaction.
            </summary>
            <param name="connection"><see cref="T:MySql.Data.MySqlClient.MySqlConnection"/> object to use for the command</param>
            <param name="transaction"><see cref="T:MySql.Data.MySqlClient.MySqlTransaction"/> object to use for the command</param>
            <param name="commandText">Command text to use</param>
            <param name="commandParameters">Array of <see cref="T:MySql.Data.MySqlClient.MySqlParameter"/> objects to use with the command</param>
            <param name="ExternalConn">True if the connection should be preserved, false if not</param>
            <returns><see cref="T:MySql.Data.MySqlClient.MySqlDataReader"/> object ready to read the results of the command</returns>
        </member>
        <member name="M:Xiuse.DbUtility.MySqlHelper.ExecuteReader(System.String,System.String)">
            <summary>
            Executes a single command against a MySQL database.
            </summary>
            <param name="connectionString">Settings to use for this command</param>
            <param name="commandText">Command text to use</param>
            <returns><see cref="T:MySql.Data.MySqlClient.MySqlDataReader"/> object ready to read the results of the command</returns>
        </member>
        <member name="M:Xiuse.DbUtility.MySqlHelper.ExecuteReader(System.String,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            Executes a single command against a MySQL database.
            </summary>
            <param name="connectionString">Settings to use for this command</param>
            <param name="commandText">Command text to use</param>
            <param name="commandParameters">Array of <see cref="T:MySql.Data.MySqlClient.MySqlParameter"/> objects to use with the command</param>
            <returns><see cref="T:MySql.Data.MySqlClient.MySqlDataReader"/> object ready to read the results of the command</returns>
        </member>
        <member name="M:Xiuse.DbUtility.MySqlHelper.ExecuteReader(MySql.Data.MySqlClient.MySqlTransaction,System.String)">
            <summary>
            Execute a MySqlCommand (that returns a resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             MySqlDataReader dr = ExecuteReader( trans, "GetOrders");
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>      
            <param name="commandText">The T-SQL command</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Xiuse.DbUtility.MySqlHelper.ExecuteReader(MySql.Data.MySqlClient.MySqlTransaction,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
              MySqlDataReader dr = ExecuteReader(trans, "GetOrders", new MySqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>        
            <param name="commandText">The T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>A MySqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Xiuse.DbUtility.MySqlHelper.ExecuteScalar(System.String,System.String)">
            <summary>
            Execute a single command against a MySQL database.
            </summary>
            <param name="connectionString">Settings to use for the update</param>
            <param name="commandText">Command text to use for the update</param>
            <returns>The first column of the first row in the result set, or a null reference if the result set is empty.</returns>
        </member>
        <member name="M:Xiuse.DbUtility.MySqlHelper.ExecuteScalar(System.String,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            Execute a single command against a MySQL database.
            </summary>
            <param name="connectionString">Settings to use for the command</param>
            <param name="commandText">Command text to use for the command</param>
            <param name="commandParameters">Parameters to use for the command</param>
            <returns>The first column of the first row in the result set, or a null reference if the result set is empty.</returns>
        </member>
        <member name="M:Xiuse.DbUtility.MySqlHelper.ExecuteScalar(MySql.Data.MySqlClient.MySqlConnection,System.String)">
            <summary>
            Execute a single command against a MySQL database.
            </summary>
            <param name="connection"><see cref="T:MySql.Data.MySqlClient.MySqlConnection"/> object to use</param>
            <param name="commandText">Command text to use for the command</param>
            <returns>The first column of the first row in the result set, or a null reference if the result set is empty.</returns>
        </member>
        <member name="M:Xiuse.DbUtility.MySqlHelper.ExecuteScalar(MySql.Data.MySqlClient.MySqlConnection,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            Execute a single command against a MySQL database.
            </summary>
            <param name="connection"><see cref="T:MySql.Data.MySqlClient.MySqlConnection"/> object to use</param>
            <param name="commandText">Command text to use for the command</param>
            <param name="commandParameters">Parameters to use for the command</param>
            <returns>The first column of the first row in the result set, or a null reference if the result set is empty.</returns>
        </member>
        <member name="M:Xiuse.DbUtility.MySqlHelper.ExecuteScalar(MySql.Data.MySqlClient.MySqlTransaction,System.String)">
            <summary>
            Execute a MySqlCommand (that returns a 1x1 resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(trans, "GetOrderCount");
            </remarks>
            <param name="transaction">A valid MySqlTransaction</param>      
            <param name="commandText">The T-SQL command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Xiuse.DbUtility.MySqlHelper.ExecuteScalar(MySql.Data.MySqlClient.MySqlTransaction,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(trans, "GetOrderCount", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid MySqlTransaction</param>   
            <param name="commandText">The T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Xiuse.DbUtility.MySqlHelper.PrepareCommand(MySql.Data.MySqlClient.MySqlCommand,MySql.Data.MySqlClient.MySqlConnection,MySql.Data.MySqlClient.MySqlTransaction,System.String,MySql.Data.MySqlClient.MySqlParameter[],System.Boolean@)">
            <summary>
            This method opens (if necessary) and assigns a connection, transaction, command type and parameters 
            to the provided command
            </summary>
            <param name="command">The SqlCommand to be prepared</param>
            <param name="connection">A valid SqlConnection, on which to execute this command</param>
            <param name="transaction">A valid SqlTransaction, or 'null'</param>       
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParameters to be associated with the command or 'null' if no parameters are required</param>
            <param name="mustCloseConnection"><c>true</c> if the connection was opened by the method, otherwose is false.</param>
        </member>
        <member name="M:Xiuse.DbUtility.MySqlHelper.MakeInParam(System.String,MySql.Data.MySqlClient.MySqlDbType,System.Int32,System.Object)">
            <summary>
            Make input param.
            </summary>
            <param name="ParamName">Name of param.</param>
            <param name="DbType">Param type.</param>
            <param name="Size">Param size.</param>
            <param name="Value">Param value.</param>
            <returns>New parameter.</returns>
        </member>
        <member name="M:Xiuse.DbUtility.MySqlHelper.MakeOutParam(System.String,MySql.Data.MySqlClient.MySqlDbType,System.Int32)">
            <summary>
            Make input param.
            </summary>
            <param name="ParamName">Name of param.</param>
            <param name="DbType">Param type.</param>
            <param name="Size">Param size.</param>
            <returns>New parameter.</returns>
        </member>
        <member name="M:Xiuse.DbUtility.MySqlHelper.MakeParam(System.String,MySql.Data.MySqlClient.MySqlDbType,System.Int32,System.Data.ParameterDirection,System.Object)">
            <summary>
            Make stored procedure param.
            </summary>
            <param name="ParamName">Name of param.</param>
            <param name="DbType">Param type.</param>
            <param name="Size">Param size.</param>
            <param name="Direction">Parm direction.</param>
            <param name="Value">Param value.</param>
            <returns>New parameter.</returns>
        </member>
        <member name="T:Xiuse.DbUtility.ParamsCache">
            <summary>
            ÓÃÀ´´æÈ¡»º´æSqlParameter[]
            </summary>
        </member>
        <member name="M:Xiuse.DbUtility.ParamsCache.CloneParameters(MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            Deep copy of cached SqlParameter array
            </summary>
            <param name="originalParameters"></param>
            <returns></returns>
        </member>
        <member name="M:Xiuse.DbUtility.ParamsCache.CloneParameters(MySql.Data.MySqlClient.MySqlParameter)">
            <summary>
            Deep copy of cached SqlParameter array
            </summary>
            <param name="originalParameter"></param>
            <returns></returns>
        </member>
        <member name="M:Xiuse.DbUtility.ParamsCache.CacheParameterSet(System.String,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            Add parameter array to the cache
            </summary>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters to be cached</param>
        </member>
        <member name="M:Xiuse.DbUtility.ParamsCache.GetCachedParameterSet(System.String,System.String)">
            <summary>
            Retrieve a parameter array from the cache
            </summary>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An array of SqlParamters</returns>
        </member>
        <member name="M:Xiuse.DbUtility.ParamsCache.GetCachedParameterSet(System.String,System.String,MySql.Data.MySqlClient.MySqlParameter[]@)">
            <summary>
            µÃµ½»º´æÖÐµÄ´æ´¢¹ý³Ì²ÎÊý¡£Èç¹ûÄÜµÃµ½£¬·µ»Øtrue£¬²¢out ²ÎÊý³öÀ´£¬²»ÄÜµÃµ½£¬Ôòparms = null£¬·µ»Øfalse;
            ×÷Õß£º¿Ï¶¨ÊÇWintle:)
            </summary>
            <param name="connectionString"></param>
            <param name="spName"></param>
            <param name="parms"></param>
            <returns></returns>
        </member>
        <member name="M:Xiuse.DbUtility.ParamsCache.GetCachedParameterSet(System.String,System.String,MySql.Data.MySqlClient.MySqlParameter@)">
            <summary>
            µÃµ½»º´æÖÐµÄ´æ´¢¹ý³Ì²ÎÊý¡£Èç¹ûÄÜµÃµ½£¬·µ»Øtrue£¬²¢out ²ÎÊý³öÀ´£¬²»ÄÜµÃµ½£¬Ôòparms = null£¬·µ»Øfalse;
            ×÷Õß£º¿Ï¶¨ÊÇWintle:)
            </summary>
            <param name="connectionString"></param>
            <param name="spName"></param>
            <param name="parm"></param>
            <returns></returns>
        </member>
        <member name="T:Xiuse.DbUtility.OleDbHelper">
            <summary>
            The OleDbHelper class is intended to encapsulate high performance, scalable best practices for 
            common uses of OleDbClient.
            </summary>
        </member>
        <member name="M:Xiuse.DbUtility.OleDbHelper.AttachParameters(System.Data.OleDb.OleDbCommand,System.Data.OleDb.OleDbParameter[])">
            <summary>
            This method is used to attach array's of OleDbParameters to an OleDbCommand.
            
            This method will assign a value of DbNull to any parameter with a direction of
            InputOutput and a value of null.  
            
            This behavior will prevent default values from being used, but
            this will be the less common case than an intended pure output parameter (derived as InputOutput)
            where the user provided no input value.
            </summary>
            <param name="command">The command to which the parameters will be added</param>
            <param name="commandParameters">an array of OleDbParameters tho be added to command</param>
        </member>
        <member name="M:Xiuse.DbUtility.OleDbHelper.AssignParameterValues(System.Data.OleDb.OleDbParameter[],System.Object[])">
            <summary>
            This method assigns an array of values to an array of OleDbParameters.
            </summary>
            <param name="commandParameters">array of OleDbParameters to be assigned values</param>
            <param name="parameterValues">array of objects holding the values to be assigned</param>
        </member>
        <member name="M:Xiuse.DbUtility.OleDbHelper.PrepareCommand(System.Data.OleDb.OleDbCommand,System.Data.OleDb.OleDbConnection,System.Data.OleDb.OleDbTransaction,System.Data.CommandType,System.String,System.Data.OleDb.OleDbParameter[])">
            <summary>
            This method opens (if necessary) and assigns a connection, transaction, command type and parameters 
            to the provided command.
            </summary>
            <param name="command">the OleDbCommand to be prepared</param>
            <param name="connection">a valid OleDbConnection, on which to execute this command</param>
            <param name="transaction">a valid OleDbTransaction, or 'null'</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL/SQL command</param> 
            <param name="commandParameters">an array of OleDbParameters to be associated with the command or 'null' if no parameters are required</param>
        </member>
        <member name="M:Xiuse.DbUtility.OleDbHelper.ExecuteNonQuery(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute an OleDbCommand (that returns no resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(connString, CommandType.StoredProcedure, "PublishOrders");
            </remarks>
            <param name="connectionString">a valid connection string for an OleDbConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL/SQL command</param>  
            <returns>an int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Xiuse.DbUtility.OleDbHelper.ExecuteNonQuery(System.String,System.Data.CommandType,System.String,System.Data.OleDb.OleDbParameter[])">
            <summary>
            Execute an OleDbCommand (that returns no resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(connString, CommandType.StoredProcedure, "PublishOrders", new OleDbParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">a valid connection string for a OleDbConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL/SQL command</param>  
            <param name="commandParameters">an array of OleDbParameters used to execute the command</param>
            <returns>an int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Xiuse.DbUtility.OleDbHelper.ExecuteNonQuery(System.String,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via an OleDbCommand (that returns no resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int result = ExecuteNonQuery(connString, "PublishOrders", 24, 36);
            </remarks>
            <param name="connectionString">a valid connection string for a OleDbConnection</param>
            <param name="spName">the name of the stored prcedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>an int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Xiuse.DbUtility.OleDbHelper.ExecuteNonQuery(System.Data.OleDb.OleDbConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute an OleDbDbCommand (that returns no resultset and takes no parameters) against the provided OleDbConnection. 
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(conn, CommandType.StoredProcedure, "PublishOrders");
            </remarks>
            <param name="connection">a valid OleDbConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL/SQL command</param>
            <returns>an int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Xiuse.DbUtility.OleDbHelper.ExecuteNonQuery(System.Data.OleDb.OleDbConnection,System.Data.CommandType,System.String,System.Data.OleDb.OleDbParameter[])">
            <summary>
            Execute an OleDbCommand (that returns no resultset) against the specified OleDbConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(conn, CommandType.StoredProcedure, "PublishOrders", new OleDbParameter("@prodid", 24));
            </remarks>
            <param name="connection">a valid OleDbConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL/SQL command</param>  
            <param name="commandParameters">an array of OleDbParamters used to execute the command</param>
            <returns>an int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Xiuse.DbUtility.OleDbHelper.ExecuteNonQuery(System.Data.OleDb.OleDbConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via an OleDbCommand (that returns no resultset) against the specified OleDbConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int result = ExecuteNonQuery(conn, "PublishOrders", 24, 36);
            </remarks>
            <param name="connection">a valid OleDbConnection</param>
            <param name="spName">the name of the stored prcedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>an int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Xiuse.DbUtility.OleDbHelper.ExecuteNonQuery(System.Data.OleDb.OleDbTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute an OleDbCommand (that returns no resultset and takes no parameters) against the provided OleDbTransaction. 
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(trans, CommandType.StoredProcedure, "PublishOrders");
            </remarks>
            <param name="transaction">a valid OleDbTransaction</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL/SQL command</param>  
            <returns>an int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Xiuse.DbUtility.OleDbHelper.ExecuteNonQuery(System.Data.OleDb.OleDbTransaction,System.Data.CommandType,System.String,System.Data.OleDb.OleDbParameter[])">
            <summary>
            Execute an OleDbCommand (that returns no resultset) against the specified OleDbTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(trans, CommandType.StoredProcedure, "GetOrders", new OleDbParameter("@prodid", 24));
            </remarks>
            <param name="transaction">a valid OleDbTransaction</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL/SQL command</param>  
            <param name="commandParameters">an array of OleDbParamters used to execute the command</param>
            <returns>an int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Xiuse.DbUtility.OleDbHelper.ExecuteNonQuery(System.Data.OleDb.OleDbTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via an OleDbCommand (that returns no resultset) against the specified 
            OleDbTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int result = ExecuteNonQuery(conn, trans, "PublishOrders", 24, 36);
            </remarks>
            <param name="transaction">a valid OleDbTransaction</param>
            <param name="spName">the name of the stored procedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>an int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Xiuse.DbUtility.OleDbHelper.ExecuteDataset(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute an OleDbCommand (that returns a resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(connString, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connectionString">a valid connection string for an OleDbConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL/SQL command</param>  
            <returns>a dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Xiuse.DbUtility.OleDbHelper.ExecuteDataset(System.String,System.Data.CommandType,System.String,System.Data.OleDb.OleDbParameter[])">
            <summary>
            Execute an OleDbCommand (that returns a resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(connString, CommandType.StoredProcedure, "GetOrders", new OleDbParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">a valid connection string for an OleDbConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL/SQL command</param> 
            <param name="commandParameters">an array of OleDbParamters used to execute the command</param>
            <returns>a dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Xiuse.DbUtility.OleDbHelper.ExecuteDataset(System.String,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via an OleDbCommand (that returns a resultset) against the database specified in 
            the conneciton string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             DataSet ds = ExecuteDataset(connString, "GetOrders", 24, 36);
            </remarks>
            <param name="connectionString">a valid connection string for an OleDbConnection</param>
            <param name="spName">the name of the stored procedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>a dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Xiuse.DbUtility.OleDbHelper.ExecuteDataset(System.Data.OleDb.OleDbConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute an OleDbCommand (that returns a resultset and takes no parameters) against the provided OleDbConnection. 
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(conn, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connection">a valid OleDbConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL/SQL command</param>
            <returns>a dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Xiuse.DbUtility.OleDbHelper.ExecuteDataset(System.Data.OleDb.OleDbConnection,System.Data.CommandType,System.String,System.Data.OleDb.OleDbParameter[])">
            <summary>
            Execute an OleDbCommand (that returns a resultset) against the specified OleDbConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(conn, CommandType.StoredProcedure, "GetOrders", new OleDbParameter("@prodid", 24));
            </remarks>
            <param name="connection">a valid OleDbConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL/SQL command</param> 
            <param name="commandParameters">an array of OleDbParamters used to execute the command</param>
            <returns>a dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Xiuse.DbUtility.OleDbHelper.ExecuteDataset(System.Data.OleDb.OleDbConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via an OleDbCommand (that returns a resultset) against the specified OleDbConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             DataSet ds = ExecuteDataset(conn, "GetOrders", 24, 36);
            </remarks>
            <param name="connection">a valid OleDbConnection</param>
            <param name="spName">the name of the stored prcedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>a dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Xiuse.DbUtility.OleDbHelper.ExecuteDataset(System.Data.OleDb.OleDbTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute an OleDbCommand (that returns a resultset and takes no parameters) against the provided OleDbTransaction. 
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(trans, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="transaction">a valid OleDbTransaction</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL/SQL command</param> 
            <returns>a dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Xiuse.DbUtility.OleDbHelper.ExecuteDataset(System.Data.OleDb.OleDbTransaction,System.Data.CommandType,System.String,System.Data.OleDb.OleDbParameter[])">
            <summary>
            Execute an OleDbCommand (that returns a resultset) against the specified OleDbTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(trans, CommandType.StoredProcedure, "GetOrders", new OleDbParameter("@prodid", 24));
            </remarks>
            <param name="transaction">a valid OleDbTransaction</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL/SQL command</param> 
            <param name="commandParameters">an array of OleDbParamters used to execute the command</param>
            <returns>a dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Xiuse.DbUtility.OleDbHelper.ExecuteDataset(System.Data.OleDb.OleDbTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via an OleDbCommand (that returns a resultset) against the specified 
            OleDbTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             DataSet ds = ExecuteDataset(trans, "GetOrders", 24, 36);
            </remarks>
            <param name="transaction">a valid OleDbTransaction</param>
            <param name="spName">the name of the stored prcedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>a dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Xiuse.DbUtility.OleDbHelper.ExecuteDataset(System.String,System.Data.CommandType,System.Int32,System.Int32,System.Int32@,System.String)">
            <summary>
            Ö´ÐÐÖ¸¶¨Êý¾Ý¿âÁ¬½Ó¶ÔÏóµÄÃüÁî,·µ»ØDataSet.
            </summary>
            <param name="connectionString">Ò»¸öÓÐÐ§µÄÊý¾Ý¿âÁ¬½Ó×Ö·û´®</param>
            <param name="commandType">Ö´ÐÐÀàÐÍ[±íÃû,´æ´¢¹ý³Ì,SQLÓï¾ä]</param>
            <param name="startRecord">¿ªÊ¼¼ÇÂ¼Êý</param>
            <param name="maxRecord">×î´ó¼ÇÂ¼Êý</param>
            <param name="recordCount">¼ÇÂ¼×ÜÊý</param>
            <param name="commandText">²éÑ¯Óï¾ä</param>
            <returns></returns>
        </member>
        <member name="M:Xiuse.DbUtility.OleDbHelper.ExecuteDataset(System.String,System.Data.CommandType,System.Int32,System.Int32,System.Int32@,System.String,System.Data.OleDb.OleDbParameter[])">
            <summary>
            Ö´ÐÐÖ¸¶¨Êý¾Ý¿âÁ¬½Ó¶ÔÏóµÄÃüÁî,·µ»ØDataSet.
            </summary>
            <param name="connectionString">Ò»¸öÓÐÐ§µÄÊý¾Ý¿âÁ¬½Ó×Ö·û´®</param>
            <param name="commandType">Ö´ÐÐÀàÐÍ[±íÃû,´æ´¢¹ý³Ì,SQLÓï¾ä]</param>
            <param name="startRecord">¿ªÊ¼¼ÇÂ¼Êý</param>
            <param name="maxRecord">×î´ó¼ÇÂ¼Êý</param>
            <param name="recordCount">¼ÇÂ¼×ÜÊý</param>
            <param name="commandText">²éÑ¯Óï¾ä</param>
            <param name="parameters">²ÎÊý¼¯ºÏ</param>
            <returns></returns>
        </member>
        <member name="T:Xiuse.DbUtility.OleDbHelper.OleDbConnectionOwnership">
            <summary>
            this enum is used to indicate weather the connection was provided by the caller, or created by OleDbHelper, so that
            we can set the appropriate CommandBehavior when calling ExecuteReader()
            </summary>
        </member>
        <member name="F:Xiuse.DbUtility.OleDbHelper.OleDbConnectionOwnership.Internal">
            <summary>Connection is owned and managed by OleDbHelper</summary>
        </member>
        <member name="F:Xiuse.DbUtility.OleDbHelper.OleDbConnectionOwnership.External">
            <summary>Connection is owned and managed by the caller</summary>
        </member>
        <member name="M:Xiuse.DbUtility.OleDbHelper.ExecuteReader(System.Data.OleDb.OleDbConnection,System.Data.OleDb.OleDbTransaction,System.Data.CommandType,System.String,System.Data.OleDb.OleDbParameter[],Xiuse.DbUtility.OleDbHelper.OleDbConnectionOwnership)">
            <summary>
            Create and prepare an OleDbCommand, and call ExecuteReader with the appropriate CommandBehavior.
            </summary>
            <remarks>
            If we created and opened the connection, we want the connection to be closed when the DataReader is closed.
            
            If the caller provided the connection, we want to leave it to them to manage.
            </remarks>
            <param name="connection">a valid OleDbConnection, on which to execute this command</param>
            <param name="transaction">a valid OleDbTransaction, or 'null'</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL/SQL command</param> 
            <param name="commandParameters">an array of OleDbParameters to be associated with the command or 'null' if no parameters are required</param>
            <param name="connectionOwnership">indicates whether the connection parameter was provided by the caller, or created by OleDbHelper</param>
            <returns>OleDbDataReader containing the results of the command</returns>
        </member>
        <member name="M:Xiuse.DbUtility.OleDbHelper.ExecuteReader(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute an OleDbCommand (that returns a resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             OleDbDataReader dr = ExecuteReader(connString, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connectionString">a valid connection string for an OleDbConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL/SQL command</param>  
            <returns>an OleDbDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Xiuse.DbUtility.OleDbHelper.ExecuteReader(System.String,System.Data.CommandType,System.String,System.Data.OleDb.OleDbParameter[])">
            <summary>
            Execute an OleDbCommand (that returns a resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             OleDbDataReader dr = ExecuteReader(connString, CommandType.StoredProcedure, "GetOrders", new OleDbParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">a valid connection string for an OleDbConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL/SQL command</param>  
            <param name="commandParameters">an array of OleDbParameters used to execute the command</param>
            <returns>an OleDbDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Xiuse.DbUtility.OleDbHelper.ExecuteReader(System.String,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via an OleDbCommand (that returns a resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             OleDbDataReader dr = ExecuteReader(connString, "GetOrders", 24, 36);
            </remarks>
            <param name="connectionString">a valid connection string for an OleDbConnection</param>
            <param name="spName">the name of the stored prcedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>an OleDbDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Xiuse.DbUtility.OleDbHelper.ExecuteReader(System.Data.OleDb.OleDbConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute an OleDbCommand (that returns a resultset and takes no parameters) against the provided OleDbConnection. 
            </summary>
            <remarks>
            e.g.:  
             OleDbDataReader dr = ExecuteReader(conn, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connection">a valid OleDbConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL/SQL command</param>
            <returns>an OleDbDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Xiuse.DbUtility.OleDbHelper.ExecuteReader(System.Data.OleDb.OleDbConnection,System.Data.CommandType,System.String,System.Data.OleDb.OleDbParameter[])">
            <summary>
            Execute an OleDbCommand (that returns a resultset) against the specified OleDbConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             OleDbDataReader dr = ExecuteReader(conn, CommandType.StoredProcedure, "GetOrders", new OleDbParameter("@prodid", 24));
            </remarks>
            <param name="connection">a valid OleDbConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL/SQL command</param>  
            <param name="commandParameters">an array of OleDbParamters used to execute the command</param>
            <returns>an OleDbDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Xiuse.DbUtility.OleDbHelper.ExecuteReader(System.Data.OleDb.OleDbConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via an OleDbCommand (that returns a resultset) against the specified OleDbConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             OleDbDataReader dr = ExecuteReader(conn, "GetOrders", 24, 36);
            </remarks>
            <param name="connection">a valid OleDbConnection</param>
            <param name="spName">the name of the stored procedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>an OleDbDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Xiuse.DbUtility.OleDbHelper.ExecuteReader(System.Data.OleDb.OleDbTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute an OleDbCommand (that returns a resultset and takes no parameters) against the provided OleDbTransaction. 
            </summary>
            <remarks>
            e.g.:  
             OleDbDataReader dr = ExecuteReader(trans, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="transaction">a valid OleDbTransaction</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL/SQL command</param>  
            <returns>an OleDbDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Xiuse.DbUtility.OleDbHelper.ExecuteReader(System.Data.OleDb.OleDbTransaction,System.Data.CommandType,System.String,System.Data.OleDb.OleDbParameter[])">
            <summary>
            Execute an OleDbCommand (that returns a resultset) against the specified OleDbTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
              OleDbDataReader dr = ExecuteReader(trans, CommandType.StoredProcedure, "GetOrders", new OleDbParameter("@prodid", 24));
            </remarks>
            <param name="transaction">a valid OleDbTransaction</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL/SQL command</param> 
            <param name="commandParameters">an array of OleDbParameters used to execute the command</param>
            <returns>an OleDbDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Xiuse.DbUtility.OleDbHelper.ExecuteReader(System.Data.OleDb.OleDbTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via an OleDbCommand (that returns a resultset) against the specified
            OleDbTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             OleDbDataReader dr = ExecuteReader(trans, "GetOrders", 24, 36);
            </remarks>
            <param name="transaction">a valid OleDbTransaction</param>
            <param name="spName">the name of the stored prcedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>an OleDbDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Xiuse.DbUtility.OleDbHelper.ExecuteScalar(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute a OleDbCommand (that returns a 1x1 resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(connString, CommandType.StoredProcedure, "GetOrderCount");
            </remarks>
            <param name="connectionString">a valid connection string for a OleDbConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-OleDb command</param>
            <returns>an object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Xiuse.DbUtility.OleDbHelper.ExecuteScalar(System.String,System.Data.CommandType,System.String,System.Data.OleDb.OleDbParameter[])">
            <summary>
            Execute a OleDbCommand (that returns a 1x1 resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(connString, CommandType.StoredProcedure, "GetOrderCount", new OleDbParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">a valid connection string for a OleDbConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-OleDb command</param>
            <param name="commandParameters">an array of OleDbParamters used to execute the command</param>
            <returns>an object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Xiuse.DbUtility.OleDbHelper.ExecuteScalar(System.String,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a OleDbCommand (that returns a 1x1 resultset) against the database specified in 
            the conneciton string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int orderCount = (int)ExecuteScalar(connString, "GetOrderCount", 24, 36);
            </remarks>
            <param name="connectionString">a valid connection string for a OleDbConnection</param>
            <param name="spName">the name of the stored prcedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>an object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Xiuse.DbUtility.OleDbHelper.ExecuteScalar(System.Data.OleDb.OleDbConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a OleDbCommand (that returns a 1x1 resultset and takes no parameters) against the provided OleDbConnection. 
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(conn, CommandType.StoredProcedure, "GetOrderCount");
            </remarks>
            <param name="connection">a valid OleDbConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-OleDb command</param>
            <returns>an object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Xiuse.DbUtility.OleDbHelper.ExecuteScalar(System.Data.OleDb.OleDbConnection,System.Data.CommandType,System.String,System.Data.OleDb.OleDbParameter[])">
            <summary>
            Execute a OleDbCommand (that returns a 1x1 resultset) against the specified OleDbConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(conn, CommandType.StoredProcedure, "GetOrderCount", new OleDbParameter("@prodid", 24));
            </remarks>
            <param name="connection">a valid OleDbConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-OleDb command</param>
            <param name="commandParameters">an array of OleDbParamters used to execute the command</param>
            <returns>an object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Xiuse.DbUtility.OleDbHelper.ExecuteScalar(System.Data.OleDb.OleDbConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a OleDbCommand (that returns a 1x1 resultset) against the specified OleDbConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int orderCount = (int)ExecuteScalar(conn, "GetOrderCount", 24, 36);
            </remarks>
            <param name="connection">a valid OleDbConnection</param>
            <param name="spName">the name of the stored prcedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>an object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Xiuse.DbUtility.OleDbHelper.ExecuteScalar(System.Data.OleDb.OleDbTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a OleDbCommand (that returns a 1x1 resultset and takes no parameters) against the provided OleDbTransaction. 
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(trans, CommandType.StoredProcedure, "GetOrderCount");
            </remarks>
            <param name="transaction">a valid OleDbTransaction</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-OleDb command</param>
            <returns>an object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Xiuse.DbUtility.OleDbHelper.ExecuteScalar(System.Data.OleDb.OleDbTransaction,System.Data.CommandType,System.String,System.Data.OleDb.OleDbParameter[])">
            <summary>
            Execute a OleDbCommand (that returns a 1x1 resultset) against the specified OleDbTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(trans, CommandType.StoredProcedure, "GetOrderCount", new OleDbParameter("@prodid", 24));
            </remarks>
            <param name="transaction">a valid OleDbTransaction</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-OleDb command</param>
            <param name="commandParameters">an array of OleDbParamters used to execute the command</param>
            <returns>an object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Xiuse.DbUtility.OleDbHelper.ExecuteScalar(System.Data.OleDb.OleDbTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a OleDbCommand (that returns a 1x1 resultset) against the specified
            OleDbTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int orderCount = (int)ExecuteScalar(trans, "GetOrderCount", 24, 36);
            </remarks>
            <param name="transaction">a valid OleDbTransaction</param>
            <param name="spName">the name of the stored prcedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>an object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="T:Xiuse.DbUtility.OleDbHelperParameterCache">
            <summary>
            OleDbHelperParameterCache provides functions to leverage a static cache of procedure parameters, and the
            ability to discover parameters for stored procedures at run-time.
            </summary>
        </member>
        <member name="M:Xiuse.DbUtility.OleDbHelperParameterCache.DiscoverSpParameterSet(System.String,System.String,System.Boolean)">
            <summary>
            resolve at run-time the appropriate set of OleDbParameters for a stored procedure
            </summary>
            <param name="connectionString">a valid connection string for a OleDbConnection</param>
            <param name="spName">the name of the stored prcedure</param>
            <param name="includeReturnValueParameter">weather or not to onclude ther return value parameter</param>
            <returns></returns>
        </member>
        <member name="M:Xiuse.DbUtility.OleDbHelperParameterCache.CacheParameterSet(System.String,System.String,System.Data.OleDb.OleDbParameter[])">
            <summary>
            add parameter array to the cache
            </summary>
            <param name="connectionString">a valid connection string for an OleDbConnection</param>
            <param name="commandText">the stored procedure name or T-OleDb command</param>
            <param name="commandParameters">an array of OleDbParamters to be cached</param>
        </member>
        <member name="M:Xiuse.DbUtility.OleDbHelperParameterCache.GetCachedParameterSet(System.String,System.String)">
            <summary>
            retrieve a parameter array from the cache
            </summary>
            <param name="connectionString">a valid connection string for a OleDbConnection</param>
            <param name="commandText">the stored procedure name or T-OleDb command</param>
            <returns>an array of OleDbParameters</returns>
        </member>
        <member name="M:Xiuse.DbUtility.OleDbHelperParameterCache.GetSpParameterSet(System.String,System.String)">
            <summary>
            Retrieves the set of OleDbParameters appropriate for the stored procedure
            </summary>
            <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
            <param name="connectionString">a valid connection string for a OleDbConnection</param>
            <param name="spName">the name of the stored prcedure</param>
            <returns>an array of OleDbParameters</returns>
        </member>
        <member name="M:Xiuse.DbUtility.OleDbHelperParameterCache.GetSpParameterSet(System.String,System.String,System.Boolean)">
            <summary>
            Retrieves the set of OleDbParameters appropriate for the stored procedure
            </summary>
            <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
            <param name="connectionString">a valid connection string for an OleDbConnection</param>
            <param name="spName">the name of the stored procedure</param>
            <param name="includeReturnValueParameter">a bool value indicating weather the return value parameter should be included in the results</param>
            <returns>an array of OleDbParameters</returns>
        </member>
        <member name="T:Xiuse.DbUtility.OracleHelper">
            <summary>
            The OracleHelper class is intended to encapsulate high performance, scalable best practices for 
            common uses of OracleClient.
            </summary>
        </member>
        <member name="M:Xiuse.DbUtility.OracleHelper.AttachParameters(System.Data.OracleClient.OracleCommand,System.Data.OracleClient.OracleParameter[])">
            <summary>
            This method is used to attach array's of OracleParameters to an OracleCommand.
            
            This method will assign a value of DbNull to any parameter with a direction of
            InputOutput and a value of null.  
            
            This behavior will prevent default values from being used, but
            this will be the less common case than an intended pure output parameter (derived as InputOutput)
            where the user provided no input value.
            </summary>
            <param name="command">The command to which the parameters will be added</param>
            <param name="commandParameters">an array of OracleParameters tho be added to command</param>
        </member>
        <member name="M:Xiuse.DbUtility.OracleHelper.AssignParameterValues(System.Data.OracleClient.OracleParameter[],System.Object[])">
            <summary>
            This method assigns an array of values to an array of OracleParameters.
            </summary>
            <param name="commandParameters">array of OracleParameters to be assigned values</param>
            <param name="parameterValues">array of objects holding the values to be assigned</param>
        </member>
        <member name="M:Xiuse.DbUtility.OracleHelper.PrepareCommand(System.Data.OracleClient.OracleCommand,System.Data.OracleClient.OracleConnection,System.Data.OracleClient.OracleTransaction,System.Data.CommandType,System.String,System.Data.OracleClient.OracleParameter[])">
            <summary>
            This method opens (if necessary) and assigns a connection, transaction, command type and parameters 
            to the provided command.
            </summary>
            <param name="command">the OracleCommand to be prepared</param>
            <param name="connection">a valid OracleConnection, on which to execute this command</param>
            <param name="transaction">a valid OracleTransaction, or 'null'</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL/SQL command</param> 
            <param name="commandParameters">an array of OracleParameters to be associated with the command or 'null' if no parameters are required</param>
        </member>
        <member name="M:Xiuse.DbUtility.OracleHelper.ExecuteNonQuery(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute an OracleCommand (that returns no resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(connString, CommandType.StoredProcedure, "PublishOrders");
            </remarks>
            <param name="connectionString">a valid connection string for an OracleConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL/SQL command</param>  
            <returns>an int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Xiuse.DbUtility.OracleHelper.ExecuteNonQuery(System.String,System.Data.CommandType,System.String,System.Data.OracleClient.OracleParameter[])">
            <summary>
            Execute an OracleCommand (that returns no resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(connString, CommandType.StoredProcedure, "PublishOrders", new OracleParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">a valid connection string for an OracleConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL/SQL command</param>  
            <param name="commandParameters">an array of OracleParameters used to execute the command</param>
            <returns>an int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Xiuse.DbUtility.OracleHelper.ExecuteNonQuery(System.String,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via an OracleCommand (that returns no resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int result = ExecuteNonQuery(connString, "PublishOrders", 24, 36);
            </remarks>
            <param name="connectionString">a valid connection string for an OracleConnection</param>
            <param name="spName">the name of the stored procedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>an int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Xiuse.DbUtility.OracleHelper.ExecuteNonQuery(System.Data.OracleClient.OracleConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute an OracleCommand (that returns no resultset and takes no parameters) against the provided OracleConnection. 
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(conn, CommandType.StoredProcedure, "PublishOrders");
            </remarks>
            <param name="connection">a valid OracleConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL/SQL command</param>
            <returns>an int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Xiuse.DbUtility.OracleHelper.ExecuteNonQuery(System.Data.OracleClient.OracleConnection,System.Data.CommandType,System.String,System.Data.OracleClient.OracleParameter[])">
            <summary>
            Execute an OracleCommand (that returns no resultset) against the specified OracleConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(conn, CommandType.StoredProcedure, "PublishOrders", new OracleParameter("@prodid", 24));
            </remarks>
            <param name="connection">a valid OracleConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL/SQL command</param>  
            <param name="commandParameters">an array of OracleParameters used to execute the command</param>
            <returns>an int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Xiuse.DbUtility.OracleHelper.ExecuteNonQuery(System.Data.OracleClient.OracleConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via an OracleCommand (that returns no resultset) against the specified OracleConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int result = ExecuteNonQuery(conn, "PublishOrders", 24, 36);
            </remarks>
            <param name="connection">a valid OracleConnection</param>
            <param name="spName">the name of the stored procedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>an int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Xiuse.DbUtility.OracleHelper.ExecuteNonQuery(System.Data.OracleClient.OracleTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute an OracleCommand (that returns no resultset and takes no parameters) against the provided OracleTransaction. 
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(trans, CommandType.StoredProcedure, "PublishOrders");
            </remarks>
            <param name="transaction">a valid OracleTransaction</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL/SQL command</param>  
            <returns>an int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Xiuse.DbUtility.OracleHelper.ExecuteNonQuery(System.Data.OracleClient.OracleTransaction,System.Data.CommandType,System.String,System.Data.OracleClient.OracleParameter[])">
            <summary>
            Execute an OracleCommand (that returns no resultset) against the specified OracleTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(trans, CommandType.StoredProcedure, "GetOrders", new OracleParameter("@prodid", 24));
            </remarks>
            <param name="transaction">a valid OracleTransaction</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL/SQL command</param>  
            <param name="commandParameters">an array of OracleParameters used to execute the command</param>
            <returns>an int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Xiuse.DbUtility.OracleHelper.ExecuteNonQuery(System.Data.OracleClient.OracleTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via an OracleCommand (that returns no resultset) against the specified 
            OracleTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int result = ExecuteNonQuery(conn, trans, "PublishOrders", 24, 36);
            </remarks>
            <param name="transaction">a valid OracleTransaction</param>
            <param name="spName">the name of the stored procedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>an int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Xiuse.DbUtility.OracleHelper.ExecuteDataset(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute an OracleCommand (that returns a resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(connString, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connectionString">a valid connection string for an OracleConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL/SQL command</param>  
            <returns>a dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Xiuse.DbUtility.OracleHelper.ExecuteDataset(System.String,System.Data.CommandType,System.String,System.Data.OracleClient.OracleParameter[])">
            <summary>
            Execute an OracleCommand (that returns a resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(connString, CommandType.StoredProcedure, "GetOrders", new OracleParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">a valid connection string for an OracleConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL/SQL command</param> 
            <param name="commandParameters">an array of OracleParameters used to execute the command</param>
            <returns>a dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Xiuse.DbUtility.OracleHelper.ExecuteDataset(System.String,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via an OracleCommand (that returns a resultset) against the database specified in 
            the conneciton string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             DataSet ds = ExecuteDataset(connString, "GetOrders", 24, 36);
            </remarks>
            <param name="connectionString">a valid connection string for an OracleConnection</param>
            <param name="spName">the name of the stored procedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>a dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Xiuse.DbUtility.OracleHelper.ExecuteDataset(System.Data.OracleClient.OracleConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute an OracleCommand (that returns a resultset and takes no parameters) against the provided OracleConnection. 
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(conn, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connection">a valid OracleConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL/SQL command</param>
            <returns>a dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Xiuse.DbUtility.OracleHelper.ExecuteDataset(System.Data.OracleClient.OracleConnection,System.Data.CommandType,System.String,System.Data.OracleClient.OracleParameter[])">
            <summary>
            Execute an OracleCommand (that returns a resultset) against the specified OracleConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(conn, CommandType.StoredProcedure, "GetOrders", new OracleParameter("@prodid", 24));
            </remarks>
            <param name="connection">a valid OracleConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL/SQL command</param> 
            <param name="commandParameters">an array of OracleParameters used to execute the command</param>
            <returns>a dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Xiuse.DbUtility.OracleHelper.ExecuteDataset(System.Data.OracleClient.OracleConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via an OracleCommand (that returns a resultset) against the specified OracleConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             DataSet ds = ExecuteDataset(conn, "GetOrders", 24, 36);
            </remarks>
            <param name="connection">a valid OracleConnection</param>
            <param name="spName">the name of the stored procedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>a dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Xiuse.DbUtility.OracleHelper.ExecuteDataset(System.Data.OracleClient.OracleTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute an OracleCommand (that returns a resultset and takes no parameters) against the provided OracleTransaction. 
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(trans, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="transaction">a valid OracleTransaction</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL/SQL command</param> 
            <returns>a dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Xiuse.DbUtility.OracleHelper.ExecuteDataset(System.Data.OracleClient.OracleTransaction,System.Data.CommandType,System.String,System.Data.OracleClient.OracleParameter[])">
            <summary>
            Execute an OracleCommand (that returns a resultset) against the specified OracleTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(trans, CommandType.StoredProcedure, "GetOrders", new OracleParameter("@prodid", 24));
            </remarks>
            <param name="transaction">a valid OracleTransaction</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL/SQL command</param> 
            <param name="commandParameters">an array of OracleParameters used to execute the command</param>
            <returns>a dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Xiuse.DbUtility.OracleHelper.ExecuteDataset(System.String,System.Data.CommandType,System.Int32,System.Int32,System.Int32@,System.String)">
            <summary>
            Ö´ÐÐÖ¸¶¨Êý¾Ý¿âÁ¬½Ó¶ÔÏóµÄÃüÁî,·µ»ØDataSet.
            </summary>
            <param name="connectionString">Ò»¸öÓÐÐ§µÄÊý¾Ý¿âÁ¬½Ó×Ö·û´®</param>
            <param name="commandType">Ö´ÐÐÀàÐÍ[±íÃû,´æ´¢¹ý³Ì,SQLÓï¾ä]</param>
            <param name="startRecord">¿ªÊ¼¼ÇÂ¼Êý</param>
            <param name="maxRecord">×î´ó¼ÇÂ¼Êý</param>
            <param name="recordCount">¼ÇÂ¼×ÜÊý</param>
            <param name="commandText">²éÑ¯Óï¾ä</param>
            <returns></returns>
        </member>
        <member name="M:Xiuse.DbUtility.OracleHelper.ExecuteDataset(System.Data.OracleClient.OracleTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via an OracleCommand (that returns a resultset) against the specified 
            OracleTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             DataSet ds = ExecuteDataset(trans, "GetOrders", 24, 36);
            </remarks>
            <param name="transaction">a valid OracleTransaction</param>
            <param name="spName">the name of the stored procedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>a dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Xiuse.DbUtility.OracleHelper.ExecuteDataset(System.String,System.Data.CommandType,System.Int32,System.Int32,System.Int32@,System.String,System.Data.OracleClient.OracleParameter[])">
            <summary>
            Ö´ÐÐÖ¸¶¨Êý¾Ý¿âÁ¬½Ó¶ÔÏóµÄÃüÁî,·µ»ØDataSet.
            </summary>
            <param name="connectionString">Ò»¸öÓÐÐ§µÄÊý¾Ý¿âÁ¬½Ó×Ö·û´®</param>
            <param name="commandType">Ö´ÐÐÀàÐÍ[±íÃû,´æ´¢¹ý³Ì,SQLÓï¾ä]</param>
            <param name="startRecord">¿ªÊ¼¼ÇÂ¼Êý</param>
            <param name="maxRecord">×î´ó¼ÇÂ¼Êý</param>
            <param name="recordCount">¼ÇÂ¼×ÜÊý</param>
            <param name="commandText">²éÑ¯Óï¾ä</param>
            <param name="parameters">²ÎÊý¼¯ºÏ</param>
            <returns></returns>
        </member>
        <member name="T:Xiuse.DbUtility.OracleHelper.OracleConnectionOwnership">
            <summary>
            this enum is used to indicate weather the connection was provided by the caller, or created by OracleHelper, so that
            we can set the appropriate CommandBehavior when calling ExecuteReader()
            </summary>
        </member>
        <member name="F:Xiuse.DbUtility.OracleHelper.OracleConnectionOwnership.Internal">
            <summary>Connection is owned and managed by OracleHelper</summary>
        </member>
        <member name="F:Xiuse.DbUtility.OracleHelper.OracleConnectionOwnership.External">
            <summary>Connection is owned and managed by the caller</summary>
        </member>
        <member name="M:Xiuse.DbUtility.OracleHelper.ExecuteReader(System.Data.OracleClient.OracleConnection,System.Data.OracleClient.OracleTransaction,System.Data.CommandType,System.String,System.Data.OracleClient.OracleParameter[],Xiuse.DbUtility.OracleHelper.OracleConnectionOwnership)">
            <summary>
            Create and prepare an OracleCommand, and call ExecuteReader with the appropriate CommandBehavior.
            </summary>
            <remarks>
            If we created and opened the connection, we want the connection to be closed when the DataReader is closed.
            
            If the caller provided the connection, we want to leave it to them to manage.
            </remarks>
            <param name="connection">a valid OracleConnection, on which to execute this command</param>
            <param name="transaction">a valid OracleTransaction, or 'null'</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL/SQL command</param> 
            <param name="commandParameters">an array of OracleParameters to be associated with the command or 'null' if no parameters are required</param>
            <param name="connectionOwnership">indicates whether the connection parameter was provided by the caller, or created by OracleHelper</param>
            <returns>OracleDataReader containing the results of the command</returns>
        </member>
        <member name="M:Xiuse.DbUtility.OracleHelper.ExecuteReader(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute an OracleCommand (that returns a resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             OracleDataReader dr = ExecuteReader(connString, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connectionString">a valid connection string for an OracleConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL/SQL command</param>  
            <returns>an OracleDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Xiuse.DbUtility.OracleHelper.ExecuteReader(System.String,System.Data.CommandType,System.String,System.Data.OracleClient.OracleParameter[])">
            <summary>
            Execute an OracleCommand (that returns a resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             OracleDataReader dr = ExecuteReader(connString, CommandType.StoredProcedure, "GetOrders", new OracleParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">a valid connection string for an OracleConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL/SQL command</param>  
            <param name="commandParameters">an array of OracleParameters used to execute the command</param>
            <returns>an OracleDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Xiuse.DbUtility.OracleHelper.ExecuteReader(System.String,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via an OracleCommand (that returns a resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             OracleDataReader dr = ExecuteReader(connString, "GetOrders", 24, 36);
            </remarks>
            <param name="connectionString">a valid connection string for an OracleConnection</param>
            <param name="spName">the name of the stored procedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>an OracleDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Xiuse.DbUtility.OracleHelper.ExecuteReader(System.Data.OracleClient.OracleConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute an OracleCommand (that returns a resultset and takes no parameters) against the provided OracleConnection. 
            </summary>
            <remarks>
            e.g.:  
             OracleDataReader dr = ExecuteReader(conn, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connection">a valid OracleConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL/SQL command</param>
            <returns>an OracleDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Xiuse.DbUtility.OracleHelper.ExecuteReader(System.Data.OracleClient.OracleConnection,System.Data.CommandType,System.String,System.Data.OracleClient.OracleParameter[])">
            <summary>
            Execute an OracleCommand (that returns a resultset) against the specified OracleConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             OracleDataReader dr = ExecuteReader(conn, CommandType.StoredProcedure, "GetOrders", new OracleParameter("@prodid", 24));
            </remarks>
            <param name="connection">a valid OracleConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL/SQL command</param>  
            <param name="commandParameters">an array of OracleParameters used to execute the command</param>
            <returns>an OracleDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Xiuse.DbUtility.OracleHelper.ExecuteReader(System.Data.OracleClient.OracleConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via an OracleCommand (that returns a resultset) against the specified OracleConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             OracleDataReader dr = ExecuteReader(conn, "GetOrders", 24, 36);
            </remarks>
            <param name="connection">a valid OracleConnection</param>
            <param name="spName">the name of the stored procedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>an OracleDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Xiuse.DbUtility.OracleHelper.ExecuteReader(System.Data.OracleClient.OracleTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute an OracleCommand (that returns a resultset and takes no parameters) against the provided OracleTransaction. 
            </summary>
            <remarks>
            e.g.:  
             OracleDataReader dr = ExecuteReader(trans, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="transaction">a valid OracleTransaction</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL/SQL command</param>  
            <returns>an OracleDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Xiuse.DbUtility.OracleHelper.ExecuteReader(System.Data.OracleClient.OracleTransaction,System.Data.CommandType,System.String,System.Data.OracleClient.OracleParameter[])">
            <summary>
            Execute an OracleCommand (that returns a resultset) against the specified OracleTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
              OracleDataReader dr = ExecuteReader(trans, CommandType.StoredProcedure, "GetOrders", new OracleParameter("@prodid", 24));
            </remarks>
            <param name="transaction">a valid OracleTransaction</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL/SQL command</param> 
            <param name="commandParameters">an array of OracleParameters used to execute the command</param>
            <returns>an OracleDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Xiuse.DbUtility.OracleHelper.ExecuteReader(System.Data.OracleClient.OracleTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via an OracleCommand (that returns a resultset) against the specified
            OracleTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             OracleDataReader dr = ExecuteReader(trans, "GetOrders", 24, 36);
            </remarks>
            <param name="transaction">a valid OracleTransaction</param>
            <param name="spName">the name of the stored procedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>an OracleDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Xiuse.DbUtility.OracleHelper.ExecuteScalar(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute an OracleCommand (that returns a 1x1 resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(connString, CommandType.StoredProcedure, "GetOrderCount");
            </remarks>
            <param name="connectionString">a valid connection string for an OracleConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-Oracle command</param>
            <returns>an object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Xiuse.DbUtility.OracleHelper.ExecuteScalar(System.String,System.Data.CommandType,System.String,System.Data.OracleClient.OracleParameter[])">
            <summary>
            Execute an OracleCommand (that returns a 1x1 resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(connString, CommandType.StoredProcedure, "GetOrderCount", new OracleParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">a valid connection string for an OracleConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-Oracle command</param>
            <param name="commandParameters">an array of OracleParameters used to execute the command</param>
            <returns>an object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Xiuse.DbUtility.OracleHelper.ExecuteScalar(System.String,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via an OracleCommand (that returns a 1x1 resultset) against the database specified in 
            the conneciton string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int orderCount = (int)ExecuteScalar(connString, "GetOrderCount", 24, 36);
            </remarks>
            <param name="connectionString">a valid connection string for an OracleConnection</param>
            <param name="spName">the name of the stored procedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>an object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Xiuse.DbUtility.OracleHelper.ExecuteScalar(System.Data.OracleClient.OracleConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute an OracleCommand (that returns a 1x1 resultset and takes no parameters) against the provided OracleConnection. 
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(conn, CommandType.StoredProcedure, "GetOrderCount");
            </remarks>
            <param name="connection">a valid OracleConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-Oracle command</param>
            <returns>an object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Xiuse.DbUtility.OracleHelper.ExecuteScalar(System.Data.OracleClient.OracleConnection,System.Data.CommandType,System.String,System.Data.OracleClient.OracleParameter[])">
            <summary>
            Execute an OracleCommand (that returns a 1x1 resultset) against the specified OracleConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(conn, CommandType.StoredProcedure, "GetOrderCount", new OracleParameter("@prodid", 24));
            </remarks>
            <param name="connection">a valid OracleConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-OleDb command</param>
            <param name="commandParameters">an array of OracleParameters used to execute the command</param>
            <returns>an object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Xiuse.DbUtility.OracleHelper.ExecuteScalar(System.Data.OracleClient.OracleConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via an OracleCommand (that returns a 1x1 resultset) against the specified OracleConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int orderCount = (int)ExecuteScalar(conn, "GetOrderCount", 24, 36);
            </remarks>
            <param name="connection">a valid OracleConnection</param>
            <param name="spName">the name of the stored procedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>an object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Xiuse.DbUtility.OracleHelper.ExecuteScalar(System.Data.OracleClient.OracleTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute an OracleCommand (that returns a 1x1 resultset and takes no parameters) against the provided OracleTransaction. 
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(trans, CommandType.StoredProcedure, "GetOrderCount");
            </remarks>
            <param name="transaction">a valid OracleTransaction</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-OleDb command</param>
            <returns>an object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Xiuse.DbUtility.OracleHelper.ExecuteScalar(System.Data.OracleClient.OracleTransaction,System.Data.CommandType,System.String,System.Data.OracleClient.OracleParameter[])">
            <summary>
            Execute an OracleCommand (that returns a 1x1 resultset) against the specified OracleTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(trans, CommandType.StoredProcedure, "GetOrderCount", new OracleParameter("@prodid", 24));
            </remarks>
            <param name="transaction">a valid OracleTransaction</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-OleDb command</param>
            <param name="commandParameters">an array of OracleParameters used to execute the command</param>
            <returns>an object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Xiuse.DbUtility.OracleHelper.ExecuteScalar(System.Data.OracleClient.OracleTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via an OracleCommand (that returns a 1x1 resultset) against the specified
            OracleTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int orderCount = (int)ExecuteScalar(trans, "GetOrderCount", 24, 36);
            </remarks>
            <param name="transaction">a valid OracleTransaction</param>
            <param name="spName">the name of the stored procedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>an object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="T:Xiuse.DbUtility.OracleHelperParameterCache">
            <summary>
            OracleHelperParameterCache provides functions to leverage a static cache of procedure parameters, and the
            ability to discover parameters for stored procedures at run-time.
            </summary>
        </member>
        <member name="M:Xiuse.DbUtility.OracleHelperParameterCache.DiscoverSpParameterSet(System.String,System.String,System.Boolean)">
            <summary>
            resolve at run-time the appropriate set of OracleParameters for a stored procedure
            </summary>
            <param name="connectionString">a valid connection string for an OracleConnection</param>
            <param name="spName">the name of the stored procedure</param>
            <param name="includeReturnValueParameter">whether or not to include ther return value parameter</param>
            <returns></returns>
        </member>
        <member name="M:Xiuse.DbUtility.OracleHelperParameterCache.CacheParameterSet(System.String,System.String,System.Data.OracleClient.OracleParameter[])">
            <summary>
            add parameter array to the cache
            </summary>
            <param name="connectionString">a valid connection string for an OracleConnection</param>
            <param name="commandText">the stored procedure name or T-OleDb command</param>
            <param name="commandParameters">an array of OracleParameters to be cached</param>
        </member>
        <member name="M:Xiuse.DbUtility.OracleHelperParameterCache.GetCachedParameterSet(System.String,System.String)">
            <summary>
            retrieve a parameter array from the cache
            </summary>
            <param name="connectionString">a valid connection string for an OracleConnection</param>
            <param name="commandText">the stored procedure name or T-OleDb command</param>
            <returns>an array of OracleParameters</returns>
        </member>
        <member name="M:Xiuse.DbUtility.OracleHelperParameterCache.GetSpParameterSet(System.String,System.String)">
            <summary>
            Retrieves the set of OracleParameters appropriate for the stored procedure
            </summary>
            <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
            <param name="connectionString">a valid connection string for an OracleConnection</param>
            <param name="spName">the name of the stored procedure</param>
            <returns>an array of OracleParameters</returns>
        </member>
        <member name="M:Xiuse.DbUtility.OracleHelperParameterCache.GetSpParameterSet(System.String,System.String,System.Boolean)">
            <summary>
            Retrieves the set of OracleParameters appropriate for the stored procedure
            </summary>
            <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
            <param name="connectionString">a valid connection string for an OracleConnection</param>
            <param name="spName">the name of the stored procedure</param>
            <param name="includeReturnValueParameter">a bool value indicating whether the return value parameter should be included in the results</param>
            <returns>an array of OracleParameters</returns>
        </member>
        <member name="T:Xiuse.DbUtility.SqlHelper">
            <summary>
            SqlServerÊý¾Ý·ÃÎÊ°ïÖúÀà
            </summary>
        </member>
        <member name="M:Xiuse.DbUtility.SqlHelper.AttachParameters(System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlParameter[])">
            <summary>
            ½«SqlParameter²ÎÊýÊý×é(²ÎÊýÖµ)·ÖÅä¸øSqlCommandÃüÁî.
            Õâ¸ö·½·¨½«¸øÈÎºÎÒ»¸ö²ÎÊý·ÖÅäDBNull.Value;
            ¸Ã²Ù×÷½«×èÖ¹Ä¬ÈÏÖµµÄÊ¹ÓÃ.
            </summary>
            <param name="command">ÃüÁîÃû</param>
            <param name="commandParameters">SqlParametersÊý×é</param>
        </member>
        <member name="M:Xiuse.DbUtility.SqlHelper.AssignParameterValues(System.Data.SqlClient.SqlParameter[],System.Data.DataRow)">
            <summary>
            ½«DataRowÀàÐÍµÄÁÐÖµ·ÖÅäµ½SqlParameter²ÎÊýÊý×é.
            </summary>
            <param name="commandParameters">Òª·ÖÅäÖµµÄSqlParameter²ÎÊýÊý×é</param>
            <param name="dataRow">½«Òª·ÖÅä¸ø´æ´¢¹ý³Ì²ÎÊýµÄDataRow</param>
        </member>
        <member name="M:Xiuse.DbUtility.SqlHelper.AssignParameterValues(System.Data.SqlClient.SqlParameter[],System.Object[])">
            <summary>
            ½«Ò»¸ö¶ÔÏóÊý×é·ÖÅä¸øSqlParameter²ÎÊýÊý×é.
            </summary>
            <param name="commandParameters">Òª·ÖÅäÖµµÄSqlParameter²ÎÊýÊý×é</param>
            <param name="parameterValues">½«Òª·ÖÅä¸ø´æ´¢¹ý³Ì²ÎÊýµÄ¶ÔÏóÊý×é</param>
        </member>
        <member name="M:Xiuse.DbUtility.SqlHelper.PrepareCommand(System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[],System.Boolean@)">
            <summary>
            Ô¤´¦ÀíÓÃ»§Ìá¹©µÄÃüÁî,Êý¾Ý¿âÁ¬½Ó/ÊÂÎñ/ÃüÁîÀàÐÍ/²ÎÊý
            </summary>
            <param name="command">Òª´¦ÀíµÄSqlCommand</param>
            <param name="connection">Êý¾Ý¿âÁ¬½Ó</param>
            <param name="transaction">Ò»¸öÓÐÐ§µÄÊÂÎñ»òÕßÊÇnullÖµ</param>
            <param name="commandType">ÃüÁîÀàÐÍ (´æ´¢¹ý³Ì,ÃüÁîÎÄ±¾, ÆäËü.)</param>
            <param name="commandText">´æ´¢¹ý³ÌÃû»ò¶¼T-SQLÃüÁîÎÄ±¾</param>
            <param name="commandParameters">ºÍÃüÁîÏà¹ØÁªµÄSqlParameter²ÎÊýÊý×é,Èç¹ûÃ»ÓÐ²ÎÊýÎª'null'</param>
            <param name="mustCloseConnection"><c>true</c> Èç¹ûÁ¬½ÓÊÇ´ò¿ªµÄ,ÔòÎªtrue,ÆäËüÇé¿öÏÂÎªfalse.</param>
        </member>
        <member name="M:Xiuse.DbUtility.SqlHelper.ExecuteNonQuery(System.String,System.Data.CommandType,System.String)">
            <summary>
            Ö´ÐÐÖ¸¶¨Á¬½Ó×Ö·û´®,ÀàÐÍµÄSqlCommand.
            </summary>
            <remarks>
            Ê¾Àý:  
             int result = ExecuteNonQuery(connString, CommandType.StoredProcedure, "PublishOrders");
            </remarks>
            <param name="connectionString">Ò»¸öÓÐÐ§µÄÊý¾Ý¿âÁ¬½Ó×Ö·û´®</param>
            <param name="commandType">ÃüÁîÀàÐÍ (´æ´¢¹ý³Ì,ÃüÁîÎÄ±¾, ÆäËü.)</param>
            <param name="commandText">´æ´¢¹ý³ÌÃû³Æ»òSQLÓï¾ä</param>
            <returns>·µ»ØÃüÁîÓ°ÏìµÄÐÐÊý</returns>
        </member>
        <member name="M:Xiuse.DbUtility.SqlHelper.ExecuteNonQuery(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Ö´ÐÐÖ¸¶¨Á¬½Ó×Ö·û´®,ÀàÐÍµÄSqlCommand.Èç¹ûÃ»ÓÐÌá¹©²ÎÊý,²»·µ»Ø½á¹û.
            </summary>
            <remarks>
            Ê¾Àý:  
             int result = ExecuteNonQuery(connString, CommandType.StoredProcedure, "PublishOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">Ò»¸öÓÐÐ§µÄÊý¾Ý¿âÁ¬½Ó×Ö·û´®</param>
            <param name="commandType">ÃüÁîÀàÐÍ (´æ´¢¹ý³Ì,ÃüÁîÎÄ±¾, ÆäËü.)</param>
            <param name="commandText">´æ´¢¹ý³ÌÃû³Æ»òSQLÓï¾ä</param>
            <param name="commandParameters">SqlParameter²ÎÊýÊý×é</param>
            <returns>·µ»ØÃüÁîÓ°ÏìµÄÐÐÊý</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Xiuse.DbUtility.SqlHelper.ExecuteNonQuery(System.String,System.String,System.Object[])" -->
        <member name="M:Xiuse.DbUtility.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Ö´ÐÐÖ¸¶¨Êý¾Ý¿âÁ¬½Ó¶ÔÏóµÄÃüÁî 
            </summary>
            <remarks>
            Ê¾Àý:  
             int result = ExecuteNonQuery(conn, CommandType.StoredProcedure, "PublishOrders");
            </remarks>
            <param name="connection">Ò»¸öÓÐÐ§µÄÊý¾Ý¿âÁ¬½Ó¶ÔÏó</param>
            <param name="commandType">ÃüÁîÀàÐÍ(´æ´¢¹ý³Ì,ÃüÁîÎÄ±¾»òÆäËü.)</param>
            <param name="commandText">´æ´¢¹ý³ÌÃû³Æ»òT-SQLÓï¾ä</param>
            <returns>·µ»ØÓ°ÏìµÄÐÐÊý</returns>
        </member>
        <member name="M:Xiuse.DbUtility.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Ö´ÐÐÖ¸¶¨Êý¾Ý¿âÁ¬½Ó¶ÔÏóµÄÃüÁî
            </summary>
            <remarks>
            Ê¾Àý:  
             int result = ExecuteNonQuery(conn, CommandType.StoredProcedure, "PublishOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">Ò»¸öÓÐÐ§µÄÊý¾Ý¿âÁ¬½Ó¶ÔÏó</param>
            <param name="commandType">ÃüÁîÀàÐÍ(´æ´¢¹ý³Ì,ÃüÁîÎÄ±¾»òÆäËü.)</param>
            <param name="commandText">T´æ´¢¹ý³ÌÃû³Æ»òT-SQLÓï¾ä</param>
            <param name="commandParameters">SqlParamter²ÎÊýÊý×é</param>
            <returns>·µ»ØÓ°ÏìµÄÐÐÊý</returns>
        </member>
        <member name="M:Xiuse.DbUtility.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary>
            Ö´ÐÐÖ¸¶¨Êý¾Ý¿âÁ¬½Ó¶ÔÏóµÄÃüÁî,½«¶ÔÏóÊý×éµÄÖµ¸³¸ø´æ´¢¹ý³Ì²ÎÊý.
            </summary>
            <remarks>
            ´Ë·½·¨²»Ìá¹©·ÃÎÊ´æ´¢¹ý³ÌÊä³ö²ÎÊýºÍ·µ»ØÖµ
            Ê¾Àý:  
             int result = ExecuteNonQuery(conn, "PublishOrders", 24, 36);
            </remarks>
            <param name="connection">Ò»¸öÓÐÐ§µÄÊý¾Ý¿âÁ¬½Ó¶ÔÏó</param>
            <param name="spName">´æ´¢¹ý³ÌÃû</param>
            <param name="parameterValues">·ÖÅä¸ø´æ´¢¹ý³ÌÊäÈë²ÎÊýµÄ¶ÔÏóÊý×é</param>
            <returns>·µ»ØÓ°ÏìµÄÐÐÊý</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Xiuse.DbUtility.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)" -->
        <member name="M:Xiuse.DbUtility.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Ö´ÐÐ´øÊÂÎñµÄSqlCommand(Ö¸¶¨²ÎÊý).
            </summary>
            <remarks>
            Ê¾Àý:  
             int result = ExecuteNonQuery(trans, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">Ò»¸öÓÐÐ§µÄÊý¾Ý¿âÁ¬½Ó¶ÔÏó</param>
            <param name="commandType">ÃüÁîÀàÐÍ(´æ´¢¹ý³Ì,ÃüÁîÎÄ±¾»òÆäËü.)</param>
            <param name="commandText">´æ´¢¹ý³ÌÃû³Æ»òT-SQLÓï¾ä</param>
            <param name="commandParameters">SqlParamter²ÎÊýÊý×é</param>
            <returns>·µ»ØÓ°ÏìµÄÐÐÊý</returns>
        </member>
        <member name="M:Xiuse.DbUtility.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
            <summary>
            Ö´ÐÐ´øÊÂÎñµÄSqlCommand(Ö¸¶¨²ÎÊýÖµ).
            </summary>
            <remarks>
            ´Ë·½·¨²»Ìá¹©·ÃÎÊ´æ´¢¹ý³ÌÊä³ö²ÎÊýºÍ·µ»ØÖµ
            Ê¾Àý:  
             int result = ExecuteNonQuery(conn, trans, "PublishOrders", 24, 36);
            </remarks>
            <param name="transaction">Ò»¸öÓÐÐ§µÄÊý¾Ý¿âÁ¬½Ó¶ÔÏó</param>
            <param name="spName">´æ´¢¹ý³ÌÃû</param>
            <param name="parameterValues">·ÖÅä¸ø´æ´¢¹ý³ÌÊäÈë²ÎÊýµÄ¶ÔÏóÊý×é</param>
            <returns>·µ»ØÊÜÓ°ÏìµÄÐÐÊý</returns>
        </member>
        <member name="M:Xiuse.DbUtility.SqlHelper.ExecuteDataset(System.String,System.Data.CommandType,System.String)">
            <summary>
            Ö´ÐÐÖ¸¶¨Êý¾Ý¿âÁ¬½Ó×Ö·û´®µÄÃüÁî,·µ»ØDataSet.
            </summary>
            <remarks>
            Ê¾Àý:  
             DataSet ds = ExecuteDataset(connString, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connectionString">Ò»¸öÓÐÐ§µÄÊý¾Ý¿âÁ¬½Ó×Ö·û´®</param>
            <param name="commandType">ÃüÁîÀàÐÍ (´æ´¢¹ý³Ì,ÃüÁîÎÄ±¾»òÆäËü)</param>
            <param name="commandText">´æ´¢¹ý³ÌÃû³Æ»òT-SQLÓï¾ä</param>
            <returns>·µ»ØÒ»¸ö°üº¬½á¹û¼¯µÄDataSet</returns>
        </member>
        <member name="M:Xiuse.DbUtility.SqlHelper.ExecuteDataset(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Ö´ÐÐÖ¸¶¨Êý¾Ý¿âÁ¬½Ó×Ö·û´®µÄÃüÁî,·µ»ØDataSet.
            </summary>
            <remarks>
            Ê¾Àý: 
             DataSet ds = ExecuteDataset(connString, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">Ò»¸öÓÐÐ§µÄÊý¾Ý¿âÁ¬½Ó×Ö·û´®</param>
            <param name="commandType">ÃüÁîÀàÐÍ (´æ´¢¹ý³Ì,ÃüÁîÎÄ±¾»òÆäËü)</param>
            <param name="commandText">´æ´¢¹ý³ÌÃû³Æ»òT-SQLÓï¾ä</param>
            <param name="commandParameters">SqlParamters²ÎÊýÊý×é</param>
            <returns>·µ»ØÒ»¸ö°üº¬½á¹û¼¯µÄDataSet</returns>
        </member>
        <member name="M:Xiuse.DbUtility.SqlHelper.ExecuteDataset(System.String,System.String,System.Object[])">
            <summary>
            Ö´ÐÐÖ¸¶¨Êý¾Ý¿âÁ¬½Ó×Ö·û´®µÄÃüÁî,Ö±½ÓÌá¹©²ÎÊýÖµ,·µ»ØDataSet.
            </summary>
            <remarks>
            ´Ë·½·¨²»Ìá¹©·ÃÎÊ´æ´¢¹ý³ÌÊä³ö²ÎÊýºÍ·µ»ØÖµ.
            Ê¾Àý: 
             DataSet ds = ExecuteDataset(connString, "GetOrders", 24, 36);
            </remarks>
            <param name="connectionString">Ò»¸öÓÐÐ§µÄÊý¾Ý¿âÁ¬½Ó×Ö·û´®</param>
            <param name="spName">´æ´¢¹ý³ÌÃû</param>
            <param name="parameterValues">·ÖÅä¸ø´æ´¢¹ý³ÌÊäÈë²ÎÊýµÄ¶ÔÏóÊý×é</param>
            <returns>·µ»ØÒ»¸ö°üº¬½á¹û¼¯µÄDataSet</returns>
        </member>
        <member name="M:Xiuse.DbUtility.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Ö´ÐÐÖ¸¶¨Êý¾Ý¿âÁ¬½Ó¶ÔÏóµÄÃüÁî,·µ»ØDataSet.
            </summary>
            <remarks>
            Ê¾Àý:  
             DataSet ds = ExecuteDataset(conn, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connection">Ò»¸öÓÐÐ§µÄÊý¾Ý¿âÁ¬½Ó¶ÔÏó</param>
            <param name="commandType">ÃüÁîÀàÐÍ (´æ´¢¹ý³Ì,ÃüÁîÎÄ±¾»òÆäËü)</param>
            <param name="commandText">´æ´¢¹ý³ÌÃû»òT-SQLÓï¾ä</param>
            <returns>·µ»ØÒ»¸ö°üº¬½á¹û¼¯µÄDataSet</returns>
        </member>
        <member name="M:Xiuse.DbUtility.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Ö´ÐÐÖ¸¶¨Êý¾Ý¿âÁ¬½Ó¶ÔÏóµÄÃüÁî,Ö¸¶¨´æ´¢¹ý³Ì²ÎÊý,·µ»ØDataSet.
            </summary>
            <remarks>
            Ê¾Àý:  
             DataSet ds = ExecuteDataset(conn, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">Ò»¸öÓÐÐ§µÄÊý¾Ý¿âÁ¬½Ó¶ÔÏó</param>
            <param name="commandType">ÃüÁîÀàÐÍ (´æ´¢¹ý³Ì,ÃüÁîÎÄ±¾»òÆäËü)</param>
            <param name="commandText">´æ´¢¹ý³ÌÃû»òT-SQLÓï¾ä</param>
            <param name="commandParameters">SqlParamter²ÎÊýÊý×é</param>
            <returns>·µ»ØÒ»¸ö°üº¬½á¹û¼¯µÄDataSet</returns>
        </member>
        <member name="M:Xiuse.DbUtility.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary>
            Ö´ÐÐÖ¸¶¨Êý¾Ý¿âÁ¬½Ó¶ÔÏóµÄÃüÁî,Ö¸¶¨²ÎÊýÖµ,·µ»ØDataSet.
            </summary>
            <remarks>
            ´Ë·½·¨²»Ìá¹©·ÃÎÊ´æ´¢¹ý³ÌÊäÈë²ÎÊýºÍ·µ»ØÖµ.
            Ê¾Àý.:  
             DataSet ds = ExecuteDataset(conn, "GetOrders", 24, 36);
            </remarks>
            <param name="connection">Ò»¸öÓÐÐ§µÄÊý¾Ý¿âÁ¬½Ó¶ÔÏó</param>
            <param name="spName">´æ´¢¹ý³ÌÃû</param>
            <param name="parameterValues">·ÖÅä¸ø´æ´¢¹ý³ÌÊäÈë²ÎÊýµÄ¶ÔÏóÊý×é</param>
            <returns>·µ»ØÒ»¸ö°üº¬½á¹û¼¯µÄDataSet</returns>
        </member>
        <member name="M:Xiuse.DbUtility.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Ö´ÐÐÖ¸¶¨ÊÂÎñµÄÃüÁî,·µ»ØDataSet.
            </summary>
            <remarks>
            Ê¾Àý:  
             DataSet ds = ExecuteDataset(trans, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="transaction">ÊÂÎñ</param>
            <param name="commandType">ÃüÁîÀàÐÍ (´æ´¢¹ý³Ì,ÃüÁîÎÄ±¾»òÆäËü)</param>
            <param name="commandText">´æ´¢¹ý³ÌÃû»òT-SQLÓï¾ä</param>
            <returns>·µ»ØÒ»¸ö°üº¬½á¹û¼¯µÄDataSet</returns>
        </member>
        <member name="M:Xiuse.DbUtility.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Ö´ÐÐÖ¸¶¨ÊÂÎñµÄÃüÁî,Ö¸¶¨²ÎÊý,·µ»ØDataSet.
            </summary>
            <remarks>
            Ê¾Àý:  
             DataSet ds = ExecuteDataset(trans, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">ÊÂÎñ</param>
            <param name="commandType">ÃüÁîÀàÐÍ (´æ´¢¹ý³Ì,ÃüÁîÎÄ±¾»òÆäËü)</param>
            <param name="commandText">´æ´¢¹ý³ÌÃû»òT-SQLÓï¾ä</param>
            <param name="commandParameters">SqlParamter²ÎÊýÊý×é</param>
            <returns>·µ»ØÒ»¸ö°üº¬½á¹û¼¯µÄDataSet</returns>
        </member>
        <member name="M:Xiuse.DbUtility.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
            <summary>
            Ö´ÐÐÖ¸¶¨ÊÂÎñµÄÃüÁî,Ö¸¶¨²ÎÊýÖµ,·µ»ØDataSet.
            </summary>
            <remarks>
            ´Ë·½·¨²»Ìá¹©·ÃÎÊ´æ´¢¹ý³ÌÊäÈë²ÎÊýºÍ·µ»ØÖµ.
            Ê¾Àý.:  
             DataSet ds = ExecuteDataset(trans, "GetOrders", 24, 36);
            </remarks>
            <param name="transaction">ÊÂÎñ</param>
            <param name="spName">´æ´¢¹ý³ÌÃû</param>
            <param name="parameterValues">·ÖÅä¸ø´æ´¢¹ý³ÌÊäÈë²ÎÊýµÄ¶ÔÏóÊý×é</param>
            <returns>·µ»ØÒ»¸ö°üº¬½á¹û¼¯µÄDataSet</returns>
        </member>
        <member name="M:Xiuse.DbUtility.SqlHelper.ExecuteDataset(System.String,System.Data.CommandType,System.Int32,System.Int32,System.Int32@,System.String)">
            <summary>
            Ö´ÐÐÖ¸¶¨Êý¾Ý¿âÁ¬½Ó¶ÔÏóµÄÃüÁî,·µ»ØDataSet.
            </summary>
            <param name="connectionString">Ò»¸öÓÐÐ§µÄÊý¾Ý¿âÁ¬½Ó×Ö·û´®</param>
            <param name="commandType">Ö´ÐÐÀàÐÍ[±íÃû,´æ´¢¹ý³Ì,SQLÓï¾ä]</param>
            <param name="startRecord">¿ªÊ¼¼ÇÂ¼Êý</param>
            <param name="maxRecord">×î´ó¼ÇÂ¼Êý</param>
            <param name="recordCount">¼ÇÂ¼×ÜÊý</param>
            <param name="commandText">²éÑ¯Óï¾ä</param>
            <returns></returns>
        </member>
        <member name="M:Xiuse.DbUtility.SqlHelper.ExecuteDataset(System.String,System.Data.CommandType,System.Int32,System.Int32,System.Int32@,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Ö´ÐÐÖ¸¶¨Êý¾Ý¿âÁ¬½Ó¶ÔÏóµÄÃüÁî,·µ»ØDataSet.
            </summary>
            <param name="connectionString">Ò»¸öÓÐÐ§µÄÊý¾Ý¿âÁ¬½Ó×Ö·û´®</param>
            <param name="commandType">Ö´ÐÐÀàÐÍ[±íÃû,´æ´¢¹ý³Ì,SQLÓï¾ä]</param>
            <param name="startRecord">¿ªÊ¼¼ÇÂ¼Êý</param>
            <param name="maxRecord">×î´ó¼ÇÂ¼Êý</param>
            <param name="recordCount">¼ÇÂ¼×ÜÊý</param>
            <param name="commandText">²éÑ¯Óï¾ä</param>
            <param name="parameters">²ÎÊý¼¯ºÏ</param>
            <returns></returns>
        </member>
        <member name="T:Xiuse.DbUtility.SqlHelper.SqlConnectionOwnership">
            <summary>
            Ã¶¾Ù,±êÊ¶Êý¾Ý¿âÁ¬½ÓÊÇÓÉSqlHelperÌá¹©»¹ÊÇÓÉµ÷ÓÃÕßÌá¹©
            </summary>
        </member>
        <member name="F:Xiuse.DbUtility.SqlHelper.SqlConnectionOwnership.Internal">
            <summary>ÓÉSqlHelperÌá¹©Á¬½Ó</summary>
        </member>
        <member name="F:Xiuse.DbUtility.SqlHelper.SqlConnectionOwnership.External">
            <summary>ÓÉµ÷ÓÃÕßÌá¹©Á¬½Ó</summary>
        </member>
        <member name="M:Xiuse.DbUtility.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[],Xiuse.DbUtility.SqlHelper.SqlConnectionOwnership)">
            <summary>
            Ö´ÐÐÖ¸¶¨Êý¾Ý¿âÁ¬½Ó¶ÔÏóµÄÊý¾ÝÔÄ¶ÁÆ÷.
            </summary>
            <remarks>
            Èç¹ûÊÇSqlHelper´ò¿ªÁ¬½Ó,µ±Á¬½Ó¹Ø±ÕDataReaderÒ²½«¹Ø±Õ.
            Èç¹ûÊÇµ÷ÓÃ¶¼´ò¿ªÁ¬½Ó,DataReaderÓÉµ÷ÓÃ¶¼¹ÜÀí.
            </remarks>
            <param name="connection">Ò»¸öÓÐÐ§µÄÊý¾Ý¿âÁ¬½Ó¶ÔÏó</param>
            <param name="transaction">Ò»¸öÓÐÐ§µÄÊÂÎñ,»òÕßÎª 'null'</param>
            <param name="commandType">ÃüÁîÀàÐÍ (´æ´¢¹ý³Ì,ÃüÁîÎÄ±¾»òÆäËü)</param>
            <param name="commandText">´æ´¢¹ý³ÌÃû»òT-SQLÓï¾ä</param>
            <param name="commandParameters">SqlParameters²ÎÊýÊý×é,Èç¹ûÃ»ÓÐ²ÎÊýÔòÎª'null'</param>
            <param name="connectionOwnership">±êÊ¶Êý¾Ý¿âÁ¬½Ó¶ÔÏóÊÇÓÉµ÷ÓÃÕßÌá¹©»¹ÊÇÓÉSqlHelperÌá¹©</param>
            <returns>·µ»Ø°üº¬½á¹û¼¯µÄSqlDataReader</returns>
        </member>
        <member name="M:Xiuse.DbUtility.SqlHelper.ExecuteReader(System.String,System.Data.CommandType,System.String)">
            <summary>
            Ö´ÐÐÖ¸¶¨Êý¾Ý¿âÁ¬½Ó×Ö·û´®µÄÊý¾ÝÔÄ¶ÁÆ÷.
            </summary>
            <remarks>
            Ê¾Àý:  
             SqlDataReader dr = ExecuteReader(connString, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connectionString">Ò»¸öÓÐÐ§µÄÊý¾Ý¿âÁ¬½Ó×Ö·û´®</param>
            <param name="commandType">ÃüÁîÀàÐÍ (´æ´¢¹ý³Ì,ÃüÁîÎÄ±¾»òÆäËü)</param>
            <param name="commandText">´æ´¢¹ý³ÌÃû»òT-SQLÓï¾ä</param>
            <returns>·µ»Ø°üº¬½á¹û¼¯µÄSqlDataReader</returns>
        </member>
        <member name="M:Xiuse.DbUtility.SqlHelper.ExecuteReader(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Ö´ÐÐÖ¸¶¨Êý¾Ý¿âÁ¬½Ó×Ö·û´®µÄÊý¾ÝÔÄ¶ÁÆ÷,Ö¸¶¨²ÎÊý.
            </summary>
            <remarks>
            Ê¾Àý:  
             SqlDataReader dr = ExecuteReader(connString, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">Ò»¸öÓÐÐ§µÄÊý¾Ý¿âÁ¬½Ó×Ö·û´®</param>
            <param name="commandType">ÃüÁîÀàÐÍ (´æ´¢¹ý³Ì,ÃüÁîÎÄ±¾»òÆäËü)</param>
            <param name="commandText">´æ´¢¹ý³ÌÃû»òT-SQLÓï¾ä</param>
            <param name="commandParameters">SqlParamter²ÎÊýÊý×é(new SqlParameter("@prodid", 24))</param>
            <returns>·µ»Ø°üº¬½á¹û¼¯µÄSqlDataReader</returns>
        </member>
        <member name="M:Xiuse.DbUtility.SqlHelper.ExecuteReader(System.String,System.String,System.Object[])">
            <summary>
            Ö´ÐÐÖ¸¶¨Êý¾Ý¿âÁ¬½Ó×Ö·û´®µÄÊý¾ÝÔÄ¶ÁÆ÷,Ö¸¶¨²ÎÊýÖµ.
            </summary>
            <remarks>
            ´Ë·½·¨²»Ìá¹©·ÃÎÊ´æ´¢¹ý³ÌÊä³ö²ÎÊýºÍ·µ»ØÖµ²ÎÊý.
            Ê¾Àý:  
             SqlDataReader dr = ExecuteReader(connString, "GetOrders", 24, 36);
            </remarks>
            <param name="connectionString">Ò»¸öÓÐÐ§µÄÊý¾Ý¿âÁ¬½Ó×Ö·û´®</param>
            <param name="spName">´æ´¢¹ý³ÌÃû</param>
            <param name="parameterValues">·ÖÅä¸ø´æ´¢¹ý³ÌÊäÈë²ÎÊýµÄ¶ÔÏóÊý×é</param>
            <returns>·µ»Ø°üº¬½á¹û¼¯µÄSqlDataReader</returns>
        </member>
        <member name="M:Xiuse.DbUtility.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Ö´ÐÐÖ¸¶¨Êý¾Ý¿âÁ¬½Ó¶ÔÏóµÄÊý¾ÝÔÄ¶ÁÆ÷.
            </summary>
            <remarks>
            Ê¾Àý:  
             SqlDataReader dr = ExecuteReader(conn, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connection">Ò»¸öÓÐÐ§µÄÊý¾Ý¿âÁ¬½Ó¶ÔÏó</param>
            <param name="commandType">ÃüÁîÀàÐÍ (´æ´¢¹ý³Ì,ÃüÁîÎÄ±¾»òÆäËü)</param>
            <param name="commandText">´æ´¢¹ý³ÌÃû»òT-SQLÓï¾ä</param>
            <returns>·µ»Ø°üº¬½á¹û¼¯µÄSqlDataReader</returns>
        </member>
        <member name="M:Xiuse.DbUtility.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            [µ÷ÓÃÕß·½Ê½]Ö´ÐÐÖ¸¶¨Êý¾Ý¿âÁ¬½Ó¶ÔÏóµÄÊý¾ÝÔÄ¶ÁÆ÷,Ö¸¶¨²ÎÊý.
            </summary>
            <remarks>
            Ê¾Àý:  
             SqlDataReader dr = ExecuteReader(conn, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">Ò»¸öÓÐÐ§µÄÊý¾Ý¿âÁ¬½Ó¶ÔÏó</param>
            <param name="commandType">ÃüÁîÀàÐÍ (´æ´¢¹ý³Ì,ÃüÁîÎÄ±¾»òÆäËü)</param>
            <param name="commandText">ÃüÁîÀàÐÍ (´æ´¢¹ý³Ì,ÃüÁîÎÄ±¾»òÆäËü)</param>
            <param name="commandParameters">SqlParamter²ÎÊýÊý×é</param>
            <returns>·µ»Ø°üº¬½á¹û¼¯µÄSqlDataReader</returns>
        </member>
        <member name="M:Xiuse.DbUtility.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary>
            [µ÷ÓÃÕß·½Ê½]Ö´ÐÐÖ¸¶¨Êý¾Ý¿âÁ¬½Ó¶ÔÏóµÄÊý¾ÝÔÄ¶ÁÆ÷,Ö¸¶¨²ÎÊýÖµ.
            </summary>
            <remarks>
            ´Ë·½·¨²»Ìá¹©·ÃÎÊ´æ´¢¹ý³ÌÊä³ö²ÎÊýºÍ·µ»ØÖµ²ÎÊý.
            Ê¾Àý:  
             SqlDataReader dr = ExecuteReader(conn, "GetOrders", 24, 36);
            </remarks>
            <param name="connection">Ò»¸öÓÐÐ§µÄÊý¾Ý¿âÁ¬½Ó¶ÔÏó</param>
            <param name="spName">T´æ´¢¹ý³ÌÃû</param>
            <param name="parameterValues">·ÖÅä¸ø´æ´¢¹ý³ÌÊäÈë²ÎÊýµÄ¶ÔÏóÊý×é</param>
            <returns>·µ»Ø°üº¬½á¹û¼¯µÄSqlDataReader</returns>
        </member>
        <member name="M:Xiuse.DbUtility.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            [µ÷ÓÃÕß·½Ê½]Ö´ÐÐÖ¸¶¨Êý¾Ý¿âÊÂÎñµÄÊý¾ÝÔÄ¶ÁÆ÷,Ö¸¶¨²ÎÊýÖµ.
            </summary>
            <remarks>
            Ê¾Àý:  
             SqlDataReader dr = ExecuteReader(trans, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="transaction">Ò»¸öÓÐÐ§µÄÁ¬½ÓÊÂÎñ</param>
            <param name="commandType">ÃüÁîÀàÐÍ (´æ´¢¹ý³Ì,ÃüÁîÎÄ±¾»òÆäËü)</param>
            <param name="commandText">´æ´¢¹ý³ÌÃû³Æ»òT-SQLÓï¾ä</param>
            <returns>·µ»Ø°üº¬½á¹û¼¯µÄSqlDataReader</returns>
        </member>
        <member name="M:Xiuse.DbUtility.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            [µ÷ÓÃÕß·½Ê½]Ö´ÐÐÖ¸¶¨Êý¾Ý¿âÊÂÎñµÄÊý¾ÝÔÄ¶ÁÆ÷,Ö¸¶¨²ÎÊý.
            </summary>
            <remarks>
            Ê¾Àý:  
              SqlDataReader dr = ExecuteReader(trans, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">Ò»¸öÓÐÐ§µÄÁ¬½ÓÊÂÎñ</param>
            <param name="commandType">ÃüÁîÀàÐÍ (´æ´¢¹ý³Ì,ÃüÁîÎÄ±¾»òÆäËü)</param>
            <param name="commandText">´æ´¢¹ý³ÌÃû³Æ»òT-SQLÓï¾ä</param>
            <param name="commandParameters">·ÖÅä¸øÃüÁîµÄSqlParamter²ÎÊýÊý×é</param>
            <returns>·µ»Ø°üº¬½á¹û¼¯µÄSqlDataReader</returns>
        </member>
        <member name="M:Xiuse.DbUtility.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
            <summary>
            [µ÷ÓÃÕß·½Ê½]Ö´ÐÐÖ¸¶¨Êý¾Ý¿âÊÂÎñµÄÊý¾ÝÔÄ¶ÁÆ÷,Ö¸¶¨²ÎÊýÖµ.
            </summary>
            <remarks>
            ´Ë·½·¨²»Ìá¹©·ÃÎÊ´æ´¢¹ý³ÌÊä³ö²ÎÊýºÍ·µ»ØÖµ²ÎÊý.
            
            Ê¾Àý:  
             SqlDataReader dr = ExecuteReader(trans, "GetOrders", 24, 36);
            </remarks>
            <param name="transaction">Ò»¸öÓÐÐ§µÄÁ¬½ÓÊÂÎñ</param>
            <param name="spName">´æ´¢¹ý³ÌÃû³Æ</param>
            <param name="parameterValues">·ÖÅä¸ø´æ´¢¹ý³ÌÊäÈë²ÎÊýµÄ¶ÔÏóÊý×é</param>
            <returns>·µ»Ø°üº¬½á¹û¼¯µÄSqlDataReader</returns>
        </member>
        <member name="M:Xiuse.DbUtility.SqlHelper.ExecuteScalar(System.String,System.Data.CommandType,System.String)">
            <summary>
            Ö´ÐÐÖ¸¶¨Êý¾Ý¿âÁ¬½Ó×Ö·û´®µÄÃüÁî,·µ»Ø½á¹û¼¯ÖÐµÄµÚÒ»ÐÐµÚÒ»ÁÐ.
            </summary>
            <remarks>
            Ê¾Àý:  
             int orderCount = (int)ExecuteScalar(connString, CommandType.StoredProcedure, "GetOrderCount");
            </remarks>
            <param name="connectionString">Ò»¸öÓÐÐ§µÄÊý¾Ý¿âÁ¬½Ó×Ö·û´®</param>
            <param name="commandType">ÃüÁîÀàÐÍ (´æ´¢¹ý³Ì,ÃüÁîÎÄ±¾»òÆäËü)</param>
            <param name="commandText">´æ´¢¹ý³ÌÃû³Æ»òT-SQLÓï¾ä</param>
            <returns>·µ»Ø½á¹û¼¯ÖÐµÄµÚÒ»ÐÐµÚÒ»ÁÐ</returns>
        </member>
        <member name="M:Xiuse.DbUtility.SqlHelper.ExecuteScalar(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Ö´ÐÐÖ¸¶¨Êý¾Ý¿âÁ¬½Ó×Ö·û´®µÄÃüÁî,Ö¸¶¨²ÎÊý,·µ»Ø½á¹û¼¯ÖÐµÄµÚÒ»ÐÐµÚÒ»ÁÐ.
            </summary>
            <remarks>
            Ê¾Àý:  
             int orderCount = (int)ExecuteScalar(connString, CommandType.StoredProcedure, "GetOrderCount", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">Ò»¸öÓÐÐ§µÄÊý¾Ý¿âÁ¬½Ó×Ö·û´®</param>
            <param name="commandType">ÃüÁîÀàÐÍ (´æ´¢¹ý³Ì,ÃüÁîÎÄ±¾»òÆäËü)</param>
            <param name="commandText">´æ´¢¹ý³ÌÃû³Æ»òT-SQLÓï¾ä</param>
            <param name="commandParameters">·ÖÅä¸øÃüÁîµÄSqlParamter²ÎÊýÊý×é</param>
            <returns>·µ»Ø½á¹û¼¯ÖÐµÄµÚÒ»ÐÐµÚÒ»ÁÐ</returns>
        </member>
        <member name="M:Xiuse.DbUtility.SqlHelper.ExecuteScalar(System.String,System.String,System.Object[])">
            <summary>
            Ö´ÐÐÖ¸¶¨Êý¾Ý¿âÁ¬½Ó×Ö·û´®µÄÃüÁî,Ö¸¶¨²ÎÊýÖµ,·µ»Ø½á¹û¼¯ÖÐµÄµÚÒ»ÐÐµÚÒ»ÁÐ.
            </summary>
            <remarks>
            ´Ë·½·¨²»Ìá¹©·ÃÎÊ´æ´¢¹ý³ÌÊä³ö²ÎÊýºÍ·µ»ØÖµ²ÎÊý.
            
            Ê¾Àý:  
             int orderCount = (int)ExecuteScalar(connString, "GetOrderCount", 24, 36);
            </remarks>
            <param name="connectionString">Ò»¸öÓÐÐ§µÄÊý¾Ý¿âÁ¬½Ó×Ö·û´®</param>
            <param name="spName">´æ´¢¹ý³ÌÃû³Æ</param>
            <param name="parameterValues">·ÖÅä¸ø´æ´¢¹ý³ÌÊäÈë²ÎÊýµÄ¶ÔÏóÊý×é</param>
            <returns>·µ»Ø½á¹û¼¯ÖÐµÄµÚÒ»ÐÐµÚÒ»ÁÐ</returns>
        </member>
        <member name="M:Xiuse.DbUtility.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Ö´ÐÐÖ¸¶¨Êý¾Ý¿âÁ¬½Ó¶ÔÏóµÄÃüÁî,·µ»Ø½á¹û¼¯ÖÐµÄµÚÒ»ÐÐµÚÒ»ÁÐ.
            </summary>
            <remarks>
            Ê¾Àý:  
             int orderCount = (int)ExecuteScalar(conn, CommandType.StoredProcedure, "GetOrderCount");
            </remarks>
            <param name="connection">Ò»¸öÓÐÐ§µÄÊý¾Ý¿âÁ¬½Ó¶ÔÏó</param>
            <param name="commandType">ÃüÁîÀàÐÍ (´æ´¢¹ý³Ì,ÃüÁîÎÄ±¾»òÆäËü)</param>
            <param name="commandText">´æ´¢¹ý³ÌÃû³Æ»òT-SQLÓï¾ä</param>
            <returns>·µ»Ø½á¹û¼¯ÖÐµÄµÚÒ»ÐÐµÚÒ»ÁÐ</returns>
        </member>
        <member name="M:Xiuse.DbUtility.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Ö´ÐÐÖ¸¶¨Êý¾Ý¿âÁ¬½Ó¶ÔÏóµÄÃüÁî,Ö¸¶¨²ÎÊý,·µ»Ø½á¹û¼¯ÖÐµÄµÚÒ»ÐÐµÚÒ»ÁÐ.
            </summary>
            <remarks>
            Ê¾Àý:  
             int orderCount = (int)ExecuteScalar(conn, CommandType.StoredProcedure, "GetOrderCount", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">Ò»¸öÓÐÐ§µÄÊý¾Ý¿âÁ¬½Ó¶ÔÏó</param>
            <param name="commandType">ÃüÁîÀàÐÍ (´æ´¢¹ý³Ì,ÃüÁîÎÄ±¾»òÆäËü)</param>
            <param name="commandText">´æ´¢¹ý³ÌÃû³Æ»òT-SQLÓï¾ä</param>
            <param name="commandParameters">·ÖÅä¸øÃüÁîµÄSqlParamter²ÎÊýÊý×é</param>
            <returns>·µ»Ø½á¹û¼¯ÖÐµÄµÚÒ»ÐÐµÚÒ»ÁÐ</returns>
        </member>
        <member name="M:Xiuse.DbUtility.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary>
            Ö´ÐÐÖ¸¶¨Êý¾Ý¿âÁ¬½Ó¶ÔÏóµÄÃüÁî,Ö¸¶¨²ÎÊýÖµ,·µ»Ø½á¹û¼¯ÖÐµÄµÚÒ»ÐÐµÚÒ»ÁÐ.
            </summary>
            <remarks>
            ´Ë·½·¨²»Ìá¹©·ÃÎÊ´æ´¢¹ý³ÌÊä³ö²ÎÊýºÍ·µ»ØÖµ²ÎÊý.
            
            Ê¾Àý:  
             int orderCount = (int)ExecuteScalar(conn, "GetOrderCount", 24, 36);
            </remarks>
            <param name="connection">Ò»¸öÓÐÐ§µÄÊý¾Ý¿âÁ¬½Ó¶ÔÏó</param>
            <param name="spName">´æ´¢¹ý³ÌÃû³Æ</param>
            <param name="parameterValues">·ÖÅä¸ø´æ´¢¹ý³ÌÊäÈë²ÎÊýµÄ¶ÔÏóÊý×é</param>
            <returns>·µ»Ø½á¹û¼¯ÖÐµÄµÚÒ»ÐÐµÚÒ»ÁÐ</returns>
        </member>
        <member name="M:Xiuse.DbUtility.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Ö´ÐÐÖ¸¶¨Êý¾Ý¿âÊÂÎñµÄÃüÁî,·µ»Ø½á¹û¼¯ÖÐµÄµÚÒ»ÐÐµÚÒ»ÁÐ.
            </summary>
            <remarks>
            Ê¾Àý:  
             int orderCount = (int)ExecuteScalar(trans, CommandType.StoredProcedure, "GetOrderCount");
            </remarks>
            <param name="transaction">Ò»¸öÓÐÐ§µÄÁ¬½ÓÊÂÎñ</param>
            <param name="commandType">ÃüÁîÀàÐÍ (´æ´¢¹ý³Ì,ÃüÁîÎÄ±¾»òÆäËü)</param>
            <param name="commandText">´æ´¢¹ý³ÌÃû³Æ»òT-SQLÓï¾ä</param>
            <returns>·µ»Ø½á¹û¼¯ÖÐµÄµÚÒ»ÐÐµÚÒ»ÁÐ</returns>
        </member>
        <member name="M:Xiuse.DbUtility.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Ö´ÐÐÖ¸¶¨Êý¾Ý¿âÊÂÎñµÄÃüÁî,Ö¸¶¨²ÎÊý,·µ»Ø½á¹û¼¯ÖÐµÄµÚÒ»ÐÐµÚÒ»ÁÐ.
            </summary>
            <remarks>
            Ê¾Àý:  
             int orderCount = (int)ExecuteScalar(trans, CommandType.StoredProcedure, "GetOrderCount", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">Ò»¸öÓÐÐ§µÄÁ¬½ÓÊÂÎñ</param>
            <param name="commandType">ÃüÁîÀàÐÍ (´æ´¢¹ý³Ì,ÃüÁîÎÄ±¾»òÆäËü)</param>
            <param name="commandText">´æ´¢¹ý³ÌÃû³Æ»òT-SQLÓï¾ä</param>
            <param name="commandParameters">·ÖÅä¸øÃüÁîµÄSqlParamter²ÎÊýÊý×é</param>
            <returns>·µ»Ø½á¹û¼¯ÖÐµÄµÚÒ»ÐÐµÚÒ»ÁÐ</returns>
        </member>
        <member name="M:Xiuse.DbUtility.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
            <summary>
            Ö´ÐÐÖ¸¶¨Êý¾Ý¿âÊÂÎñµÄÃüÁî,Ö¸¶¨²ÎÊýÖµ,·µ»Ø½á¹û¼¯ÖÐµÄµÚÒ»ÐÐµÚÒ»ÁÐ.
            </summary>
            <remarks>
            ´Ë·½·¨²»Ìá¹©·ÃÎÊ´æ´¢¹ý³ÌÊä³ö²ÎÊýºÍ·µ»ØÖµ²ÎÊý.
            
            Ê¾Àý:  
             int orderCount = (int)ExecuteScalar(trans, "GetOrderCount", 24, 36);
            </remarks>
            <param name="transaction">Ò»¸öÓÐÐ§µÄÁ¬½ÓÊÂÎñ</param>
            <param name="spName">´æ´¢¹ý³ÌÃû³Æ</param>
            <param name="parameterValues">·ÖÅä¸ø´æ´¢¹ý³ÌÊäÈë²ÎÊýµÄ¶ÔÏóÊý×é</param>
            <returns>·µ»Ø½á¹û¼¯ÖÐµÄµÚÒ»ÐÐµÚÒ»ÁÐ</returns>
        </member>
        <member name="M:Xiuse.DbUtility.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Ö´ÐÐÖ¸¶¨Êý¾Ý¿âÁ¬½Ó¶ÔÏóµÄSqlCommandÃüÁî,²¢²úÉúÒ»¸öXmlReader¶ÔÏó×öÎª½á¹û¼¯·µ»Ø.
            </summary>
            <remarks>
            Ê¾Àý:  
             XmlReader r = ExecuteXmlReader(conn, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connection">Ò»¸öÓÐÐ§µÄÊý¾Ý¿âÁ¬½Ó¶ÔÏó</param>
            <param name="commandType">ÃüÁîÀàÐÍ (´æ´¢¹ý³Ì,ÃüÁîÎÄ±¾»òÆäËü)</param>
            <param name="commandText">´æ´¢¹ý³ÌÃû³Æ»òT-SQLÓï¾ä using "FOR XML AUTO"</param>
            <returns>·µ»ØXmlReader½á¹û¼¯¶ÔÏó.</returns>
        </member>
        <member name="M:Xiuse.DbUtility.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Ö´ÐÐÖ¸¶¨Êý¾Ý¿âÁ¬½Ó¶ÔÏóµÄSqlCommandÃüÁî,²¢²úÉúÒ»¸öXmlReader¶ÔÏó×öÎª½á¹û¼¯·µ»Ø,Ö¸¶¨²ÎÊý.
            </summary>
            <remarks>
            Ê¾Àý:  
             XmlReader r = ExecuteXmlReader(conn, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">Ò»¸öÓÐÐ§µÄÊý¾Ý¿âÁ¬½Ó¶ÔÏó</param>
            <param name="commandType">ÃüÁîÀàÐÍ (´æ´¢¹ý³Ì,ÃüÁîÎÄ±¾»òÆäËü)</param>
            <param name="commandText">´æ´¢¹ý³ÌÃû³Æ»òT-SQLÓï¾ä using "FOR XML AUTO"</param>
            <param name="commandParameters">·ÖÅä¸øÃüÁîµÄSqlParamter²ÎÊýÊý×é</param>
            <returns>·µ»ØXmlReader½á¹û¼¯¶ÔÏó.</returns>
        </member>
        <member name="M:Xiuse.DbUtility.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary>
            Ö´ÐÐÖ¸¶¨Êý¾Ý¿âÁ¬½Ó¶ÔÏóµÄSqlCommandÃüÁî,²¢²úÉúÒ»¸öXmlReader¶ÔÏó×öÎª½á¹û¼¯·µ»Ø,Ö¸¶¨²ÎÊýÖµ.
            </summary>
            <remarks>
            ´Ë·½·¨²»Ìá¹©·ÃÎÊ´æ´¢¹ý³ÌÊä³ö²ÎÊýºÍ·µ»ØÖµ²ÎÊý.
            
            Ê¾Àý:  
             XmlReader r = ExecuteXmlReader(conn, "GetOrders", 24, 36);
            </remarks>
            <param name="connection">Ò»¸öÓÐÐ§µÄÊý¾Ý¿âÁ¬½Ó¶ÔÏó</param>
            <param name="spName">´æ´¢¹ý³ÌÃû³Æ using "FOR XML AUTO"</param>
            <param name="parameterValues">·ÖÅä¸ø´æ´¢¹ý³ÌÊäÈë²ÎÊýµÄ¶ÔÏóÊý×é</param>
            <returns>·µ»ØXmlReader½á¹û¼¯¶ÔÏó.</returns>
        </member>
        <member name="M:Xiuse.DbUtility.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Ö´ÐÐÖ¸¶¨Êý¾Ý¿âÊÂÎñµÄSqlCommandÃüÁî,²¢²úÉúÒ»¸öXmlReader¶ÔÏó×öÎª½á¹û¼¯·µ»Ø.
            </summary>
            <remarks>
            Ê¾Àý:  
             XmlReader r = ExecuteXmlReader(trans, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="transaction">Ò»¸öÓÐÐ§µÄÁ¬½ÓÊÂÎñ</param>
            <param name="commandType">ÃüÁîÀàÐÍ (´æ´¢¹ý³Ì,ÃüÁîÎÄ±¾»òÆäËü)</param>
            <param name="commandText">´æ´¢¹ý³ÌÃû³Æ»òT-SQLÓï¾ä using "FOR XML AUTO"</param>
            <returns>·µ»ØXmlReader½á¹û¼¯¶ÔÏó.</returns>
        </member>
        <member name="M:Xiuse.DbUtility.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Ö´ÐÐÖ¸¶¨Êý¾Ý¿âÊÂÎñµÄSqlCommandÃüÁî,²¢²úÉúÒ»¸öXmlReader¶ÔÏó×öÎª½á¹û¼¯·µ»Ø,Ö¸¶¨²ÎÊý.
            </summary>
            <remarks>
            Ê¾Àý:  
             XmlReader r = ExecuteXmlReader(trans, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">Ò»¸öÓÐÐ§µÄÁ¬½ÓÊÂÎñ</param>
            <param name="commandType">ÃüÁîÀàÐÍ (´æ´¢¹ý³Ì,ÃüÁîÎÄ±¾»òÆäËü)</param>
            <param name="commandText">´æ´¢¹ý³ÌÃû³Æ»òT-SQLÓï¾ä using "FOR XML AUTO"</param>
            <param name="commandParameters">·ÖÅä¸øÃüÁîµÄSqlParamter²ÎÊýÊý×é</param>
            <returns>·µ»ØXmlReader½á¹û¼¯¶ÔÏó.</returns>
        </member>
        <member name="M:Xiuse.DbUtility.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
            <summary>
            Ö´ÐÐÖ¸¶¨Êý¾Ý¿âÊÂÎñµÄSqlCommandÃüÁî,²¢²úÉúÒ»¸öXmlReader¶ÔÏó×öÎª½á¹û¼¯·µ»Ø,Ö¸¶¨²ÎÊýÖµ.
            </summary>
            <remarks>
            ´Ë·½·¨²»Ìá¹©·ÃÎÊ´æ´¢¹ý³ÌÊä³ö²ÎÊýºÍ·µ»ØÖµ²ÎÊý.
            
            Ê¾Àý:  
             XmlReader r = ExecuteXmlReader(trans, "GetOrders", 24, 36);
            </remarks>
            <param name="transaction">Ò»¸öÓÐÐ§µÄÁ¬½ÓÊÂÎñ</param>
            <param name="spName">´æ´¢¹ý³ÌÃû³Æ</param>
            <param name="parameterValues">·ÖÅä¸ø´æ´¢¹ý³ÌÊäÈë²ÎÊýµÄ¶ÔÏóÊý×é</param>
            <returns>·µ»ØÒ»¸ö°üº¬½á¹û¼¯µÄDataSet.</returns>
        </member>
        <member name="M:Xiuse.DbUtility.SqlHelper.FillDataset(System.String,System.Data.CommandType,System.String,System.Data.DataSet,System.String[])">
            <summary>
            Ö´ÐÐÖ¸¶¨Êý¾Ý¿âÁ¬½Ó×Ö·û´®µÄÃüÁî,Ó³ÉäÊý¾Ý±í²¢Ìî³äÊý¾Ý¼¯.
            </summary>
            <remarks>
            Ê¾Àý:  
             FillDataset(connString, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"});
            </remarks>
            <param name="connectionString">Ò»¸öÓÐÐ§µÄÊý¾Ý¿âÁ¬½Ó×Ö·û´®</param>
            <param name="commandType">ÃüÁîÀàÐÍ (´æ´¢¹ý³Ì,ÃüÁîÎÄ±¾»òÆäËü)</param>
            <param name="commandText">´æ´¢¹ý³ÌÃû³Æ»òT-SQLÓï¾ä</param>
            <param name="dataSet">ÒªÌî³ä½á¹û¼¯µÄDataSetÊµÀý</param>
            <param name="tableNames">±íÓ³ÉäµÄÊý¾Ý±íÊý×é
            ÓÃ»§¶¨ÒåµÄ±íÃû (¿ÉÓÐÊÇÊµ¼ÊµÄ±íÃû.)</param>
        </member>
        <member name="M:Xiuse.DbUtility.SqlHelper.FillDataset(System.String,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.SqlClient.SqlParameter[])">
            <summary>
            Ö´ÐÐÖ¸¶¨Êý¾Ý¿âÁ¬½Ó×Ö·û´®µÄÃüÁî,Ó³ÉäÊý¾Ý±í²¢Ìî³äÊý¾Ý¼¯.Ö¸¶¨ÃüÁî²ÎÊý.
            </summary>
            <remarks>
            Ê¾Àý:  
             FillDataset(connString, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">Ò»¸öÓÐÐ§µÄÊý¾Ý¿âÁ¬½Ó×Ö·û´®</param>
            <param name="commandType">ÃüÁîÀàÐÍ (´æ´¢¹ý³Ì,ÃüÁîÎÄ±¾»òÆäËü)</param>
            <param name="commandText">´æ´¢¹ý³ÌÃû³Æ»òT-SQLÓï¾ä</param>
            <param name="commandParameters">·ÖÅä¸øÃüÁîµÄSqlParamter²ÎÊýÊý×é</param>
            <param name="dataSet">ÒªÌî³ä½á¹û¼¯µÄDataSetÊµÀý</param>
            <param name="tableNames">±íÓ³ÉäµÄÊý¾Ý±íÊý×é
            ÓÃ»§¶¨ÒåµÄ±íÃû (¿ÉÓÐÊÇÊµ¼ÊµÄ±íÃû.)
            </param>
        </member>
        <member name="M:Xiuse.DbUtility.SqlHelper.FillDataset(System.String,System.String,System.Data.DataSet,System.String[],System.Object[])">
            <summary>
            Ö´ÐÐÖ¸¶¨Êý¾Ý¿âÁ¬½Ó×Ö·û´®µÄÃüÁî,Ó³ÉäÊý¾Ý±í²¢Ìî³äÊý¾Ý¼¯,Ö¸¶¨´æ´¢¹ý³Ì²ÎÊýÖµ.
            </summary>
            <remarks>
            ´Ë·½·¨²»Ìá¹©·ÃÎÊ´æ´¢¹ý³ÌÊä³ö²ÎÊýºÍ·µ»ØÖµ²ÎÊý.
            
            Ê¾Àý:  
             FillDataset(connString, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, 24);
            </remarks>
            <param name="connectionString">Ò»¸öÓÐÐ§µÄÊý¾Ý¿âÁ¬½Ó×Ö·û´®</param>
            <param name="spName">´æ´¢¹ý³ÌÃû³Æ</param>
            <param name="dataSet">ÒªÌî³ä½á¹û¼¯µÄDataSetÊµÀý</param>
            <param name="tableNames">±íÓ³ÉäµÄÊý¾Ý±íÊý×é
            ÓÃ»§¶¨ÒåµÄ±íÃû (¿ÉÓÐÊÇÊµ¼ÊµÄ±íÃû.)
            </param>    
            <param name="parameterValues">·ÖÅä¸ø´æ´¢¹ý³ÌÊäÈë²ÎÊýµÄ¶ÔÏóÊý×é</param>
        </member>
        <member name="M:Xiuse.DbUtility.SqlHelper.FillDataset(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.DataSet,System.String[])">
            <summary>
            Ö´ÐÐÖ¸¶¨Êý¾Ý¿âÁ¬½Ó¶ÔÏóµÄÃüÁî,Ó³ÉäÊý¾Ý±í²¢Ìî³äÊý¾Ý¼¯.
            </summary>
            <remarks>
            Ê¾Àý:  
             FillDataset(conn, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"});
            </remarks>
            <param name="connection">Ò»¸öÓÐÐ§µÄÊý¾Ý¿âÁ¬½Ó¶ÔÏó</param>
            <param name="commandType">ÃüÁîÀàÐÍ (´æ´¢¹ý³Ì,ÃüÁîÎÄ±¾»òÆäËü)</param>
            <param name="commandText">´æ´¢¹ý³ÌÃû³Æ»òT-SQLÓï¾ä</param>
            <param name="dataSet">ÒªÌî³ä½á¹û¼¯µÄDataSetÊµÀý</param>
            <param name="tableNames">±íÓ³ÉäµÄÊý¾Ý±íÊý×é
            ÓÃ»§¶¨ÒåµÄ±íÃû (¿ÉÓÐÊÇÊµ¼ÊµÄ±íÃû.)
            </param>    
        </member>
        <member name="M:Xiuse.DbUtility.SqlHelper.FillDataset(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.SqlClient.SqlParameter[])">
            <summary>
            Ö´ÐÐÖ¸¶¨Êý¾Ý¿âÁ¬½Ó¶ÔÏóµÄÃüÁî,Ó³ÉäÊý¾Ý±í²¢Ìî³äÊý¾Ý¼¯,Ö¸¶¨²ÎÊý.
            </summary>
            <remarks>
            Ê¾Àý:  
             FillDataset(conn, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">Ò»¸öÓÐÐ§µÄÊý¾Ý¿âÁ¬½Ó¶ÔÏó</param>
            <param name="commandType">ÃüÁîÀàÐÍ (´æ´¢¹ý³Ì,ÃüÁîÎÄ±¾»òÆäËü)</param>
            <param name="commandText">´æ´¢¹ý³ÌÃû³Æ»òT-SQLÓï¾ä</param>
            <param name="dataSet">ÒªÌî³ä½á¹û¼¯µÄDataSetÊµÀý</param>
            <param name="tableNames">±íÓ³ÉäµÄÊý¾Ý±íÊý×é
            ÓÃ»§¶¨ÒåµÄ±íÃû (¿ÉÓÐÊÇÊµ¼ÊµÄ±íÃû.)
            </param>
            <param name="commandParameters">·ÖÅä¸øÃüÁîµÄSqlParamter²ÎÊýÊý×é</param>
        </member>
        <member name="M:Xiuse.DbUtility.SqlHelper.FillDataset(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataSet,System.String[],System.Object[])">
            <summary>
            Ö´ÐÐÖ¸¶¨Êý¾Ý¿âÁ¬½Ó¶ÔÏóµÄÃüÁî,Ó³ÉäÊý¾Ý±í²¢Ìî³äÊý¾Ý¼¯,Ö¸¶¨´æ´¢¹ý³Ì²ÎÊýÖµ.
            </summary>
            <remarks>
            ´Ë·½·¨²»Ìá¹©·ÃÎÊ´æ´¢¹ý³ÌÊä³ö²ÎÊýºÍ·µ»ØÖµ²ÎÊý.
            
            Ê¾Àý:  
             FillDataset(conn, "GetOrders", ds, new string[] {"orders"}, 24, 36);
            </remarks>
            <param name="connection">Ò»¸öÓÐÐ§µÄÊý¾Ý¿âÁ¬½Ó¶ÔÏó</param>
            <param name="spName">´æ´¢¹ý³ÌÃû³Æ</param>
            <param name="dataSet">ÒªÌî³ä½á¹û¼¯µÄDataSetÊµÀý</param>
            <param name="tableNames">±íÓ³ÉäµÄÊý¾Ý±íÊý×é
            ÓÃ»§¶¨ÒåµÄ±íÃû (¿ÉÓÐÊÇÊµ¼ÊµÄ±íÃû.)
            </param>
            <param name="parameterValues">·ÖÅä¸ø´æ´¢¹ý³ÌÊäÈë²ÎÊýµÄ¶ÔÏóÊý×é</param>
        </member>
        <member name="M:Xiuse.DbUtility.SqlHelper.FillDataset(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.DataSet,System.String[])">
            <summary>
            Ö´ÐÐÖ¸¶¨Êý¾Ý¿âÊÂÎñµÄÃüÁî,Ó³ÉäÊý¾Ý±í²¢Ìî³äÊý¾Ý¼¯.
            </summary>
            <remarks>
            Ê¾Àý:  
             FillDataset(trans, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"});
            </remarks>
            <param name="transaction">Ò»¸öÓÐÐ§µÄÁ¬½ÓÊÂÎñ</param>
            <param name="commandType">ÃüÁîÀàÐÍ (´æ´¢¹ý³Ì,ÃüÁîÎÄ±¾»òÆäËü)</param>
            <param name="commandText">´æ´¢¹ý³ÌÃû³Æ»òT-SQLÓï¾ä</param>
            <param name="dataSet">ÒªÌî³ä½á¹û¼¯µÄDataSetÊµÀý</param>
            <param name="tableNames">±íÓ³ÉäµÄÊý¾Ý±íÊý×é
            ÓÃ»§¶¨ÒåµÄ±íÃû (¿ÉÓÐÊÇÊµ¼ÊµÄ±íÃû.)
            </param>
        </member>
        <member name="M:Xiuse.DbUtility.SqlHelper.FillDataset(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.SqlClient.SqlParameter[])">
            <summary>
            Ö´ÐÐÖ¸¶¨Êý¾Ý¿âÊÂÎñµÄÃüÁî,Ó³ÉäÊý¾Ý±í²¢Ìî³äÊý¾Ý¼¯,Ö¸¶¨²ÎÊý.
            </summary>
            <remarks>
            Ê¾Àý:  
             FillDataset(trans, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">Ò»¸öÓÐÐ§µÄÁ¬½ÓÊÂÎñ</param>
            <param name="commandType">ÃüÁîÀàÐÍ (´æ´¢¹ý³Ì,ÃüÁîÎÄ±¾»òÆäËü)</param>
            <param name="commandText">´æ´¢¹ý³ÌÃû³Æ»òT-SQLÓï¾ä</param>
            <param name="dataSet">ÒªÌî³ä½á¹û¼¯µÄDataSetÊµÀý</param>
            <param name="tableNames">±íÓ³ÉäµÄÊý¾Ý±íÊý×é
            ÓÃ»§¶¨ÒåµÄ±íÃû (¿ÉÓÐÊÇÊµ¼ÊµÄ±íÃû.)
            </param>
            <param name="commandParameters">·ÖÅä¸øÃüÁîµÄSqlParamter²ÎÊýÊý×é</param>
        </member>
        <member name="M:Xiuse.DbUtility.SqlHelper.FillDataset(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataSet,System.String[],System.Object[])">
            <summary>
            Ö´ÐÐÖ¸¶¨Êý¾Ý¿âÊÂÎñµÄÃüÁî,Ó³ÉäÊý¾Ý±í²¢Ìî³äÊý¾Ý¼¯,Ö¸¶¨´æ´¢¹ý³Ì²ÎÊýÖµ.
            </summary>
            <remarks>
            ´Ë·½·¨²»Ìá¹©·ÃÎÊ´æ´¢¹ý³ÌÊä³ö²ÎÊýºÍ·µ»ØÖµ²ÎÊý.
            
            Ê¾Àý:  
             FillDataset(trans, "GetOrders", ds, new string[]{"orders"}, 24, 36);
            </remarks>
            <param name="transaction">Ò»¸öÓÐÐ§µÄÁ¬½ÓÊÂÎñ</param>
            <param name="spName">´æ´¢¹ý³ÌÃû³Æ</param>
            <param name="dataSet">ÒªÌî³ä½á¹û¼¯µÄDataSetÊµÀý</param>
            <param name="tableNames">±íÓ³ÉäµÄÊý¾Ý±íÊý×é
            ÓÃ»§¶¨ÒåµÄ±íÃû (¿ÉÓÐÊÇÊµ¼ÊµÄ±íÃû.)
            </param>
            <param name="parameterValues">·ÖÅä¸ø´æ´¢¹ý³ÌÊäÈë²ÎÊýµÄ¶ÔÏóÊý×é</param>
        </member>
        <member name="M:Xiuse.DbUtility.SqlHelper.FillDataset(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.SqlClient.SqlParameter[])">
            <summary>
            [Ë½ÓÐ·½·¨][ÄÚ²¿µ÷ÓÃ]Ö´ÐÐÖ¸¶¨Êý¾Ý¿âÁ¬½Ó¶ÔÏó/ÊÂÎñµÄÃüÁî,Ó³ÉäÊý¾Ý±í²¢Ìî³äÊý¾Ý¼¯,DataSet/TableNames/SqlParameters.
            </summary>
            <remarks>
            Ê¾Àý:  
             FillDataset(conn, trans, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">Ò»¸öÓÐÐ§µÄÊý¾Ý¿âÁ¬½Ó¶ÔÏó</param>
            <param name="transaction">Ò»¸öÓÐÐ§µÄÁ¬½ÓÊÂÎñ</param>
            <param name="commandType">ÃüÁîÀàÐÍ (´æ´¢¹ý³Ì,ÃüÁîÎÄ±¾»òÆäËü)</param>
            <param name="commandText">´æ´¢¹ý³ÌÃû³Æ»òT-SQLÓï¾ä</param>
            <param name="dataSet">ÒªÌî³ä½á¹û¼¯µÄDataSetÊµÀý</param>
            <param name="tableNames">±íÓ³ÉäµÄÊý¾Ý±íÊý×é
            ÓÃ»§¶¨ÒåµÄ±íÃû (¿ÉÓÐÊÇÊµ¼ÊµÄ±íÃû.)
            </param>
            <param name="commandParameters">·ÖÅä¸øÃüÁîµÄSqlParamter²ÎÊýÊý×é</param>
        </member>
        <member name="M:Xiuse.DbUtility.SqlHelper.UpdateDataset(System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlCommand,System.Data.DataSet,System.String)">
            <summary>
            Ö´ÐÐÊý¾Ý¼¯¸üÐÂµ½Êý¾Ý¿â,Ö¸¶¨inserted, updated, or deletedÃüÁî.
            </summary>
            <remarks>
            Ê¾Àý:  
             UpdateDataset(conn, insertCommand, deleteCommand, updateCommand, dataSet, "Order");
            </remarks>
            <param name="insertCommand">[×·¼Ó¼ÇÂ¼]Ò»¸öÓÐÐ§µÄT-SQLÓï¾ä»ò´æ´¢¹ý³Ì</param>
            <param name="deleteCommand">[É¾³ý¼ÇÂ¼]Ò»¸öÓÐÐ§µÄT-SQLÓï¾ä»ò´æ´¢¹ý³Ì</param>
            <param name="updateCommand">[¸üÐÂ¼ÇÂ¼]Ò»¸öÓÐÐ§µÄT-SQLÓï¾ä»ò´æ´¢¹ý³Ì</param>
            <param name="dataSet">Òª¸üÐÂµ½Êý¾Ý¿âµÄDataSet</param>
            <param name="tableName">Òª¸üÐÂµ½Êý¾Ý¿âµÄDataTable</param>
        </member>
        <member name="M:Xiuse.DbUtility.SqlHelper.CreateCommand(System.Data.SqlClient.SqlConnection,System.String,System.String[])">
            <summary>
            ´´½¨SqlCommandÃüÁî,Ö¸¶¨Êý¾Ý¿âÁ¬½Ó¶ÔÏó,´æ´¢¹ý³ÌÃûºÍ²ÎÊý.
            </summary>
            <remarks>
            Ê¾Àý:  
             SqlCommand command = CreateCommand(conn, "AddCustomer", "CustomerID", "CustomerName");
            </remarks>
            <param name="connection">Ò»¸öÓÐÐ§µÄÊý¾Ý¿âÁ¬½Ó¶ÔÏó</param>
            <param name="spName">´æ´¢¹ý³ÌÃû³Æ</param>
            <param name="sourceColumns">Ô´±íµÄÁÐÃû³ÆÊý×é</param>
            <returns>·µ»ØSqlCommandÃüÁî</returns>
        </member>
        <member name="M:Xiuse.DbUtility.SqlHelper.ExecuteNonQueryTypedParams(System.String,System.String,System.Data.DataRow)">
            <summary>
            Ö´ÐÐÖ¸¶¨Á¬½ÓÊý¾Ý¿âÁ¬½Ó×Ö·û´®µÄ´æ´¢¹ý³Ì,Ê¹ÓÃDataRow×öÎª²ÎÊýÖµ,·µ»ØÊÜÓ°ÏìµÄÐÐÊý.
            </summary>
            <param name="connectionString">Ò»¸öÓÐÐ§µÄÊý¾Ý¿âÁ¬½Ó×Ö·û´®</param>
            <param name="spName">´æ´¢¹ý³ÌÃû³Æ</param>
            <param name="dataRow">Ê¹ÓÃDataRow×÷Îª²ÎÊýÖµ</param>
            <returns>·µ»ØÓ°ÏìµÄÐÐÊý</returns>
        </member>
        <member name="M:Xiuse.DbUtility.SqlHelper.ExecuteNonQueryTypedParams(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataRow)">
            <summary>
            Ö´ÐÐÖ¸¶¨Á¬½ÓÊý¾Ý¿âÁ¬½Ó¶ÔÏóµÄ´æ´¢¹ý³Ì,Ê¹ÓÃDataRow×öÎª²ÎÊýÖµ,·µ»ØÊÜÓ°ÏìµÄÐÐÊý.
            </summary>
            <param name="connection">Ò»¸öÓÐÐ§µÄÊý¾Ý¿âÁ¬½Ó¶ÔÏó</param>
            <param name="spName">´æ´¢¹ý³ÌÃû³Æ</param>
            <param name="dataRow">Ê¹ÓÃDataRow×÷Îª²ÎÊýÖµ</param>
            <returns>·µ»ØÓ°ÏìµÄÐÐÊý</returns>
        </member>
        <member name="M:Xiuse.DbUtility.SqlHelper.ExecuteNonQueryTypedParams(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataRow)">
            <summary>
            Ö´ÐÐÖ¸¶¨Á¬½ÓÊý¾Ý¿âÊÂÎïµÄ´æ´¢¹ý³Ì,Ê¹ÓÃDataRow×öÎª²ÎÊýÖµ,·µ»ØÊÜÓ°ÏìµÄÐÐÊý.
            </summary>
            <param name="transaction">Ò»¸öÓÐÐ§µÄÁ¬½ÓÊÂÎñ object</param>
            <param name="spName">´æ´¢¹ý³ÌÃû³Æ</param>
            <param name="dataRow">Ê¹ÓÃDataRow×÷Îª²ÎÊýÖµ</param>
            <returns>·µ»ØÓ°ÏìµÄÐÐÊý</returns>
        </member>
        <member name="M:Xiuse.DbUtility.SqlHelper.ExecuteDatasetTypedParams(System.String,System.String,System.Data.DataRow)">
            <summary>
            Ö´ÐÐÖ¸¶¨Á¬½ÓÊý¾Ý¿âÁ¬½Ó×Ö·û´®µÄ´æ´¢¹ý³Ì,Ê¹ÓÃDataRow×öÎª²ÎÊýÖµ,·µ»ØDataSet.
            </summary>
            <param name="connectionString">Ò»¸öÓÐÐ§µÄÊý¾Ý¿âÁ¬½Ó×Ö·û´®</param>
            <param name="spName">´æ´¢¹ý³ÌÃû³Æ</param>
            <param name="dataRow">Ê¹ÓÃDataRow×÷Îª²ÎÊýÖµ</param>
            <returns>·µ»ØÒ»¸ö°üº¬½á¹û¼¯µÄDataSet.</returns>
        </member>
        <member name="M:Xiuse.DbUtility.SqlHelper.ExecuteDatasetTypedParams(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataRow)">
            <summary>
            Ö´ÐÐÖ¸¶¨Á¬½ÓÊý¾Ý¿âÁ¬½Ó¶ÔÏóµÄ´æ´¢¹ý³Ì,Ê¹ÓÃDataRow×öÎª²ÎÊýÖµ,·µ»ØDataSet.
            </summary>
            <param name="connection">Ò»¸öÓÐÐ§µÄÊý¾Ý¿âÁ¬½Ó¶ÔÏó</param>
            <param name="spName">´æ´¢¹ý³ÌÃû³Æ</param>
            <param name="dataRow">Ê¹ÓÃDataRow×÷Îª²ÎÊýÖµ</param>
            <returns>·µ»ØÒ»¸ö°üº¬½á¹û¼¯µÄDataSet.</returns>
            
        </member>
        <member name="M:Xiuse.DbUtility.SqlHelper.ExecuteDatasetTypedParams(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataRow)">
            <summary>
            Ö´ÐÐÖ¸¶¨Á¬½ÓÊý¾Ý¿âÊÂÎñµÄ´æ´¢¹ý³Ì,Ê¹ÓÃDataRow×öÎª²ÎÊýÖµ,·µ»ØDataSet.
            </summary>
            <param name="transaction">Ò»¸öÓÐÐ§µÄÁ¬½ÓÊÂÎñ object</param>
            <param name="spName">´æ´¢¹ý³ÌÃû³Æ</param>
            <param name="dataRow">Ê¹ÓÃDataRow×÷Îª²ÎÊýÖµ</param>
            <returns>·µ»ØÒ»¸ö°üº¬½á¹û¼¯µÄDataSet.</returns>
        </member>
        <member name="M:Xiuse.DbUtility.SqlHelper.ExecuteReaderTypedParams(System.String,System.String,System.Data.DataRow)">
            <summary>
            Ö´ÐÐÖ¸¶¨Á¬½ÓÊý¾Ý¿âÁ¬½Ó×Ö·û´®µÄ´æ´¢¹ý³Ì,Ê¹ÓÃDataRow×öÎª²ÎÊýÖµ,·µ»ØDataReader.
            </summary>
            <param name="connectionString">Ò»¸öÓÐÐ§µÄÊý¾Ý¿âÁ¬½Ó×Ö·û´®</param>
            <param name="spName">´æ´¢¹ý³ÌÃû³Æ</param>
            <param name="dataRow">Ê¹ÓÃDataRow×÷Îª²ÎÊýÖµ</param>
            <returns>·µ»Ø°üº¬½á¹û¼¯µÄSqlDataReader</returns>
        </member>
        <member name="M:Xiuse.DbUtility.SqlHelper.ExecuteReaderTypedParams(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataRow)">
            <summary>
            Ö´ÐÐÖ¸¶¨Á¬½ÓÊý¾Ý¿âÁ¬½Ó¶ÔÏóµÄ´æ´¢¹ý³Ì,Ê¹ÓÃDataRow×öÎª²ÎÊýÖµ,·µ»ØDataReader.
            </summary>
            <param name="connection">Ò»¸öÓÐÐ§µÄÊý¾Ý¿âÁ¬½Ó¶ÔÏó</param>
            <param name="spName">´æ´¢¹ý³ÌÃû³Æ</param>
            <param name="dataRow">Ê¹ÓÃDataRow×÷Îª²ÎÊýÖµ</param>
            <returns>·µ»Ø°üº¬½á¹û¼¯µÄSqlDataReader</returns>
        </member>
        <member name="M:Xiuse.DbUtility.SqlHelper.ExecuteReaderTypedParams(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataRow)">
            <summary>
            Ö´ÐÐÖ¸¶¨Á¬½ÓÊý¾Ý¿âÊÂÎïµÄ´æ´¢¹ý³Ì,Ê¹ÓÃDataRow×öÎª²ÎÊýÖµ,·µ»ØDataReader.
            </summary>
            <param name="transaction">Ò»¸öÓÐÐ§µÄÁ¬½ÓÊÂÎñ object</param>
            <param name="spName">´æ´¢¹ý³ÌÃû³Æ</param>
            <param name="dataRow">Ê¹ÓÃDataRow×÷Îª²ÎÊýÖµ</param>
            <returns>·µ»Ø°üº¬½á¹û¼¯µÄSqlDataReader</returns>
        </member>
        <member name="M:Xiuse.DbUtility.SqlHelper.ExecuteScalarTypedParams(System.String,System.String,System.Data.DataRow)">
            <summary>
            Ö´ÐÐÖ¸¶¨Á¬½ÓÊý¾Ý¿âÁ¬½Ó×Ö·û´®µÄ´æ´¢¹ý³Ì,Ê¹ÓÃDataRow×öÎª²ÎÊýÖµ,·µ»Ø½á¹û¼¯ÖÐµÄµÚÒ»ÐÐµÚÒ»ÁÐ.
            </summary>
            <param name="connectionString">Ò»¸öÓÐÐ§µÄÊý¾Ý¿âÁ¬½Ó×Ö·û´®</param>
            <param name="spName">´æ´¢¹ý³ÌÃû³Æ</param>
            <param name="dataRow">Ê¹ÓÃDataRow×÷Îª²ÎÊýÖµ</param>
            <returns>·µ»Ø½á¹û¼¯ÖÐµÄµÚÒ»ÐÐµÚÒ»ÁÐ</returns>
        </member>
        <member name="M:Xiuse.DbUtility.SqlHelper.ExecuteScalarTypedParams(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataRow)">
            <summary>
            Ö´ÐÐÖ¸¶¨Á¬½ÓÊý¾Ý¿âÁ¬½Ó¶ÔÏóµÄ´æ´¢¹ý³Ì,Ê¹ÓÃDataRow×öÎª²ÎÊýÖµ,·µ»Ø½á¹û¼¯ÖÐµÄµÚÒ»ÐÐµÚÒ»ÁÐ.
            </summary>
            <param name="connection">Ò»¸öÓÐÐ§µÄÊý¾Ý¿âÁ¬½Ó¶ÔÏó</param>
            <param name="spName">´æ´¢¹ý³ÌÃû³Æ</param>
            <param name="dataRow">Ê¹ÓÃDataRow×÷Îª²ÎÊýÖµ</param>
            <returns>·µ»Ø½á¹û¼¯ÖÐµÄµÚÒ»ÐÐµÚÒ»ÁÐ</returns>
        </member>
        <member name="M:Xiuse.DbUtility.SqlHelper.ExecuteScalarTypedParams(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataRow)">
            <summary>
            Ö´ÐÐÖ¸¶¨Á¬½ÓÊý¾Ý¿âÊÂÎñµÄ´æ´¢¹ý³Ì,Ê¹ÓÃDataRow×öÎª²ÎÊýÖµ,·µ»Ø½á¹û¼¯ÖÐµÄµÚÒ»ÐÐµÚÒ»ÁÐ.
            </summary>
            <param name="transaction">Ò»¸öÓÐÐ§µÄÁ¬½ÓÊÂÎñ object</param>
            <param name="spName">´æ´¢¹ý³ÌÃû³Æ</param>
            <param name="dataRow">Ê¹ÓÃDataRow×÷Îª²ÎÊýÖµ</param>
            <returns>·µ»Ø½á¹û¼¯ÖÐµÄµÚÒ»ÐÐµÚÒ»ÁÐ</returns>
        </member>
        <member name="M:Xiuse.DbUtility.SqlHelper.ExecuteXmlReaderTypedParams(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataRow)">
            <summary>
            Ö´ÐÐÖ¸¶¨Á¬½ÓÊý¾Ý¿âÁ¬½Ó¶ÔÏóµÄ´æ´¢¹ý³Ì,Ê¹ÓÃDataRow×öÎª²ÎÊýÖµ,·µ»ØXmlReaderÀàÐÍµÄ½á¹û¼¯.
            </summary>
            <param name="connection">Ò»¸öÓÐÐ§µÄÊý¾Ý¿âÁ¬½Ó¶ÔÏó</param>
            <param name="spName">´æ´¢¹ý³ÌÃû³Æ</param>
            <param name="dataRow">Ê¹ÓÃDataRow×÷Îª²ÎÊýÖµ</param>
            <returns>·µ»ØXmlReader½á¹û¼¯¶ÔÏó.</returns>
        </member>
        <member name="M:Xiuse.DbUtility.SqlHelper.ExecuteXmlReaderTypedParams(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataRow)">
            <summary>
            Ö´ÐÐÖ¸¶¨Á¬½ÓÊý¾Ý¿âÊÂÎñµÄ´æ´¢¹ý³Ì,Ê¹ÓÃDataRow×öÎª²ÎÊýÖµ,·µ»ØXmlReaderÀàÐÍµÄ½á¹û¼¯.
            </summary>
            <param name="transaction">Ò»¸öÓÐÐ§µÄÁ¬½ÓÊÂÎñ object</param>
            <param name="spName">´æ´¢¹ý³ÌÃû³Æ</param>
            <param name="dataRow">Ê¹ÓÃDataRow×÷Îª²ÎÊýÖµ</param>
            <returns>·µ»ØXmlReader½á¹û¼¯¶ÔÏó.</returns>
        </member>
        <member name="T:Xiuse.DbUtility.SqlHelperParameterCache">
            <summary>
            SqlHelperParameterCacheÌá¹©»º´æ´æ´¢¹ý³Ì²ÎÊý,²¢ÄÜ¹»ÔÚÔËÐÐÊ±´Ó´æ´¢¹ý³ÌÖÐÌ½Ë÷²ÎÊý.
            </summary>
        </member>
        <member name="M:Xiuse.DbUtility.SqlHelperParameterCache.DiscoverSpParameterSet(System.Data.SqlClient.SqlConnection,System.String,System.Boolean)">
            <summary>
            Ì½Ë÷ÔËÐÐÊ±µÄ´æ´¢¹ý³Ì,·µ»ØSqlParameter²ÎÊýÊý×é.
            ³õÊ¼»¯²ÎÊýÖµÎª DBNull.Value.
            </summary>
            <param name="connection">Ò»¸öÓÐÐ§µÄÊý¾Ý¿âÁ¬½Ó</param>
            <param name="spName">´æ´¢¹ý³ÌÃû³Æ</param>
            <param name="includeReturnValueParameter">ÊÇ·ñ°üº¬·µ»ØÖµ²ÎÊý</param>
            <returns>·µ»ØSqlParameter²ÎÊýÊý×é</returns>
        </member>
        <member name="M:Xiuse.DbUtility.SqlHelperParameterCache.CloneParameters(System.Data.SqlClient.SqlParameter[])">
            <summary>
            SqlParameter²ÎÊýÊý×éµÄÉî²ã¿½±´.
            </summary>
            <param name="originalParameters">Ô­Ê¼²ÎÊýÊý×é</param>
            <returns>·µ»ØÒ»¸öÍ¬ÑùµÄ²ÎÊýÊý×é</returns>
        </member>
        <member name="M:Xiuse.DbUtility.SqlHelperParameterCache.CacheParameterSet(System.String,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            ×·¼Ó²ÎÊýÊý×éµ½»º´æ.
            </summary>
            <param name="connectionString">Ò»¸öÓÐÐ§µÄÊý¾Ý¿âÁ¬½Ó×Ö·û´®</param>
            <param name="commandText">´æ´¢¹ý³ÌÃû»òSQLÓï¾ä</param>
            <param name="commandParameters">Òª»º´æµÄ²ÎÊýÊý×é</param>
        </member>
        <member name="M:Xiuse.DbUtility.SqlHelperParameterCache.GetCachedParameterSet(System.String,System.String)">
            <summary>
            ´Ó»º´æÖÐ»ñÈ¡²ÎÊýÊý×é.
            </summary>
            <param name="connectionString">Ò»¸öÓÐÐ§µÄÊý¾Ý¿âÁ¬½Ó×Ö·û</param>
            <param name="commandText">´æ´¢¹ý³ÌÃû»òSQLÓï¾ä</param>
            <returns>²ÎÊýÊý×é</returns>
        </member>
        <member name="M:Xiuse.DbUtility.SqlHelperParameterCache.GetSpParameterSet(System.String,System.String)">
            <summary>
            ·µ»ØÖ¸¶¨µÄ´æ´¢¹ý³ÌµÄ²ÎÊý¼¯
            </summary>
            <remarks>
            Õâ¸ö·½·¨½«²éÑ¯Êý¾Ý¿â,²¢½«ÐÅÏ¢´æ´¢µ½»º´æ.
            </remarks>
            <param name="connectionString">Ò»¸öÓÐÐ§µÄÊý¾Ý¿âÁ¬½Ó×Ö·û</param>
            <param name="spName">´æ´¢¹ý³ÌÃû</param>
            <returns>·µ»ØSqlParameter²ÎÊýÊý×é</returns>
        </member>
        <member name="M:Xiuse.DbUtility.SqlHelperParameterCache.GetSpParameterSet(System.String,System.String,System.Boolean)">
            <summary>
            ·µ»ØÖ¸¶¨µÄ´æ´¢¹ý³ÌµÄ²ÎÊý¼¯
            </summary>
            <remarks>
            Õâ¸ö·½·¨½«²éÑ¯Êý¾Ý¿â,²¢½«ÐÅÏ¢´æ´¢µ½»º´æ.
            </remarks>
            <param name="connectionString">Ò»¸öÓÐÐ§µÄÊý¾Ý¿âÁ¬½Ó×Ö·û.</param>
            <param name="spName">´æ´¢¹ý³ÌÃû</param>
            <param name="includeReturnValueParameter">ÊÇ·ñ°üº¬·µ»ØÖµ²ÎÊý</param>
            <returns>·µ»ØSqlParameter²ÎÊýÊý×é</returns>
        </member>
        <member name="M:Xiuse.DbUtility.SqlHelperParameterCache.GetSpParameterSet(System.Data.SqlClient.SqlConnection,System.String)">
            <summary>
            [ÄÚ²¿]·µ»ØÖ¸¶¨µÄ´æ´¢¹ý³ÌµÄ²ÎÊý¼¯(Ê¹ÓÃÁ¬½Ó¶ÔÏó).
            </summary>
            <remarks>
            Õâ¸ö·½·¨½«²éÑ¯Êý¾Ý¿â,²¢½«ÐÅÏ¢´æ´¢µ½»º´æ.
            </remarks>
            <param name="connection">Ò»¸öÓÐÐ§µÄÊý¾Ý¿âÁ¬½Ó×Ö·û</param>
            <param name="spName">´æ´¢¹ý³ÌÃû</param>
            <returns>·µ»ØSqlParameter²ÎÊýÊý×é</returns>
        </member>
        <member name="M:Xiuse.DbUtility.SqlHelperParameterCache.GetSpParameterSet(System.Data.SqlClient.SqlConnection,System.String,System.Boolean)">
            <summary>
            [ÄÚ²¿]·µ»ØÖ¸¶¨µÄ´æ´¢¹ý³ÌµÄ²ÎÊý¼¯(Ê¹ÓÃÁ¬½Ó¶ÔÏó)
            </summary>
            <remarks>
            Õâ¸ö·½·¨½«²éÑ¯Êý¾Ý¿â,²¢½«ÐÅÏ¢´æ´¢µ½»º´æ.
            </remarks>
            <param name="connection">Ò»¸öÓÐÐ§µÄÊý¾Ý¿âÁ¬½Ó¶ÔÏó</param>
            <param name="spName">´æ´¢¹ý³ÌÃû</param>
            <param name="includeReturnValueParameter">
            ÊÇ·ñ°üº¬·µ»ØÖµ²ÎÊý
            </param>
            <returns>·µ»ØSqlParameter²ÎÊýÊý×é</returns>
        </member>
        <member name="M:Xiuse.DbUtility.SqlHelperParameterCache.GetSpParameterSetInternal(System.Data.SqlClient.SqlConnection,System.String,System.Boolean)">
            <summary>
            [Ë½ÓÐ]·µ»ØÖ¸¶¨µÄ´æ´¢¹ý³ÌµÄ²ÎÊý¼¯(Ê¹ÓÃÁ¬½Ó¶ÔÏó)
            </summary>
            <param name="connection">Ò»¸öÓÐÐ§µÄÊý¾Ý¿âÁ¬½Ó¶ÔÏó</param>
            <param name="spName">´æ´¢¹ý³ÌÃû</param>
            <param name="includeReturnValueParameter">ÊÇ·ñ°üº¬·µ»ØÖµ²ÎÊý</param>
            <returns>·µ»ØSqlParameter²ÎÊýÊý×é</returns>
        </member>
        <member name="T:Maticsoft.DBUtility.DbHelperMySQL">
            <summary>
            数据访问抽象基础类
            </summary>
        </member>
        <member name="M:Maticsoft.DBUtility.DbHelperMySQL.GetMaxID(System.String,System.String)">
            <summary>
            得到最大值
            </summary>
            <param name="FieldName"></param>
            <param name="TableName"></param>
            <returns></returns>
        </member>
        <member name="M:Maticsoft.DBUtility.DbHelperMySQL.Exists(System.String)">
            <summary>
            是否存在
            </summary>
            <param name="strSql"></param>
            <returns></returns>
        </member>
        <member name="M:Maticsoft.DBUtility.DbHelperMySQL.Exists(System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            是否存在（基于MySqlParameter）
            </summary>
            <param name="strSql"></param>
            <param name="cmdParms"></param>
            <returns></returns>
        </member>
        <member name="M:Maticsoft.DBUtility.DbHelperMySQL.ExecuteSql(System.String)">
            <summary>
            执行SQL语句，返回影响的记录数
            </summary>
            <param name="SQLString">SQL语句</param>
            <returns>影响的记录数</returns>
        </member>
        <member name="M:Maticsoft.DBUtility.DbHelperMySQL.ExecuteSqlTran(System.Collections.Generic.List{Maticsoft.DBUtility.CommandInfo},System.Collections.Generic.List{Maticsoft.DBUtility.CommandInfo})">
            <summary>
            执行MySql和Oracle滴混合事务
            </summary>
            <param name="list">SQL命令行列表</param>
            <param name="oracleCmdSqlList">Oracle命令行列表</param>
            <returns>执行结果 0-由于SQL造成事务失败 -1 由于Oracle造成事务失败 1-整体事务执行成功</returns>
        </member>
        <member name="M:Maticsoft.DBUtility.DbHelperMySQL.ExecuteSqlTran(System.Collections.Generic.List{System.String})">
            <summary>
            执行多条SQL语句，实现数据库事务。
            </summary>
            <param name="SQLStringList">多条SQL语句</param>		
        </member>
        <member name="M:Maticsoft.DBUtility.DbHelperMySQL.ExecuteSql(System.String,System.String)">
            <summary>
            执行带一个存储过程参数的的SQL语句。
            </summary>
            <param name="SQLString">SQL语句</param>
            <param name="content">参数内容,比如一个字段是格式复杂的文章，有特殊符号，可以通过这个方式添加</param>
            <returns>影响的记录数</returns>
        </member>
        <member name="M:Maticsoft.DBUtility.DbHelperMySQL.ExecuteSqlGet(System.String,System.String)">
            <summary>
            执行带一个存储过程参数的的SQL语句。
            </summary>
            <param name="SQLString">SQL语句</param>
            <param name="content">参数内容,比如一个字段是格式复杂的文章，有特殊符号，可以通过这个方式添加</param>
            <returns>影响的记录数</returns>
        </member>
        <member name="M:Maticsoft.DBUtility.DbHelperMySQL.ExecuteSqlInsertImg(System.String,System.Byte[])">
            <summary>
            向数据库里插入图像格式的字段(和上面情况类似的另一种实例)
            </summary>
            <param name="strSQL">SQL语句</param>
            <param name="fs">图像字节,数据库的字段类型为image的情况</param>
            <returns>影响的记录数</returns>
        </member>
        <member name="M:Maticsoft.DBUtility.DbHelperMySQL.GetSingle(System.String)">
            <summary>
            执行一条计算查询结果语句，返回查询结果（object）。
            </summary>
            <param name="SQLString">计算查询结果语句</param>
            <returns>查询结果（object）</returns>
        </member>
        <member name="M:Maticsoft.DBUtility.DbHelperMySQL.ExecuteReader(System.String)">
            <summary>
            执行查询语句，返回MySqlDataReader ( 注意：调用该方法后，一定要对MySqlDataReader进行Close )
            </summary>
            <param name="strSQL">查询语句</param>
            <returns>MySqlDataReader</returns>
        </member>
        <member name="M:Maticsoft.DBUtility.DbHelperMySQL.Query(System.String)">
            <summary>
            执行查询语句，返回DataSet
            </summary>
            <param name="SQLString">查询语句</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:Maticsoft.DBUtility.DbHelperMySQL.ExecuteSql(System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            执行SQL语句，返回影响的记录数
            </summary>
            <param name="SQLString">SQL语句</param>
            <returns>影响的记录数</returns>
        </member>
        <member name="M:Maticsoft.DBUtility.DbHelperMySQL.ExecuteSqlTran(System.Collections.Hashtable)">
            <summary>
            执行多条SQL语句，实现数据库事务。
            </summary>
            <param name="SQLStringList">SQL语句的哈希表（key为sql语句，value是该语句的MySqlParameter[]）</param>
        </member>
        <member name="M:Maticsoft.DBUtility.DbHelperMySQL.ExecuteSqlTran(System.Collections.Generic.List{Maticsoft.DBUtility.CommandInfo})">
            <summary>
            执行多条SQL语句，实现数据库事务。
            </summary>
            <param name="SQLStringList">SQL语句的哈希表（key为sql语句，value是该语句的MySqlParameter[]）</param>
        </member>
        <member name="M:Maticsoft.DBUtility.DbHelperMySQL.ExecuteSqlTranWithIndentity(System.Collections.Generic.List{Maticsoft.DBUtility.CommandInfo})">
            <summary>
            执行多条SQL语句，实现数据库事务。
            </summary>
            <param name="SQLStringList">SQL语句的哈希表（key为sql语句，value是该语句的MySqlParameter[]）</param>
        </member>
        <member name="M:Maticsoft.DBUtility.DbHelperMySQL.ExecuteSqlTranWithIndentity(System.Collections.Hashtable)">
            <summary>
            执行多条SQL语句，实现数据库事务。
            </summary>
            <param name="SQLStringList">SQL语句的哈希表（key为sql语句，value是该语句的MySqlParameter[]）</param>
        </member>
        <member name="M:Maticsoft.DBUtility.DbHelperMySQL.GetSingle(System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            执行一条计算查询结果语句，返回查询结果（object）。
            </summary>
            <param name="SQLString">计算查询结果语句</param>
            <returns>查询结果（object）</returns>
        </member>
        <member name="M:Maticsoft.DBUtility.DbHelperMySQL.ExecuteReader(System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            执行查询语句，返回MySqlDataReader ( 注意：调用该方法后，一定要对MySqlDataReader进行Close )
            </summary>
            <param name="strSQL">查询语句</param>
            <returns>MySqlDataReader</returns>
        </member>
        <member name="M:Maticsoft.DBUtility.DbHelperMySQL.Query(System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            执行查询语句，返回DataSet
            </summary>
            <param name="SQLString">查询语句</param>
            <returns>DataSet</returns>
        </member>
        <member name="T:Maticsoft.DBUtility.DbHelperOleDb">
            <summary>
            数据访问基础类(基于OleDb) 
            可以用户可以修改满足自己项目的需要。
            </summary>
        </member>
        <member name="M:Maticsoft.DBUtility.DbHelperOleDb.ExecuteSql(System.String)">
            <summary>
            执行SQL语句，返回影响的记录数
            </summary>
            <param name="SQLString">SQL语句</param>
            <returns>影响的记录数</returns>
        </member>
        <member name="M:Maticsoft.DBUtility.DbHelperOleDb.ExecuteSqlTran(System.Collections.ArrayList)">
            <summary>
            执行多条SQL语句，实现数据库事务。
            </summary>
            <param name="SQLStringList">多条SQL语句</param>		
        </member>
        <member name="M:Maticsoft.DBUtility.DbHelperOleDb.ExecuteSql(System.String,System.String)">
            <summary>
            执行带一个存储过程参数的的SQL语句。
            </summary>
            <param name="SQLString">SQL语句</param>
            <param name="content">参数内容,比如一个字段是格式复杂的文章，有特殊符号，可以通过这个方式添加</param>
            <returns>影响的记录数</returns>
        </member>
        <member name="M:Maticsoft.DBUtility.DbHelperOleDb.ExecuteSqlInsertImg(System.String,System.Byte[])">
            <summary>
            向数据库里插入图像格式的字段(和上面情况类似的另一种实例)
            </summary>
            <param name="strSQL">SQL语句</param>
            <param name="fs">图像字节,数据库的字段类型为image的情况</param>
            <returns>影响的记录数</returns>
        </member>
        <member name="M:Maticsoft.DBUtility.DbHelperOleDb.GetSingle(System.String)">
            <summary>
            执行一条计算查询结果语句，返回查询结果（object）。
            </summary>
            <param name="SQLString">计算查询结果语句</param>
            <returns>查询结果（object）</returns>
        </member>
        <member name="M:Maticsoft.DBUtility.DbHelperOleDb.ExecuteReader(System.String)">
            <summary>
            执行查询语句，返回OleDbDataReader
            </summary>
            <param name="strSQL">查询语句</param>
            <returns>OleDbDataReader</returns>
        </member>
        <member name="M:Maticsoft.DBUtility.DbHelperOleDb.Query(System.String)">
            <summary>
            执行查询语句，返回DataSet
            </summary>
            <param name="SQLString">查询语句</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:Maticsoft.DBUtility.DbHelperOleDb.ExecuteSql(System.String,System.Data.OleDb.OleDbParameter[])">
            <summary>
            执行SQL语句，返回影响的记录数
            </summary>
            <param name="SQLString">SQL语句</param>
            <returns>影响的记录数</returns>
        </member>
        <member name="M:Maticsoft.DBUtility.DbHelperOleDb.ExecuteSqlTran(System.Collections.Hashtable)">
            <summary>
            执行多条SQL语句，实现数据库事务。
            </summary>
            <param name="SQLStringList">SQL语句的哈希表（key为sql语句，value是该语句的OleDbParameter[]）</param>
        </member>
        <member name="M:Maticsoft.DBUtility.DbHelperOleDb.GetSingle(System.String,System.Data.OleDb.OleDbParameter[])">
            <summary>
            执行一条计算查询结果语句，返回查询结果（object）。
            </summary>
            <param name="SQLString">计算查询结果语句</param>
            <returns>查询结果（object）</returns>
        </member>
        <member name="M:Maticsoft.DBUtility.DbHelperOleDb.ExecuteReader(System.String,System.Data.OleDb.OleDbParameter[])">
            <summary>
            执行查询语句，返回OleDbDataReader
            </summary>
            <param name="strSQL">查询语句</param>
            <returns>OleDbDataReader</returns>
        </member>
        <member name="M:Maticsoft.DBUtility.DbHelperOleDb.Query(System.String,System.Data.OleDb.OleDbParameter[])">
            <summary>
            执行查询语句，返回DataSet
            </summary>
            <param name="SQLString">查询语句</param>
            <returns>DataSet</returns>
        </member>
        <member name="T:Maticsoft.DBUtility.DbHelperOra">
            <summary>
            数据访问基础类(基于Oracle)
            可以用户可以修改满足自己项目的需要。
            </summary>
        </member>
        <member name="M:Maticsoft.DBUtility.DbHelperOra.ExecuteSql(System.String)">
            <summary>
            执行SQL语句，返回影响的记录数
            </summary>
            <param name="SQLString">SQL语句</param>
            <returns>影响的记录数</returns>
        </member>
        <member name="M:Maticsoft.DBUtility.DbHelperOra.ExecuteSqlTran(System.Collections.ArrayList)">
            <summary>
            执行多条SQL语句，实现数据库事务。
            </summary>
            <param name="SQLStringList">多条SQL语句</param>		
        </member>
        <member name="M:Maticsoft.DBUtility.DbHelperOra.ExecuteSql(System.String,System.String)">
            <summary>
            执行带一个存储过程参数的的SQL语句。
            </summary>
            <param name="SQLString">SQL语句</param>
            <param name="content">参数内容,比如一个字段是格式复杂的文章，有特殊符号，可以通过这个方式添加</param>
            <returns>影响的记录数</returns>
        </member>
        <member name="M:Maticsoft.DBUtility.DbHelperOra.ExecuteSqlInsertImg(System.String,System.Byte[])">
            <summary>
            向数据库里插入图像格式的字段(和上面情况类似的另一种实例)
            </summary>
            <param name="strSQL">SQL语句</param>
            <param name="fs">图像字节,数据库的字段类型为image的情况</param>
            <returns>影响的记录数</returns>
        </member>
        <member name="M:Maticsoft.DBUtility.DbHelperOra.GetSingle(System.String)">
            <summary>
            执行一条计算查询结果语句，返回查询结果（object）。
            </summary>
            <param name="SQLString">计算查询结果语句</param>
            <returns>查询结果（object）</returns>
        </member>
        <member name="M:Maticsoft.DBUtility.DbHelperOra.ExecuteReader(System.String)">
            <summary>
            执行查询语句，返回OracleDataReader ( 注意：调用该方法后，一定要对SqlDataReader进行Close )
            </summary>
            <param name="strSQL">查询语句</param>
            <returns>OracleDataReader</returns>
        </member>
        <member name="M:Maticsoft.DBUtility.DbHelperOra.Query(System.String)">
            <summary>
            执行查询语句，返回DataSet
            </summary>
            <param name="SQLString">查询语句</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:Maticsoft.DBUtility.DbHelperOra.ExecuteSql(System.String,System.Data.OracleClient.OracleParameter[])">
            <summary>
            执行SQL语句，返回影响的记录数
            </summary>
            <param name="SQLString">SQL语句</param>
            <returns>影响的记录数</returns>
        </member>
        <member name="M:Maticsoft.DBUtility.DbHelperOra.ExecuteSqlTran(System.Collections.Hashtable)">
            <summary>
            执行多条SQL语句，实现数据库事务。
            </summary>
            <param name="SQLStringList">SQL语句的哈希表（key为sql语句，value是该语句的OracleParameter[]）</param>
        </member>
        <member name="M:Maticsoft.DBUtility.DbHelperOra.GetSingle(System.String,System.Data.OracleClient.OracleParameter[])">
            <summary>
            执行一条计算查询结果语句，返回查询结果（object）。
            </summary>
            <param name="SQLString">计算查询结果语句</param>
            <returns>查询结果（object）</returns>
        </member>
        <member name="M:Maticsoft.DBUtility.DbHelperOra.ExecuteReader(System.String,System.Data.OracleClient.OracleParameter[])">
            <summary>
            执行查询语句，返回OracleDataReader ( 注意：调用该方法后，一定要对SqlDataReader进行Close )
            </summary>
            <param name="strSQL">查询语句</param>
            <returns>OracleDataReader</returns>
        </member>
        <member name="M:Maticsoft.DBUtility.DbHelperOra.Query(System.String,System.Data.OracleClient.OracleParameter[])">
            <summary>
            执行查询语句，返回DataSet
            </summary>
            <param name="SQLString">查询语句</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:Maticsoft.DBUtility.DbHelperOra.RunProcedure(System.String,System.Data.IDataParameter[])">
            <summary>
            执行存储过程 返回SqlDataReader ( 注意：调用该方法后，一定要对SqlDataReader进行Close )
            </summary>
            <param name="storedProcName">存储过程名</param>
            <param name="parameters">存储过程参数</param>
            <returns>OracleDataReader</returns>
        </member>
        <member name="M:Maticsoft.DBUtility.DbHelperOra.RunProcedure(System.String,System.Data.IDataParameter[],System.String)">
            <summary>
            执行存储过程
            </summary>
            <param name="storedProcName">存储过程名</param>
            <param name="parameters">存储过程参数</param>
            <param name="tableName">DataSet结果中的表名</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:Maticsoft.DBUtility.DbHelperOra.BuildQueryCommand(System.Data.OracleClient.OracleConnection,System.String,System.Data.IDataParameter[])">
            <summary>
            构建 OracleCommand 对象(用来返回一个结果集，而不是一个整数值)
            </summary>
            <param name="connection">数据库连接</param>
            <param name="storedProcName">存储过程名</param>
            <param name="parameters">存储过程参数</param>
            <returns>OracleCommand</returns>
        </member>
        <member name="M:Maticsoft.DBUtility.DbHelperOra.RunProcedure(System.String,System.Data.IDataParameter[],System.Int32@)">
            <summary>
            执行存储过程，返回影响的行数		
            </summary>
            <param name="storedProcName">存储过程名</param>
            <param name="parameters">存储过程参数</param>
            <param name="rowsAffected">影响的行数</param>
            <returns></returns>
        </member>
        <member name="M:Maticsoft.DBUtility.DbHelperOra.BuildIntCommand(System.Data.OracleClient.OracleConnection,System.String,System.Data.IDataParameter[])">
            <summary>
            创建 OracleCommand 对象实例(用来返回一个整数值)	
            </summary>
            <param name="storedProcName">存储过程名</param>
            <param name="parameters">存储过程参数</param>
            <returns>OracleCommand 对象实例</returns>
        </member>
        <member name="T:Maticsoft.DBUtility.DbHelperSQL">
            <summary>
            数据访问抽象基础类
            </summary>
        </member>
        <member name="M:Maticsoft.DBUtility.DbHelperSQL.ColumnExists(System.String,System.String)">
            <summary>
            判断是否存在某表的某个字段
            </summary>
            <param name="tableName">表名称</param>
            <param name="columnName">列名称</param>
            <returns>是否存在</returns>
        </member>
        <member name="M:Maticsoft.DBUtility.DbHelperSQL.TabExists(System.String)">
            <summary>
            表是否存在
            </summary>
            <param name="TableName"></param>
            <returns></returns>
        </member>
        <member name="M:Maticsoft.DBUtility.DbHelperSQL.ExecuteSql(System.String)">
            <summary>
            执行SQL语句，返回影响的记录数
            </summary>
            <param name="SQLString">SQL语句</param>
            <returns>影响的记录数</returns>
        </member>
        <member name="M:Maticsoft.DBUtility.DbHelperSQL.ExecuteSqlTran(System.Collections.Generic.List{Maticsoft.DBUtility.CommandInfo},System.Collections.Generic.List{Maticsoft.DBUtility.CommandInfo})">
            <summary>
            执行Sql和Oracle滴混合事务
            </summary>
            <param name="list">SQL命令行列表</param>
            <param name="oracleCmdSqlList">Oracle命令行列表</param>
            <returns>执行结果 0-由于SQL造成事务失败 -1 由于Oracle造成事务失败 1-整体事务执行成功</returns>
        </member>
        <member name="M:Maticsoft.DBUtility.DbHelperSQL.ExecuteSqlTran(System.Collections.Generic.List{System.String})">
            <summary>
            执行多条SQL语句，实现数据库事务。
            </summary>
            <param name="SQLStringList">多条SQL语句</param>		
        </member>
        <member name="M:Maticsoft.DBUtility.DbHelperSQL.ExecuteSql(System.String,System.String)">
            <summary>
            执行带一个存储过程参数的的SQL语句。
            </summary>
            <param name="SQLString">SQL语句</param>
            <param name="content">参数内容,比如一个字段是格式复杂的文章，有特殊符号，可以通过这个方式添加</param>
            <returns>影响的记录数</returns>
        </member>
        <member name="M:Maticsoft.DBUtility.DbHelperSQL.ExecuteSqlGet(System.String,System.String)">
            <summary>
            执行带一个存储过程参数的的SQL语句。
            </summary>
            <param name="SQLString">SQL语句</param>
            <param name="content">参数内容,比如一个字段是格式复杂的文章，有特殊符号，可以通过这个方式添加</param>
            <returns>影响的记录数</returns>
        </member>
        <member name="M:Maticsoft.DBUtility.DbHelperSQL.ExecuteSqlInsertImg(System.String,System.Byte[])">
            <summary>
            向数据库里插入图像格式的字段(和上面情况类似的另一种实例)
            </summary>
            <param name="strSQL">SQL语句</param>
            <param name="fs">图像字节,数据库的字段类型为image的情况</param>
            <returns>影响的记录数</returns>
        </member>
        <member name="M:Maticsoft.DBUtility.DbHelperSQL.GetSingle(System.String)">
            <summary>
            执行一条计算查询结果语句，返回查询结果（object）。
            </summary>
            <param name="SQLString">计算查询结果语句</param>
            <returns>查询结果（object）</returns>
        </member>
        <member name="M:Maticsoft.DBUtility.DbHelperSQL.ExecuteReader(System.String)">
            <summary>
            执行查询语句，返回SqlDataReader ( 注意：调用该方法后，一定要对SqlDataReader进行Close )
            </summary>
            <param name="strSQL">查询语句</param>
            <returns>SqlDataReader</returns>
        </member>
        <member name="M:Maticsoft.DBUtility.DbHelperSQL.Query(System.String)">
            <summary>
            执行查询语句，返回DataSet
            </summary>
            <param name="SQLString">查询语句</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:Maticsoft.DBUtility.DbHelperSQL.ExecuteSql(System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行SQL语句，返回影响的记录数
            </summary>
            <param name="SQLString">SQL语句</param>
            <returns>影响的记录数</returns>
        </member>
        <member name="M:Maticsoft.DBUtility.DbHelperSQL.ExecuteSqlTran(System.Collections.Hashtable)">
            <summary>
            执行多条SQL语句，实现数据库事务。
            </summary>
            <param name="SQLStringList">SQL语句的哈希表（key为sql语句，value是该语句的SqlParameter[]）</param>
        </member>
        <member name="M:Maticsoft.DBUtility.DbHelperSQL.ExecuteSqlTran(System.Collections.Generic.List{Maticsoft.DBUtility.CommandInfo})">
            <summary>
            执行多条SQL语句，实现数据库事务。
            </summary>
            <param name="SQLStringList">SQL语句的哈希表（key为sql语句，value是该语句的SqlParameter[]）</param>
        </member>
        <member name="M:Maticsoft.DBUtility.DbHelperSQL.ExecuteSqlTranWithIndentity(System.Collections.Generic.List{Maticsoft.DBUtility.CommandInfo})">
            <summary>
            执行多条SQL语句，实现数据库事务。
            </summary>
            <param name="SQLStringList">SQL语句的哈希表（key为sql语句，value是该语句的SqlParameter[]）</param>
        </member>
        <member name="M:Maticsoft.DBUtility.DbHelperSQL.ExecuteSqlTranWithIndentity(System.Collections.Hashtable)">
            <summary>
            执行多条SQL语句，实现数据库事务。
            </summary>
            <param name="SQLStringList">SQL语句的哈希表（key为sql语句，value是该语句的SqlParameter[]）</param>
        </member>
        <member name="M:Maticsoft.DBUtility.DbHelperSQL.GetSingle(System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行一条计算查询结果语句，返回查询结果（object）。
            </summary>
            <param name="SQLString">计算查询结果语句</param>
            <returns>查询结果（object）</returns>
        </member>
        <member name="M:Maticsoft.DBUtility.DbHelperSQL.ExecuteReader(System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行查询语句，返回SqlDataReader ( 注意：调用该方法后，一定要对SqlDataReader进行Close )
            </summary>
            <param name="strSQL">查询语句</param>
            <returns>SqlDataReader</returns>
        </member>
        <member name="M:Maticsoft.DBUtility.DbHelperSQL.Query(System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行查询语句，返回DataSet
            </summary>
            <param name="SQLString">查询语句</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:Maticsoft.DBUtility.DbHelperSQL.RunProcedure(System.String,System.Data.IDataParameter[])">
            <summary>
            执行存储过程，返回SqlDataReader ( 注意：调用该方法后，一定要对SqlDataReader进行Close )
            </summary>
            <param name="storedProcName">存储过程名</param>
            <param name="parameters">存储过程参数</param>
            <returns>SqlDataReader</returns>
        </member>
        <member name="M:Maticsoft.DBUtility.DbHelperSQL.RunProcedure(System.String,System.Data.IDataParameter[],System.String)">
            <summary>
            执行存储过程
            </summary>
            <param name="storedProcName">存储过程名</param>
            <param name="parameters">存储过程参数</param>
            <param name="tableName">DataSet结果中的表名</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:Maticsoft.DBUtility.DbHelperSQL.BuildQueryCommand(System.Data.SqlClient.SqlConnection,System.String,System.Data.IDataParameter[])">
            <summary>
            构建 SqlCommand 对象(用来返回一个结果集，而不是一个整数值)
            </summary>
            <param name="connection">数据库连接</param>
            <param name="storedProcName">存储过程名</param>
            <param name="parameters">存储过程参数</param>
            <returns>SqlCommand</returns>
        </member>
        <member name="M:Maticsoft.DBUtility.DbHelperSQL.RunProcedure(System.String,System.Data.IDataParameter[],System.Int32@)">
            <summary>
            执行存储过程，返回影响的行数		
            </summary>
            <param name="storedProcName">存储过程名</param>
            <param name="parameters">存储过程参数</param>
            <param name="rowsAffected">影响的行数</param>
            <returns></returns>
        </member>
        <member name="M:Maticsoft.DBUtility.DbHelperSQL.BuildIntCommand(System.Data.SqlClient.SqlConnection,System.String,System.Data.IDataParameter[])">
            <summary>
            创建 SqlCommand 对象实例(用来返回一个整数值)	
            </summary>
            <param name="storedProcName">存储过程名</param>
            <param name="parameters">存储过程参数</param>
            <returns>SqlCommand 对象实例</returns>
        </member>
        <member name="T:Maticsoft.DBUtility.DbHelperSQLite">
            <summary>
            数据访问基础类(基于SQLite)
            可以用户可以修改满足自己项目的需要。
            </summary>
        </member>
        <member name="M:Maticsoft.DBUtility.DbHelperSQLite.ExecuteSql(System.String)">
            <summary>
            执行SQL语句，返回影响的记录数
            </summary>
            <param name="SQLString">SQL语句</param>
            <returns>影响的记录数</returns>
        </member>
        <member name="M:Maticsoft.DBUtility.DbHelperSQLite.ExecuteSqlTran(System.Collections.ArrayList)">
            <summary>
            执行多条SQL语句，实现数据库事务。
            </summary>
            <param name="SQLStringList">多条SQL语句</param>		
        </member>
        <member name="M:Maticsoft.DBUtility.DbHelperSQLite.ExecuteSql(System.String,System.String)">
            <summary>
            执行带一个存储过程参数的的SQL语句。
            </summary>
            <param name="SQLString">SQL语句</param>
            <param name="content">参数内容,比如一个字段是格式复杂的文章，有特殊符号，可以通过这个方式添加</param>
            <returns>影响的记录数</returns>
        </member>
        <member name="M:Maticsoft.DBUtility.DbHelperSQLite.ExecuteSqlInsertImg(System.String,System.Byte[])">
            <summary>
            向数据库里插入图像格式的字段(和上面情况类似的另一种实例)
            </summary>
            <param name="strSQL">SQL语句</param>
            <param name="fs">图像字节,数据库的字段类型为image的情况</param>
            <returns>影响的记录数</returns>
        </member>
        <member name="M:Maticsoft.DBUtility.DbHelperSQLite.GetSingle(System.String)">
            <summary>
            执行一条计算查询结果语句，返回查询结果（object）。
            </summary>
            <param name="SQLString">计算查询结果语句</param>
            <returns>查询结果（object）</returns>
        </member>
        <member name="M:Maticsoft.DBUtility.DbHelperSQLite.ExecuteReader(System.String)">
            <summary>
            执行查询语句，返回SQLiteDataReader
            </summary>
            <param name="strSQL">查询语句</param>
            <returns>SQLiteDataReader</returns>
        </member>
        <member name="M:Maticsoft.DBUtility.DbHelperSQLite.Query(System.String)">
            <summary>
            执行查询语句，返回DataSet
            </summary>
            <param name="SQLString">查询语句</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:Maticsoft.DBUtility.DbHelperSQLite.ExecuteSql(System.String,System.Data.SQLite.SQLiteParameter[])">
            <summary>
            执行SQL语句，返回影响的记录数
            </summary>
            <param name="SQLString">SQL语句</param>
            <returns>影响的记录数</returns>
        </member>
        <member name="M:Maticsoft.DBUtility.DbHelperSQLite.ExecuteSqlTran(System.Collections.Hashtable)">
            <summary>
            执行多条SQL语句，实现数据库事务。
            </summary>
            <param name="SQLStringList">SQL语句的哈希表（key为sql语句，value是该语句的SQLiteParameter[]）</param>
        </member>
        <member name="M:Maticsoft.DBUtility.DbHelperSQLite.GetSingle(System.String,System.Data.SQLite.SQLiteParameter[])">
            <summary>
            执行一条计算查询结果语句，返回查询结果（object）。
            </summary>
            <param name="SQLString">计算查询结果语句</param>
            <returns>查询结果（object）</returns>
        </member>
        <member name="M:Maticsoft.DBUtility.DbHelperSQLite.ExecuteReader(System.String,System.Data.SQLite.SQLiteParameter[])">
            <summary>
            执行查询语句，返回SQLiteDataReader
            </summary>
            <param name="strSQL">查询语句</param>
            <returns>SQLiteDataReader</returns>
        </member>
        <member name="M:Maticsoft.DBUtility.DbHelperSQLite.Query(System.String,System.Data.SQLite.SQLiteParameter[])">
            <summary>
            执行查询语句，返回DataSet
            </summary>
            <param name="SQLString">查询语句</param>
            <returns>DataSet</returns>
        </member>
        <member name="T:Maticsoft.DBUtility.DbHelperSQLP">
            <summary>
            数据访问类，可用于访问不同数据库
            </summary>
        </member>
        <member name="M:Maticsoft.DBUtility.DbHelperSQLP.ColumnExists(System.String,System.String)">
            <summary>
            判断是否存在某表的某个字段
            </summary>
            <param name="tableName">表名称</param>
            <param name="columnName">列名称</param>
            <returns>是否存在</returns>
        </member>
        <member name="M:Maticsoft.DBUtility.DbHelperSQLP.TabExists(System.String)">
            <summary>
            表是否存在
            </summary>
            <param name="TableName"></param>
            <returns></returns>
        </member>
        <member name="M:Maticsoft.DBUtility.DbHelperSQLP.ExecuteSql(System.String)">
            <summary>
            执行SQL语句，返回影响的记录数
            </summary>
            <param name="SQLString">SQL语句</param>
            <returns>影响的记录数</returns>
        </member>
        <member name="M:Maticsoft.DBUtility.DbHelperSQLP.ExecuteSqlTran(System.Collections.Generic.List{Maticsoft.DBUtility.CommandInfo},System.Collections.Generic.List{Maticsoft.DBUtility.CommandInfo})">
            <summary>
            执行Sql和Oracle滴混合事务
            </summary>
            <param name="list">SQL命令行列表</param>
            <param name="oracleCmdSqlList">Oracle命令行列表</param>
            <returns>执行结果 0-由于SQL造成事务失败 -1 由于Oracle造成事务失败 1-整体事务执行成功</returns>
        </member>
        <member name="M:Maticsoft.DBUtility.DbHelperSQLP.ExecuteSqlTran(System.Collections.Generic.List{System.String})">
            <summary>
            执行多条SQL语句，实现数据库事务。
            </summary>
            <param name="SQLStringList">多条SQL语句</param>		
        </member>
        <member name="M:Maticsoft.DBUtility.DbHelperSQLP.ExecuteSql(System.String,System.String)">
            <summary>
            执行带一个存储过程参数的的SQL语句。
            </summary>
            <param name="SQLString">SQL语句</param>
            <param name="content">参数内容,比如一个字段是格式复杂的文章，有特殊符号，可以通过这个方式添加</param>
            <returns>影响的记录数</returns>
        </member>
        <member name="M:Maticsoft.DBUtility.DbHelperSQLP.ExecuteSqlGet(System.String,System.String)">
            <summary>
            执行带一个存储过程参数的的SQL语句。
            </summary>
            <param name="SQLString">SQL语句</param>
            <param name="content">参数内容,比如一个字段是格式复杂的文章，有特殊符号，可以通过这个方式添加</param>
            <returns>影响的记录数</returns>
        </member>
        <member name="M:Maticsoft.DBUtility.DbHelperSQLP.ExecuteSqlInsertImg(System.String,System.Byte[])">
            <summary>
            向数据库里插入图像格式的字段(和上面情况类似的另一种实例)
            </summary>
            <param name="strSQL">SQL语句</param>
            <param name="fs">图像字节,数据库的字段类型为image的情况</param>
            <returns>影响的记录数</returns>
        </member>
        <member name="M:Maticsoft.DBUtility.DbHelperSQLP.GetSingle(System.String)">
            <summary>
            执行一条计算查询结果语句，返回查询结果（object）。
            </summary>
            <param name="SQLString">计算查询结果语句</param>
            <returns>查询结果（object）</returns>
        </member>
        <member name="M:Maticsoft.DBUtility.DbHelperSQLP.ExecuteReader(System.String)">
            <summary>
            执行查询语句，返回SqlDataReader ( 注意：调用该方法后，一定要对SqlDataReader进行Close )
            </summary>
            <param name="strSQL">查询语句</param>
            <returns>SqlDataReader</returns>
        </member>
        <member name="M:Maticsoft.DBUtility.DbHelperSQLP.Query(System.String)">
            <summary>
            执行查询语句，返回DataSet
            </summary>
            <param name="SQLString">查询语句</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:Maticsoft.DBUtility.DbHelperSQLP.ExecuteSql(System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行SQL语句，返回影响的记录数
            </summary>
            <param name="SQLString">SQL语句</param>
            <returns>影响的记录数</returns>
        </member>
        <member name="M:Maticsoft.DBUtility.DbHelperSQLP.ExecuteSqlTran(System.Collections.Hashtable)">
            <summary>
            执行多条SQL语句，实现数据库事务。
            </summary>
            <param name="SQLStringList">SQL语句的哈希表（key为sql语句，value是该语句的SqlParameter[]）</param>
        </member>
        <member name="M:Maticsoft.DBUtility.DbHelperSQLP.ExecuteSqlTran(System.Collections.Generic.List{Maticsoft.DBUtility.CommandInfo})">
            <summary>
            执行多条SQL语句，实现数据库事务。
            </summary>
            <param name="SQLStringList">SQL语句的哈希表（key为sql语句，value是该语句的SqlParameter[]）</param>
        </member>
        <member name="M:Maticsoft.DBUtility.DbHelperSQLP.ExecuteSqlTranWithIndentity(System.Collections.Generic.List{Maticsoft.DBUtility.CommandInfo})">
            <summary>
            执行多条SQL语句，实现数据库事务。
            </summary>
            <param name="SQLStringList">SQL语句的哈希表（key为sql语句，value是该语句的SqlParameter[]）</param>
        </member>
        <member name="M:Maticsoft.DBUtility.DbHelperSQLP.ExecuteSqlTranWithIndentity(System.Collections.Hashtable)">
            <summary>
            执行多条SQL语句，实现数据库事务。
            </summary>
            <param name="SQLStringList">SQL语句的哈希表（key为sql语句，value是该语句的SqlParameter[]）</param>
        </member>
        <member name="M:Maticsoft.DBUtility.DbHelperSQLP.GetSingle(System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行一条计算查询结果语句，返回查询结果（object）。
            </summary>
            <param name="SQLString">计算查询结果语句</param>
            <returns>查询结果（object）</returns>
        </member>
        <member name="M:Maticsoft.DBUtility.DbHelperSQLP.ExecuteReader(System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行查询语句，返回SqlDataReader ( 注意：调用该方法后，一定要对SqlDataReader进行Close )
            </summary>
            <param name="strSQL">查询语句</param>
            <returns>SqlDataReader</returns>
        </member>
        <member name="M:Maticsoft.DBUtility.DbHelperSQLP.Query(System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行查询语句，返回DataSet
            </summary>
            <param name="SQLString">查询语句</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:Maticsoft.DBUtility.DbHelperSQLP.RunProcedure(System.String,System.Data.IDataParameter[])">
            <summary>
            执行存储过程，返回SqlDataReader  ( 注意：调用该方法后，一定要对SqlDataReader进行Close )
            </summary>
            <param name="storedProcName">存储过程名</param>
            <param name="parameters">存储过程参数</param>
            <returns>SqlDataReader</returns>
        </member>
        <member name="M:Maticsoft.DBUtility.DbHelperSQLP.RunProcedure(System.String,System.Data.IDataParameter[],System.String)">
            <summary>
            执行存储过程
            </summary>
            <param name="storedProcName">存储过程名</param>
            <param name="parameters">存储过程参数</param>
            <param name="tableName">DataSet结果中的表名</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:Maticsoft.DBUtility.DbHelperSQLP.BuildQueryCommand(System.Data.SqlClient.SqlConnection,System.String,System.Data.IDataParameter[])">
            <summary>
            构建 SqlCommand 对象(用来返回一个结果集，而不是一个整数值)
            </summary>
            <param name="connection">数据库连接</param>
            <param name="storedProcName">存储过程名</param>
            <param name="parameters">存储过程参数</param>
            <returns>SqlCommand</returns>
        </member>
        <member name="M:Maticsoft.DBUtility.DbHelperSQLP.RunProcedure(System.String,System.Data.IDataParameter[],System.Int32@)">
            <summary>
            执行存储过程，返回影响的行数		
            </summary>
            <param name="storedProcName">存储过程名</param>
            <param name="parameters">存储过程参数</param>
            <param name="rowsAffected">影响的行数</param>
            <returns></returns>
        </member>
        <member name="M:Maticsoft.DBUtility.DbHelperSQLP.BuildIntCommand(System.Data.SqlClient.SqlConnection,System.String,System.Data.IDataParameter[])">
            <summary>
            创建 SqlCommand 对象实例(用来返回一个整数值)	
            </summary>
            <param name="storedProcName">存储过程名</param>
            <param name="parameters">存储过程参数</param>
            <returns>SqlCommand 对象实例</returns>
        </member>
        <member name="T:Maticsoft.DBUtility.OracleHelper">
            <summary>
            A helper class used to execute queries against an Oracle database
            </summary>
        </member>
        <member name="M:Maticsoft.DBUtility.OracleHelper.ExecuteNonQuery(System.String,System.Data.CommandType,System.String,System.Data.OracleClient.OracleParameter[])">
            <summary>
            Execute a database query which does not include a select
            </summary>
            <param name="connString">Connection string to database</param>
            <param name="cmdType">Command type either stored procedure or SQL</param>
            <param name="cmdText">Acutall SQL Command</param>
            <param name="commandParameters">Parameters to bind to the command</param>
            <returns></returns>
        </member>
        <member name="M:Maticsoft.DBUtility.OracleHelper.Query(System.String,System.String)">
            <summary>
            执行查询语句，返回DataSet
            </summary>
            <param name="SQLString">查询语句</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:Maticsoft.DBUtility.OracleHelper.GetSingle(System.String,System.String)">
            <summary>
            执行一条计算查询结果语句，返回查询结果（object）。
            </summary>
            <param name="SQLString">计算查询结果语句</param>
            <returns>查询结果（object）</returns>
        </member>
        <member name="M:Maticsoft.DBUtility.OracleHelper.ExecuteNonQuery(System.Data.OracleClient.OracleTransaction,System.Data.CommandType,System.String,System.Data.OracleClient.OracleParameter[])">
            <summary>
            Execute an OracleCommand (that returns no resultset) against an existing database transaction 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(trans, CommandType.StoredProcedure, "PublishOrders", new OracleParameter(":prodid", 24));
            </remarks>
            <param name="trans">an existing database transaction</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL/SQL command</param>
            <param name="commandParameters">an array of OracleParamters used to execute the command</param>
            <returns>an int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Maticsoft.DBUtility.OracleHelper.ExecuteNonQuery(System.Data.OracleClient.OracleConnection,System.Data.CommandType,System.String,System.Data.OracleClient.OracleParameter[])">
            <summary>
            Execute an OracleCommand (that returns no resultset) against an existing database connection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(connString, CommandType.StoredProcedure, "PublishOrders", new OracleParameter(":prodid", 24));
            </remarks>
            <param name="conn">an existing database connection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL/SQL command</param>
            <param name="commandParameters">an array of OracleParamters used to execute the command</param>
            <returns>an int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Maticsoft.DBUtility.OracleHelper.ExecuteNonQuery(System.String,System.String)">
            <summary>
            Execute an OracleCommand (that returns no resultset) against an existing database connection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(connString, CommandType.StoredProcedure, "PublishOrders", new OracleParameter(":prodid", 24));
            </remarks>
            <param name="conn">an existing database connection</param>
            <param name="commandText">the stored procedure name or PL/SQL command</param>
            <returns>an int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Maticsoft.DBUtility.OracleHelper.ExecuteReader(System.String,System.Data.CommandType,System.String,System.Data.OracleClient.OracleParameter[])">
            <param name="commandText">the stored procedure name or PL/SQL command</param>
            <param name="commandParameters">an array of OracleParamters used to execute the command</param>
            <returns></returns>
        </member>
        <member name="M:Maticsoft.DBUtility.OracleHelper.ExecuteScalar(System.String,System.Data.CommandType,System.String,System.Data.OracleClient.OracleParameter[])">
            <summary>
            Execute an OracleCommand that returns the first column of the first record against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             Object obj = ExecuteScalar(connString, CommandType.StoredProcedure, "PublishOrders", new OracleParameter(":prodid", 24));
            </remarks>
            <param name="connectionString">a valid connection string for a SqlConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL/SQL command</param>
            <param name="commandParameters">an array of OracleParamters used to execute the command</param>
            <returns>An object that should be converted to the expected type using Convert.To{Type}</returns>
        </member>
        <member name="M:Maticsoft.DBUtility.OracleHelper.ExecuteScalar(System.Data.OracleClient.OracleTransaction,System.Data.CommandType,System.String,System.Data.OracleClient.OracleParameter[])">
            <summary>
            Execute	a OracleCommand (that returns a 1x1 resultset)	against	the	specified SqlTransaction
            using the provided parameters.
            </summary>
            <param name="transaction">A	valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name	or PL/SQL command</param>
            <param name="commandParameters">An array of	OracleParamters used to execute the command</param>
            <returns>An	object containing the value	in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Maticsoft.DBUtility.OracleHelper.ExecuteScalar(System.Data.OracleClient.OracleConnection,System.Data.CommandType,System.String,System.Data.OracleClient.OracleParameter[])">
            <summary>
            Execute an OracleCommand that returns the first column of the first record against an existing database connection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             Object obj = ExecuteScalar(conn, CommandType.StoredProcedure, "PublishOrders", new OracleParameter(":prodid", 24));
            </remarks>
            <param name="conn">an existing database connection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL/SQL command</param>
            <param name="commandParameters">an array of OracleParamters used to execute the command</param>
            <returns>An object that should be converted to the expected type using Convert.To{Type}</returns>
        </member>
        <member name="M:Maticsoft.DBUtility.OracleHelper.CacheParameters(System.String,System.Data.OracleClient.OracleParameter[])">
            <summary>
            Add a set of parameters to the cached
            </summary>
            <param name="cacheKey">Key value to look up the parameters</param>
            <param name="commandParameters">Actual parameters to cached</param>
        </member>
        <member name="M:Maticsoft.DBUtility.OracleHelper.GetCachedParameters(System.String)">
            <summary>
            Fetch parameters from the cache
            </summary>
            <param name="cacheKey">Key to look up the parameters</param>
            <returns></returns>
        </member>
        <member name="M:Maticsoft.DBUtility.OracleHelper.PrepareCommand(System.Data.OracleClient.OracleCommand,System.Data.OracleClient.OracleConnection,System.Data.OracleClient.OracleTransaction,System.Data.CommandType,System.String,System.Data.OracleClient.OracleParameter[])">
            <summary>
            Internal function to prepare a command for execution by the database
            </summary>
            <param name="cmd">Existing command object</param>
            <param name="conn">Database connection object</param>
            <param name="trans">Optional transaction object</param>
            <param name="cmdType">Command type, e.g. stored procedure</param>
            <param name="cmdText">Command test</param>
            <param name="commandParameters">Parameters for the command</param>
        </member>
        <member name="M:Maticsoft.DBUtility.OracleHelper.OraBit(System.Boolean)">
            <summary>
            Converter to use boolean data type with Oracle
            </summary>
            <param name="value">Value to convert</param>
            <returns></returns>
        </member>
        <member name="M:Maticsoft.DBUtility.OracleHelper.OraBool(System.String)">
            <summary>
            Converter to use boolean data type with Oracle
            </summary>
            <param name="value">Value to convert</param>
            <returns></returns>
        </member>
        <member name="M:Maticsoft.DBUtility.OracleHelper.ExecuteSqlTran(System.String,System.Collections.Generic.List{Maticsoft.DBUtility.CommandInfo})">
            <summary>
            执行多条SQL语句，实现数据库事务。
            </summary>
            <param name="SQLStringList">多条SQL语句</param>		
        </member>
        <member name="M:Maticsoft.DBUtility.OracleHelper.ExecuteSqlTran(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            执行多条SQL语句，实现数据库事务。
            </summary>
            <param name="SQLStringList">多条SQL语句</param>		
        </member>
        <member name="T:Maticsoft.DBUtility.SqlHelper">
            <summary>
            The SqlHelper class is intended to encapsulate high performance, 
            scalable best practices for common uses of SqlClient.
            </summary>
        </member>
        <member name="M:Maticsoft.DBUtility.SqlHelper.ExecuteNonQuery(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns no resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(connString, CommandType.StoredProcedure, "PublishOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">a valid connection string for a SqlConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <param name="commandParameters">an array of SqlParamters used to execute the command</param>
            <returns>an int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Maticsoft.DBUtility.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns no resultset) against an existing database connection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(connString, CommandType.StoredProcedure, "PublishOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="conn">an existing database connection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <param name="commandParameters">an array of SqlParamters used to execute the command</param>
            <returns>an int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Maticsoft.DBUtility.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns no resultset) using an existing SQL Transaction 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(connString, CommandType.StoredProcedure, "PublishOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="trans">an existing sql transaction</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <param name="commandParameters">an array of SqlParamters used to execute the command</param>
            <returns>an int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Maticsoft.DBUtility.SqlHelper.ExecuteReader(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand that returns a resultset against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             SqlDataReader r = ExecuteReader(connString, CommandType.StoredProcedure, "PublishOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">a valid connection string for a SqlConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <param name="commandParameters">an array of SqlParamters used to execute the command</param>
            <returns>A SqlDataReader containing the results</returns>
        </member>
        <member name="M:Maticsoft.DBUtility.SqlHelper.ExecuteScalar(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand that returns the first column of the first record against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             Object obj = ExecuteScalar(connString, CommandType.StoredProcedure, "PublishOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">a valid connection string for a SqlConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <param name="commandParameters">an array of SqlParamters used to execute the command</param>
            <returns>An object that should be converted to the expected type using Convert.To{Type}</returns>
        </member>
        <member name="M:Maticsoft.DBUtility.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand that returns the first column of the first record against an existing database connection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             Object obj = ExecuteScalar(connString, CommandType.StoredProcedure, "PublishOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="conn">an existing database connection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <param name="commandParameters">an array of SqlParamters used to execute the command</param>
            <returns>An object that should be converted to the expected type using Convert.To{Type}</returns>
        </member>
        <member name="M:Maticsoft.DBUtility.SqlHelper.CacheParameters(System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            add parameter array to the cache
            </summary>
            <param name="cacheKey">Key to the parameter cache</param>
            <param name="cmdParms">an array of SqlParamters to be cached</param>
        </member>
        <member name="M:Maticsoft.DBUtility.SqlHelper.GetCachedParameters(System.String)">
            <summary>
            Retrieve cached parameters
            </summary>
            <param name="cacheKey">key used to lookup parameters</param>
            <returns>Cached SqlParamters array</returns>
        </member>
        <member name="M:Maticsoft.DBUtility.SqlHelper.PrepareCommand(System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Prepare a command for execution
            </summary>
            <param name="cmd">SqlCommand object</param>
            <param name="conn">SqlConnection object</param>
            <param name="trans">SqlTransaction object</param>
            <param name="cmdType">Cmd type e.g. stored procedure or text</param>
            <param name="cmdText">Command text, e.g. Select * from Products</param>
            <param name="cmdParms">SqlParameters to use in the command</param>
        </member>
    </members>
</doc>
